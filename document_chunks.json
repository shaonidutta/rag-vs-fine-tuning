{
  "chunking_config": {
    "chunk_size": 800,
    "overlap_size": 200,
    "total_chunks": 282
  },
  "chunks_by_document": {
    "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl": [
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_0",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Published as a conference paper at ICLR 2021\nAN IMAGE IS WORTH 16X16 WORDS:\nAlexey Dosovitskiy,, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn,\nXiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer,\nGeorg Heigold, Sylvain Gelly, Jakob Uszkoreit, Neil Houlsby,\nequal technical contribution, equal advising\nGoogle Research, Brain Team\n{adosovitskiy, neilhoulsby}@google.com\nABSTRACT\nWhile the Transformer architecture has become the de-facto standard for natural\nlanguage processing tasks, its applications to computer vision remain limited. In\nvision, attention is either applied in conjunction with convolutional networks, or\nused to replace certain components of convolutional networks while keeping their\noverall structure in place.",
        "start_pos": 0,
        "end_pos": 757,
        "size": 756
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_1",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ted. In vision, attention is either applied in conjunction with convolutional networks, or used to replace certain components of convolutional networks while keeping their overall structure in place. We show that this reliance on CNNs is not necessary and a pure transformer applied directly to sequences of image patches can perform very well on image classication tasks. When pre-trained on large amounts of data and transferred to multiple mid-sized or small image recognition benchmarks (Image Net, CIFAR-100, VTAB, etc.), Vision Transformer (Vi T) attains excellent results compared to state-of-the-art convolutional networks while requiring sub- stantially fewer computational resources to train.1 Self-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have",
        "start_pos": 557,
        "end_pos": 1352,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_2",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "e-of-the-art convolutional networks while requiring sub- stantially fewer computational resources to train.1 Self-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have become the model of choice in natural language processing (NLP). The dominant approach is to pre-train on a large text corpus and then ne-tune on a smaller task-specic dataset (Devlin et al., 2019). Thanks to Transformers computational efciency and scalability, it has become possible to train models of unprecedented size, with over 100B parameters (Brown et al., 2020; Lepikhin et al., 2020). With the models and datasets growing, there is still no sign of saturating performance. In computer vision, however, convolutional architectures remain dominant (Le Cun et al., 1989; Krizhevsky et al.,",
        "start_pos": 1152,
        "end_pos": 1949,
        "size": 797
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_3",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ith the\nmodels and datasets growing, there is still no sign of saturating performance.\nIn computer vision, however, convolutional architectures remain dominant (Le Cun et al., 1989;\nKrizhevsky et al., 2012; He et al., 2016). Inspired by NLP successes, multiple works try combining\nCNN-like architectures with self-attention (Wang et al., 2018; Carion et al., 2020), some replacing\nthe convolutions entirely (Ramachandran et al., 2019; Wang et al., 2020a). The latter models, while\ntheoretically efcient, have not yet been scaled effectively on modern hardware accelerators due to\nthe use of specialized attention patterns. Therefore, in large-scale image recognition, classic Res Net-\nlike architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al.,\n2020).",
        "start_pos": 1749,
        "end_pos": 2547,
        "size": 797
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_4",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ized attention patterns. Therefore, in large-scale image recognition, classic Res Net- like architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al., 2020). Inspired by the Transformer scaling successes in NLP, we experiment with applying a standard Transformer directly to images, with the fewest possible modications. To do so, we split an image into patches and provide the sequence of linear embeddings of these patches as an input to a Trans- former. Image patches are treated the same way as tokens (words) in an NLP application. We train the model on image classication in supervised fashion. When trained on mid-sized datasets such as Image Net without strong regularization, these mod- els yield modest accuracies of a few percentage points below",
        "start_pos": 2347,
        "end_pos": 3145,
        "size": 798
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_5",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "on image classication in supervised fashion.\nWhen trained on mid-sized datasets such as Image Net without strong regularization, these mod-\nels yield modest accuracies of a few percentage points below Res Nets of comparable size. This\nseemingly discouraging outcome may be expected: Transformers lack some of the inductive biases\n1Fine-tuning\ncode\nand\npre-trained\nmodels\nare\navailable\nat\nhttps://github.com/\ngoogle-research/vision_transformer\n\nPublished as a conference paper at ICLR 2021\ninherent to CNNs, such as translation equivariance and locality, and therefore do not generalize well\nwhen trained on insufcient amounts of data.\nHowever, the picture changes if the models are trained on larger datasets (14M-300M images). We\nnd that large scale training trumps inductive bias.",
        "start_pos": 2945,
        "end_pos": 3728,
        "size": 782
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_6",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ze well\nwhen trained on insufcient amounts of data.\nHowever, the picture changes if the models are trained on larger datasets (14M-300M images). We\nnd that large scale training trumps inductive bias. Our Vision Transformer (Vi T) attains excellent\nresults when pre-trained at sufcient scale and transferred to tasks with fewer datapoints. When\npre-trained on the public Image Net-21k dataset or the in-house JFT-300M dataset, Vi T approaches\nor beats state of the art on multiple image recognition benchmarks. In particular, the best model\nreaches the accuracy of 88.55% on Image Net, 90.72% on Image Net-Rea L, 94.55% on CIFAR-100,\nand 77.63% on the VTAB suite of 19 tasks.\nTransformers were proposed by Vaswani et al.",
        "start_pos": 3528,
        "end_pos": 4248,
        "size": 719
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_7",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "lar, the best model\nreaches the accuracy of 88.55% on Image Net, 90.72% on Image Net-Rea L, 94.55% on CIFAR-100,\nand 77.63% on the VTAB suite of 19 tasks.\nTransformers were proposed by Vaswani et al. (2017) for machine translation, and have since be-\ncome the state of the art method in many NLP tasks. Large Transformer-based models are often\npre-trained on large corpora and then ne-tuned for the task at hand: BERT (Devlin et al., 2019)\nuses a denoising self-supervised pre-training task, while the GPT line of work uses language mod-\neling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020).\nNaive application of self-attention to images would require that each pixel attends to every other\npixel.",
        "start_pos": 4048,
        "end_pos": 4773,
        "size": 724
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_8",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "anguage mod- eling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020). Naive application of self-attention to images would require that each pixel attends to every other pixel. With quadratic cost in the number of pixels, this does not scale to realistic input sizes. Thus, to apply Transformers in the context of image processing, several approximations have been tried in the past. Parmar et al. (2018) applied the self-attention only in local neighborhoods for each query pixel instead of globally. Such local multi-head dot-product self attention blocks can completely replace convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different line of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-",
        "start_pos": 4573,
        "end_pos": 5371,
        "size": 798
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_9",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "place convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different\nline of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-\nattention in order to be applicable to images. An alternative way to scale attention is to apply it in\nblocks of varying sizes (Weissenborn et al., 2019), in the extreme case only along individual axes (Ho\net al., 2019; Wang et al., 2020a). Many of these specialized attention architectures demonstrate\npromising results on computer vision tasks, but require complex engineering to be implemented\nefciently on hardware accelerators.\nMost related to ours is the model of Cordonnier et al. (2020), which extracts patches of size 2  2\nfrom the input image and applies full self-attention on top.",
        "start_pos": 5171,
        "end_pos": 5965,
        "size": 793
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_10",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ted\nefciently on hardware accelerators.\nMost related to ours is the model of Cordonnier et al. (2020), which extracts patches of size 2  2\nfrom the input image and applies full self-attention on top. This model is very similar to Vi T,\nbut our work goes further to demonstrate that large scale pre-training makes vanilla transformers\ncompetitive with (or even better than) state-of-the-art CNNs. Moreover, Cordonnier et al. (2020)\nuse a small patch size of 2  2 pixels, which makes the model applicable only to small-resolution\nimages, while we handle medium-resolution images as well.\nThere has also been a lot of interest in combining convolutional neural networks (CNNs) with forms\nof self-attention, e.g.",
        "start_pos": 5765,
        "end_pos": 6474,
        "size": 708
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_11",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "o small-resolution images, while we handle medium-resolution images as well. There has also been a lot of interest in combining convolutional neural networks (CNNs) with forms of self-attention, e.g. by augmenting feature maps for image classication (Bello et al., 2019) or by further processing the output of a CNN using self-attention, e.g. for object detection (Hu et al., 2018; Carion et al., 2020), video processing (Wang et al., 2018; Sun et al., 2019), image classication (Wu et al., 2020), unsupervised object discovery (Locatello et al., 2020), or unied text-vision tasks (Chen et al., 2020c; Lu et al., 2019; Li et al., 2019). Another recent related model is image GPT (i GPT) (Chen et al., 2020a), which applies Transformers to image pixels after reducing image resolution and color",
        "start_pos": 6274,
        "end_pos": 7067,
        "size": 793
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_12",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": ", 2020c; Lu et al., 2019; Li et al., 2019).\nAnother recent related model is image GPT (i GPT) (Chen et al., 2020a), which applies Transformers\nto image pixels after reducing image resolution and color space. The model is trained in an unsu-\npervised fashion as a generative model, and the resulting representation can then be ne-tuned or\nprobed linearly for classication performance, achieving a maximal accuracy of 72% on Image Net.\nOur work adds to the increasing collection of papers that explore image recognition at larger scales\nthan the standard Image Net dataset. The use of additional data sources allows to achieve state-of-\nthe-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020).\nMoreover, Sun et al.",
        "start_pos": 6867,
        "end_pos": 7626,
        "size": 758
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_13",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Net dataset. The use of additional data sources allows to achieve state-of-\nthe-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020).\nMoreover, Sun et al. (2017) study how CNN performance scales with dataset size, and Kolesnikov\net al. (2020); Djolonga et al. (2020) perform an empirical exploration of CNN transfer learning from\nlarge scale datasets such as Image Net-21k and JFT-300M. We focus on these two latter datasets as\nwell, but train Transformers instead of Res Net-based models used in prior works.\n\nPublished as a conference paper at ICLR 2021\nTransformer Encoder\nMLP \nHead\nVision Transformer (Vi T)\n*\nLinear Projection of Flattened Patches\n* Extra learnable\n [ cl ass] embedding\n2\n4\n6\n8\n0\nPatch + Position \nEmbedding\nClass\nBird\nBall\nCar\n...",
        "start_pos": 7426,
        "end_pos": 8225,
        "size": 798
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_14",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "1\nTransformer Encoder\nMLP \nHead\nVision Transformer (Vi T)\n*\nLinear Projection of Flattened Patches\n* Extra learnable\n [ cl ass] embedding\n2\n4\n6\n8\n0\nPatch + Position \nEmbedding\nClass\nBird\nBall\nCar\n...\nEmbedded \nPatches\nMulti-Head \nAttention\nNorm\nMLP\nNorm\n+\nL x\n+\nTransformer Encoder\nFigure 1: Model overview. We split an image into xed-size patches, linearly embed each of them,\nadd position embeddings, and feed the resulting sequence of vectors to a standard Transformer\nencoder. In order to perform classication, we use the standard approach of adding an extra learnable\nclassication token to the sequence. The illustration of the Transformer encoder was inspired by\nVaswani et al. (2017).\nMETHOD\nIn model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible.",
        "start_pos": 8025,
        "end_pos": 8822,
        "size": 796
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_15",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "e sequence. The illustration of the Transformer encoder was inspired by Vaswani et al. (2017). METHOD In model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible. An advantage of this intentionally simple setup is that scalable NLP Transformer architectures and their efcient implementations can be used almost out of the box. 3.1 VISION TRANSFORMER (VIT) An overview of the model is depicted in Figure 1. The standard Transformer receives as input a 1D sequence of token embeddings. To handle 2D images, we reshape the image x RHW C into a sequence of attened 2D patches xp RN(P 2C), where (H, W) is the resolution of the original image, C is the number of channels, (P, P) is the resolution of each image patch, and N = HW/P 2 is the resulting number of",
        "start_pos": 8622,
        "end_pos": 9414,
        "size": 792
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_16",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "attened 2D patches xp RN(P 2C), where (H, W) is the resolution of the original\nimage, C is the number of channels, (P, P) is the resolution of each image patch, and N = HW/P 2\nis the resulting number of patches, which also serves as the effective input sequence length for the\nTransformer. The Transformer uses constant latent vector size D through all of its layers, so we\natten the patches and map to D dimensions with a trainable linear projection (Eq. 1). We refer to\nthe output of this projection as the patch embeddings.\nSimilar to BERTs [class] token, we prepend a learnable embedding to the sequence of embed-\nded patches (z0\n0 = xclass), whose state at the output of the Transformer encoder (z0\nL) serves as the\nimage representation y (Eq. 4).",
        "start_pos": 9214,
        "end_pos": 9967,
        "size": 752
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_17",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "oken, we prepend a learnable embedding to the sequence of embed-\nded patches (z0\n0 = xclass), whose state at the output of the Transformer encoder (z0\nL) serves as the\nimage representation y (Eq. 4). Both during pre-training and ne-tuning, a classication head is at-\ntached to z0\nL. The classication head is implemented by a MLP with one hidden layer at pre-training\ntime and by a single linear layer at ne-tuning time.\nPosition embeddings are added to the patch embeddings to retain positional information. We use\nstandard learnable 1D position embeddings, since we have not observed signicant performance\ngains from using more advanced 2D-aware position embeddings (Appendix D.3). The resulting\nsequence of embedding vectors serves as input to the encoder.",
        "start_pos": 9767,
        "end_pos": 10526,
        "size": 758
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_18",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ince we have not observed signicant performance\ngains from using more advanced 2D-aware position embeddings (Appendix D.3). The resulting\nsequence of embedding vectors serves as input to the encoder.\nThe Transformer encoder (Vaswani et al., 2017) consists of alternating layers of multiheaded self-\nattention (MSA, see Appendix A) and MLP blocks (Eq. 2, 3). Layernorm (LN) is applied before\nevery block, and residual connections after every block (Wang et al., 2019; Baevski & Auli, 2019).\n\nPublished as a conference paper at ICLR 2021\nThe MLP contains two layers with a GELU non-linearity.\nz0 = [xclass; x1\np E; x2\np E;    ; x N\np E] + Epos,\nE R(P 2C)D, Epos R(N+1)D\n(1)\nz\n= MSA(LN(z1)) + z1,\n= 1 . . . L\n(2)\nz= MLP(LN(z\n)) + z\n,\n= 1 . . . L\n(3)\ny = LN(z0\nL)\n(4)\nInductive bias.",
        "start_pos": 10326,
        "end_pos": 11106,
        "size": 779
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_19",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "linearity.\nz0 = [xclass; x1\np E; x2\np E;    ; x N\np E] + Epos,\nE R(P 2C)D, Epos R(N+1)D\n(1)\nz\n= MSA(LN(z1)) + z1,\n= 1 . . . L\n(2)\nz= MLP(LN(z\n)) + z\n,\n= 1 . . . L\n(3)\ny = LN(z0\nL)\n(4)\nInductive bias.\nWe note that Vision Transformer has much less image-specic inductive bias than\nCNNs. In CNNs, locality, two-dimensional neighborhood structure, and translation equivariance are\nbaked into each layer throughout the whole model. In Vi T, only MLP layers are local and transla-\ntionally equivariant, while the self-attention layers are global. The two-dimensional neighborhood\nstructure is used very sparingly: in the beginning of the model by cutting the image into patches and\nat ne-tuning time for adjusting the position embeddings for images of different resolution (as de-\nscribed below).",
        "start_pos": 10906,
        "end_pos": 11697,
        "size": 790
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_20",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "very sparingly: in the beginning of the model by cutting the image into patches and at ne-tuning time for adjusting the position embeddings for images of different resolution (as de- scribed below). Other than that, the position embeddings at initialization time carry no information about the 2D positions of the patches and all spatial relations between the patches have to be learned from scratch. Hybrid Architecture. As an alternative to raw image patches, the input sequence can be formed from feature maps of a CNN (Le Cun et al., 1989). In this hybrid model, the patch embedding projection E (Eq. 1) is applied to patches extracted from a CNN feature map. As a special case, the patches can have spatial size 1x1, which means that the input sequence is obtained by simply attening the",
        "start_pos": 11497,
        "end_pos": 12289,
        "size": 792
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_21",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ection E (Eq. 1) is applied to patches extracted from a CNN feature map. As a special case,\nthe patches can have spatial size 1x1, which means that the input sequence is obtained by simply\nattening the spatial dimensions of the feature map and projecting to the Transformer dimension.\nThe classication input embedding and position embeddings are added as described above.\n3.2\nFINE-TUNING AND HIGHER RESOLUTION\nTypically, we pre-train Vi T on large datasets, and ne-tune to (smaller) downstream tasks. For\nthis, we remove the pre-trained prediction head and attach a zero-initialized D  K feedforward\nlayer, where K is the number of downstream classes. It is often benecial to ne-tune at higher\nresolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020).",
        "start_pos": 12089,
        "end_pos": 12861,
        "size": 771
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_22",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "nitialized D K feedforward layer, where K is the number of downstream classes. It is often benecial to ne-tune at higher resolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020). When feeding images of higher resolution, we keep the patch size the same, which results in a larger effective sequence length. The Vision Transformer can handle arbitrary sequence lengths (up to memory constraints), however, the pre-trained position embeddings may no longer be meaningful. We therefore perform 2D interpolation of the pre-trained position embeddings, according to their location in the original image. Note that this resolution adjustment and patch extraction are the only points at which an inductive bias about the 2D structure of the images is manually injected into the Vision",
        "start_pos": 12661,
        "end_pos": 13458,
        "size": 797
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_23",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "in the original\nimage. Note that this resolution adjustment and patch extraction are the only points at which an\ninductive bias about the 2D structure of the images is manually injected into the Vision Transformer.\nWe evaluate the representation learning capabilities of Res Net, Vision Transformer (Vi T), and the\nhybrid. To understand the data requirements of each model, we pre-train on datasets of varying size\nand evaluate many benchmark tasks. When considering the computational cost of pre-training the\nmodel, Vi T performs very favourably, attaining state of the art on most recognition benchmarks at\na lower pre-training cost. Lastly, we perform a small experiment using self-supervision, and show\nthat self-supervised Vi T holds promise for the future.\n4.1\nSETUP\nDatasets.",
        "start_pos": 13258,
        "end_pos": 14041,
        "size": 782
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_24",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "recognition benchmarks at a lower pre-training cost. Lastly, we perform a small experiment using self-supervision, and show that self-supervised Vi T holds promise for the future. 4.1 SETUP Datasets. To explore model scalability, we use the ILSVRC-2012 Image Net dataset with 1k classes and 1.3M images (we refer to it as Image Net in what follows), its superset Image Net-21k with 21k classes and 14M images (Deng et al., 2009), and JFT (Sun et al., 2017) with 18k classes and 303M high-resolution images. We de-duplicate the pre-training datasets w.r.t. the test sets of the downstream tasks following Kolesnikov et al. (2020). We transfer the models trained on these dataset to several benchmark tasks: Image Net on the original validation labels and the cleaned-up Rea L labels (Beyer et al.,",
        "start_pos": 13841,
        "end_pos": 14637,
        "size": 796
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_25",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "llowing Kolesnikov et al. (2020). We transfer the models trained on these\ndataset to several benchmark tasks: Image Net on the original validation labels and the cleaned-up\nRea L labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al.,\n2012), and Oxford Flowers-102 (Nilsback & Zisserman, 2008). For these datasets, pre-processing\nfollows Kolesnikov et al. (2020).\n\nPublished as a conference paper at ICLR 2021\nModel\nLayers\nHidden size D\nMLP size\nHeads\nParams\nVi T-Base\n768\n12\n86M\nVi T-Large\n1024\n16\n307M\nVi T-Huge\n1280\n16\n632M\nTable 1: Details of Vision Transformer model variants.\nWe also evaluate on the 19-task VTAB classication suite (Zhai et al., 2019b). VTAB evaluates\nlow-data transfer to diverse tasks, using 1 000 training examples per task.",
        "start_pos": 14437,
        "end_pos": 15227,
        "size": 789
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_26",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "on Transformer model variants.\nWe also evaluate on the 19-task VTAB classication suite (Zhai et al., 2019b). VTAB evaluates\nlow-data transfer to diverse tasks, using 1 000 training examples per task. The tasks are divided into\nthree groups: Natural  tasks like the above, Pets, CIFAR, etc. Specialized  medical and satellite\nimagery, and Structured  tasks that require geometric understanding like localization.\nModel Variants. We base Vi T congurations on those used for BERT (Devlin et al., 2019), as\nsummarized in Table 1. The Base and Large models are directly adopted from BERT and we\nadd the larger Huge model. In what follows we use brief notation to indicate the model size and\nthe input patch size: for instance, Vi T-L/16 means the Large variant with 1616 input patch size.",
        "start_pos": 15027,
        "end_pos": 15811,
        "size": 783
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_27",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "nd we\nadd the larger Huge model. In what follows we use brief notation to indicate the model size and\nthe input patch size: for instance, Vi T-L/16 means the Large variant with 1616 input patch size.\nNote that the Transformers sequence length is inversely proportional to the square of the patch size,\nthus models with smaller patch size are computationally more expensive.\nFor the baseline CNNs, we use Res Net (He et al., 2016), but replace the Batch Normalization lay-\ners (Ioffe & Szegedy, 2015) with Group Normalization (Wu & He, 2018), and used standardized\nconvolutions (Qiao et al., 2019). These modications improve transfer (Kolesnikov et al., 2020),\nand we denote the modied model Res Net (Bi T).",
        "start_pos": 15611,
        "end_pos": 16318,
        "size": 706
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_28",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "oup Normalization (Wu & He, 2018), and used standardized convolutions (Qiao et al., 2019). These modications improve transfer (Kolesnikov et al., 2020), and we denote the modied model Res Net (Bi T). For the hybrids, we feed the intermediate fea- ture maps into Vi T with patch size of one pixel. To experiment with different sequence lengths, we either (i) take the output of stage 4 of a regular Res Net50 or (ii) remove stage 4, place the same number of layers in stage 3 (keeping the total number of layers), and take the output of this extended stage 3. Option (ii) results in a 4x longer sequence length, and a more expensive Vi T model. Training & Fine-tuning. We train all models, including Res Nets, using Adam (Kingma & Ba, 2015) with 1 = 0.9, 2 = 0.999, a batch size of 4096 and apply a",
        "start_pos": 16118,
        "end_pos": 16915,
        "size": 797
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_29",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "uence length, and a more expensive Vi T model. Training & Fine-tuning. We train all models, including Res Nets, using Adam (Kingma & Ba, 2015) with 1 = 0.9, 2 = 0.999, a batch size of 4096 and apply a high weight decay of 0.1, which we found to be useful for transfer of all models (Appendix D.1 shows that, in contrast to common practices, Adam works slightly better than SGD for Res Nets in our setting). We use a linear learning rate warmup and decay, see Appendix B.1 for details. For ne-tuning we use SGD with momentum, batch size 512, for all models, see Appendix B.1.1. For Image Net results in Table 2, we ne-tuned at higher resolution: 512 for Vi T-L/16 and 518 for Vi T-H/14, and also used Polyak & Juditsky (1992) averaging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et",
        "start_pos": 16715,
        "end_pos": 17509,
        "size": 794
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_30",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ults in Table 2, we ne-tuned at higher resolution: 512 for Vi T-L/16 and 518 for Vi T-H/14, and also used Polyak & Juditsky (1992) averaging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et al., 2020b). Metrics. We report results on downstream datasets either through few-shot or ne-tuning accuracy. Fine-tuning accuracies capture the performance of each model after ne-tuning it on the respective dataset. Few-shot accuracies are obtained by solving a regularized least-squares regression problem that maps the (frozen) representation of a subset of training images to {1, 1}K target vectors. This formulation allows us to recover the exact solution in closed form. Though we mainly focus on ne-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-y",
        "start_pos": 17309,
        "end_pos": 18097,
        "size": 788
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_31",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "target vectors. This\nformulation allows us to recover the exact solution in closed form. Though we mainly focus on\nne-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-y evaluation\nwhere ne-tuning would be too costly.\n4.2\nWe rst compare our largest models  Vi T-H/14 and Vi T-L/16  to state-of-the-art CNNs from\nthe literature. The rst comparison point is Big Transfer (Bi T) (Kolesnikov et al., 2020), which\nperforms supervised transfer learning with large Res Nets. The second is Noisy Student (Xie et al.,\n2020), which is a large Efcient Net trained using semi-supervised learning on Image Net and JFT-\n300M with the labels removed. Currently, Noisy Student is the state of the art on Image Net and\nBi T-L on the other datasets reported here.",
        "start_pos": 17897,
        "end_pos": 18674,
        "size": 775
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_32",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "rained using semi-supervised learning on Image Net and JFT- 300M with the labels removed. Currently, Noisy Student is the state of the art on Image Net and Bi T-L on the other datasets reported here. All models were trained on TPUv3 hardware, and we report the number of TPUv3-core-days taken to pre-train each of them, that is, the number of TPU v3 cores (2 per chip) used for training multiplied by the training time in days. Table 2 shows the results. The smaller Vi T-L/16 model pre-trained on JFT-300M outperforms Bi T-L (which is pre-trained on the same dataset) on all tasks, while requiring substantially less computa- tional resources to train. The larger model, Vi T-H/14, further improves the performance, especially on the more challenging datasets Image Net, CIFAR-100, and the VTAB",
        "start_pos": 18474,
        "end_pos": 19269,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_33",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ing substantially less computa- tional resources to train. The larger model, Vi T-H/14, further improves the performance, especially on the more challenging datasets Image Net, CIFAR-100, and the VTAB suite. Interestingly, this Published as a conference paper at ICLR 2021 Ours-JFT Ours-JFT Ours-I21k Bi T-L Noisy Student (Vi T-H/14) (Vi T-L/16) (Vi T-L/16) (Res Net152x4) (Efcient Net-L2) Image Net 88.55 0.04 87.76 0.03 85.30 0.02 87.54 0.02 88.4/88.5 Image Net Rea L 90.72 0.05 90.54 0.03 88.62 0.05 90.54 90.55 CIFAR-10 99.50 0.06 99.42 0.03 99.15 0.03 99.37 0.06 CIFAR-100 94.55 0.04 93.90 0.05 93.25 0.05 93.51 0.08 Oxford-IIIT Pets 97.56 0.03 97.32 0.11 94.67 0.15 96.62 0.23 Oxford Flowers-102 99.68 0.02 99.74 0.00 99.61 0.02 99.63 0.03 VTAB (19 tasks) 77.63",
        "start_pos": 19069,
        "end_pos": 19836,
        "size": 767
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_34",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "3\n99.37  0.06\n\nCIFAR-100\n94.55  0.04\n93.90  0.05\n93.25  0.05\n93.51  0.08\n\nOxford-IIIT Pets\n97.56  0.03\n97.32  0.11\n94.67  0.15\n96.62  0.23\n\nOxford Flowers-102\n99.68  0.02\n99.74  0.00\n99.61  0.02\n99.63  0.03\n\nVTAB (19 tasks)\n77.63  0.23\n76.28  0.46\n72.72  0.21\n76.29  1.70\n\nTPUv3-core-days\n2.5k\n0.68k\n0.23k\n9.9k\n12.3k\nTable 2:\nComparison with state of the art on popular image classication benchmarks. We re-\nport mean and standard deviation of the accuracies, averaged over three ne-tuning runs. Vision\nTransformer models pre-trained on the JFT-300M dataset outperform Res Net-based baselines on all\ndatasets, while taking substantially less computational resources to pre-train. Vi T pre-trained on the\nsmaller public Image Net-21k dataset performs well too.",
        "start_pos": 19636,
        "end_pos": 20396,
        "size": 759
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_35",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "tperform Res Net-based baselines on all\ndatasets, while taking substantially less computational resources to pre-train. Vi T pre-trained on the\nsmaller public Image Net-21k dataset performs well too. Slightly improved 88.5% result reported\nin Touvron et al. (2020).\nVTAB (19 tasks)\n70\n80\nAccuracy [%]\nNatural (7 tasks)\n80\nSpecialized (4 tasks)\n82\n88\nStructured (8 tasks)\n60\nVi T-H/14\nBi T-L (R152x4)\nVIVI-Ex-100% (R50x3)\nS4L (R50x1)\nFigure 2: Breakdown of VTAB performance in Natural, Specialized, and Structured task groups.\nmodel still took substantially less compute to pre-train than prior state of the art. However, we note\nthat pre-training efciency may be affected not only by the architecture choice, but also other pa-\nrameters, such as training schedule, optimizer, weight decay, etc.",
        "start_pos": 20196,
        "end_pos": 20991,
        "size": 794
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_36",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "tate of the art. However, we note that pre-training efciency may be affected not only by the architecture choice, but also other pa- rameters, such as training schedule, optimizer, weight decay, etc. We provide a controlled study of performance vs. compute for different architectures in Section 4.4. Finally, the Vi T-L/16 model pre-trained on the public Image Net-21k dataset performs well on most datasets too, while taking fewer resources to pre-train: it could be trained using a standard cloud TPUv3 with 8 cores in ap- proximately 30 days. Figure 2 decomposes the VTAB tasks into their respective groups, and compares to previous SOTA methods on this benchmark: Bi T, VIVI a Res Net co-trained on Image Net and Youtube (Tschannen et al., 2020), and S4L supervised plus semi-supervised",
        "start_pos": 20791,
        "end_pos": 21582,
        "size": 791
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_37",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "r respective groups, and compares to previous SOTA\nmethods on this benchmark: Bi T, VIVI  a Res Net co-trained on Image Net and Youtube (Tschannen\net al., 2020), and S4L  supervised plus semi-supervised learning on Image Net (Zhai et al., 2019a).\nVi T-H/14 outperforms Bi T-R152x4, and other methods, on the Natural and Structured tasks. On the\nSpecialized the performance of the top two models is similar.\n4.3\nPRE-TRAINING DATA REQUIREMENTS\nThe Vision Transformer performs well when pre-trained on a large JFT-300M dataset. With fewer\ninductive biases for vision than Res Nets, how crucial is the dataset size? We perform two series of\nexperiments.\nFirst, we pre-train Vi T models on datasets of increasing size: Image Net, Image Net-21k, and JFT-\n300M.",
        "start_pos": 21382,
        "end_pos": 22137,
        "size": 754
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_38",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "r vision than Res Nets, how crucial is the dataset size? We perform two series of\nexperiments.\nFirst, we pre-train Vi T models on datasets of increasing size: Image Net, Image Net-21k, and JFT-\n300M. To boost the performance on the smaller datasets, we optimize three basic regularization\nparameters  weight decay, dropout, and label smoothing. Figure 3 shows the results after ne-\ntuning to Image Net (results on other datasets are shown in Table 5)2. When pre-trained on the\nsmallest dataset, Image Net, Vi T-Large models underperform compared to Vi T-Base models, despite\n(moderate) regularization. With Image Net-21k pre-training, their performances are similar. Only\nwith JFT-300M, do we see the full benet of larger models.",
        "start_pos": 21937,
        "end_pos": 22667,
        "size": 729
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_39",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "erform compared to Vi T-Base models, despite\n(moderate) regularization. With Image Net-21k pre-training, their performances are similar. Only\nwith JFT-300M, do we see the full benet of larger models. Figure 3 also shows the performance\n2Note that the Image Net pre-trained models are also ne-tuned, but again on Image Net. This is because the\nresolution increase during ne-tuning improves the performance.\n\nPublished as a conference paper at ICLR 2021\nImage Net\nImage Net-21k\nJFT-300M\nPre-training dataset\n75\n85\nImage Net Top1 Accuracy [%]\nBi T\nVi T-B/32\nVi T-B/16\nVi T-L/32\nVi T-L/16\nVi T-H/14\nFigure 3:\nTransfer to Image Net.\nWhile\nlarge Vi T models perform worse than Bi T\nRes Nets (shaded area) when pre-trained on\nsmall datasets, they shine when pre-trained on\nlarger datasets.",
        "start_pos": 22467,
        "end_pos": 23250,
        "size": 782
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_40",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "6\nVi T-H/14\nFigure 3:\nTransfer to Image Net.\nWhile\nlarge Vi T models perform worse than Bi T\nRes Nets (shaded area) when pre-trained on\nsmall datasets, they shine when pre-trained on\nlarger datasets. Similarly, larger Vi T variants\novertake smaller ones as the dataset grows.\n10 M\n30 M\n100 M\n300 M\nNumber of JFT pre-training samples\n40\n60\nLinear 5-shot Image Net Top1 [%]\nVi T-L/16\nVi T-L/32\nVi T-B/32\nVi T-b/32\nRes Net50x1 (Bi T)\nRes Net152x2 (Bi T)\nFigure 4: Linear few-shot evaluation on Ima-\nge Net versus pre-training size. Res Nets per-\nform better with smaller pre-training datasets\nbut plateau sooner than Vi T, which performs\nbetter with larger pre-training. Vi T-b is Vi T-B\nwith all hidden dimensions halved.",
        "start_pos": 23050,
        "end_pos": 23770,
        "size": 719
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_41",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ng size. Res Nets per-\nform better with smaller pre-training datasets\nbut plateau sooner than Vi T, which performs\nbetter with larger pre-training. Vi T-b is Vi T-B\nwith all hidden dimensions halved.\n103\n90\nTransfer accuracy [%]\nAverage-5\nTransformer (Vi T)\nRes Net (Bi T)\nHybrid\n103\n75\n85\nImage Net\nTransformer (Vi T)\nRes Net (Bi T)\nHybrid\nTotal pre-training compute [exa FLOPs]\nFigure 5: Performance versus cost for different architectures: Vision Transformers, Res Nets, and\nhybrids. Vision Transformers generally outperform Res Nets with the same computational budget.\nHybrids improve upon pure Transformers for smaller model sizes, but the gap vanishes for larger\nmodels.\nregion spanned by Bi T models of different sizes.",
        "start_pos": 23570,
        "end_pos": 24297,
        "size": 726
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_42",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Res Nets with the same computational budget.\nHybrids improve upon pure Transformers for smaller model sizes, but the gap vanishes for larger\nmodels.\nregion spanned by Bi T models of different sizes. The Bi T CNNs outperform Vi T on Image Net, but\nwith the larger datasets, Vi T overtakes.\nSecond, we train our models on random subsets of 9M, 30M, and 90M as well as the full JFT-\n300M dataset. We do not perform additional regularization on the smaller subsets and use the same\nhyper-parameters for all settings. This way, we assess the intrinsic model properties, and not the\neffect of regularization. We do, however, use early-stopping, and report the best validation accuracy\nachieved during training. To save compute, we report few-shot linear accuracy instead of full ne-\ntuning accuracy.",
        "start_pos": 24097,
        "end_pos": 24892,
        "size": 793
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_43",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ization. We do, however, use early-stopping, and report the best validation accuracy\nachieved during training. To save compute, we report few-shot linear accuracy instead of full ne-\ntuning accuracy. Figure 4 contains the results. Vision Transformers overt more than Res Nets with\ncomparable computational cost on smaller datasets. For example, Vi T-B/32 is slightly faster than\nRes Net50; it performs much worse on the 9M subset, but better on 90M+ subsets. The same is true\nfor Res Net152x2 and Vi T-L/16. This result reinforces the intuition that the convolutional inductive\nbias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from\ndata is sufcient, even benecial.",
        "start_pos": 24692,
        "end_pos": 25406,
        "size": 713
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_44",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "esult reinforces the intuition that the convolutional inductive\nbias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from\ndata is sufcient, even benecial.\nOverall, the few-shot results on Image Net (Figure 4), as well as the low-data results on VTAB\n(Table 2) seem promising for very low-data transfer. Further analysis of few-shot properties of Vi T\nis an exciting direction of future work.\n\nPublished as a conference paper at ICLR 2021\n4.4\nWe perform a controlled scaling study of different models by evaluating transfer performance from\nJFT-300M. In this setting data size does not bottleneck the models performances, and we assess\nperformance versus pre-training cost of each model.",
        "start_pos": 25206,
        "end_pos": 25938,
        "size": 731
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_45",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "erent models by evaluating transfer performance from\nJFT-300M. In this setting data size does not bottleneck the models performances, and we assess\nperformance versus pre-training cost of each model. The model set includes: 7 Res Nets, R50x1,\nR50x2 R101x1, R152x1, R152x2, pre-trained for 7 epochs, plus R152x2 and R200x3 pre-trained\nfor 14 epochs; 6 Vision Transformers, Vi T-B/32, B/16, L/32, L/16, pre-trained for 7 epochs, plus\nL/16 and H/14 pre-trained for 14 epochs; and 5 hybrids, R50+Vi T-B/32, B/16, L/32, L/16 pre-\ntrained for 7 epochs, plus R50+Vi T-L/16 pre-trained for 14 epochs (for hybrids, the number at the\nend of the model name stands not for the patch size, but for the total dowsampling ratio in the Res Net\nbackbone).",
        "start_pos": 25738,
        "end_pos": 26477,
        "size": 738
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_46",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "epochs, plus R50+Vi T-L/16 pre-trained for 14 epochs (for hybrids, the number at the\nend of the model name stands not for the patch size, but for the total dowsampling ratio in the Res Net\nbackbone).\nFigure 5 contains the transfer performance versus total pre-training compute (see Appendix D.4\nfor details on computational costs). Detailed results per model are provided in Table 6 in the Ap-\npendix. A few patterns can be observed. First, Vision Transformers dominate Res Nets on the\nperformance/compute trade-off. Vi T uses approximately 2 4 less compute to attain the same\nperformance (average over 5 datasets). Second, hybrids slightly outperform Vi T at small compu-\ntational budgets, but the difference vanishes for larger models.",
        "start_pos": 26277,
        "end_pos": 27015,
        "size": 737
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_47",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ly 2 4 less compute to attain the same performance (average over 5 datasets). Second, hybrids slightly outperform Vi T at small compu- tational budgets, but the difference vanishes for larger models. This result is somewhat surprising, since one might expect convolutional local feature processing to assist Vi T at any size. Third, Vision Transformers appear not to saturate within the range tried, motivating future scaling efforts. 4.5 Input Attention Figure 6: Representative ex- amples of attention from the output token to the input space. See Appendix D.6 for details. To begin to understand how the Vision Transformer processes im- age data, we analyze its internal representations. The rst layer of the Vision Transformer linearly projects the attened patches into a lower-dimensional",
        "start_pos": 26815,
        "end_pos": 27608,
        "size": 793
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_48",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "stand how the Vision Transformer processes im-\nage data, we analyze its internal representations. The rst layer of\nthe Vision Transformer linearly projects the attened patches into a\nlower-dimensional space (Eq. 1). Figure 7 (left) shows the top prin-\ncipal components of the the learned embedding lters. The com-\nponents resemble plausible basis functions for a low-dimensional\nrepresentation of the ne structure within each patch.\nAfter the projection, a learned position embedding is added to the\npatch representations. Figure 7 (center) shows that the model learns\nto encode distance within the image in the similarity of position em-\nbeddings, i.e. closer patches tend to have more similar position em-\nbeddings.",
        "start_pos": 27408,
        "end_pos": 28126,
        "size": 717
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_49",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ons. Figure 7 (center) shows that the model learns\nto encode distance within the image in the similarity of position em-\nbeddings, i.e. closer patches tend to have more similar position em-\nbeddings. Further, the row-column structure appears; patches in the\nsame row/column have similar embeddings. Finally, a sinusoidal\nstructure is sometimes apparent for larger grids (Appendix D). That\nthe position embeddings learn to represent 2D image topology ex-\nplains why hand-crafted 2D-aware embedding variants do not yield\nimprovements (Appendix D.3).\nSelf-attention allows Vi T to integrate information across the entire\nimage even in the lowest layers. We investigate to what degree\nthe network makes use of this capability.",
        "start_pos": 27926,
        "end_pos": 28649,
        "size": 722
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_50",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ovements (Appendix D.3). Self-attention allows Vi T to integrate information across the entire image even in the lowest layers. We investigate to what degree the network makes use of this capability. Specically, we compute the average distance in image space across which information is integrated, based on the attention weights (Figure 7, right). This attention distance is analogous to receptive eld size in CNNs. We nd that some heads attend to most of the image already in the lowest layers, showing that the ability to integrate information globally is indeed used by the model. Other attention heads have consistently small attention distances in the low layers. This highly localized attention is less pronounced in hybrid models that apply a Res Net before the Transformer (Figure 7,",
        "start_pos": 28449,
        "end_pos": 29241,
        "size": 792
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_51",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ttention heads have consistently small attention distances in the low layers. This highly localized attention is less pronounced in hybrid models that apply a Res Net before the Transformer (Figure 7, right), suggesting that it may serve a similar function as early convolutional layers in CNNs. Further, the attention distance increases with network depth. Globally, we nd that the model attends to image regions that are semantically relevant for classication (Figure 6). 4.6 SELF-SUPERVISION Transformers show impressive performance on NLP tasks. However, much of their success stems not only from their excellent scalability but also from large scale self-supervised pre-training (Devlin Published as a conference paper at ICLR 2021 RGB embedding filters (first 28 principal components) 2 4 6",
        "start_pos": 29041,
        "end_pos": 29837,
        "size": 796
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_52",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "from their excellent scalability but also from large scale self-supervised pre-training (Devlin\n\nPublished as a conference paper at ICLR 2021\nRGB embedding filters\n(first 28 principal components)\n2\n4\n6\nInput patch column\n2\n4\n6\nInput patch row\nPosition embedding similarity\n1\nCosine similarity\n5\n15\nNetwork depth (layer)\n20\n60\n100\nMean attention distance (pixels)\nVi T-L/16\nHead 1\nHead 2\nHead 3\n...\nFigure 7: Left: Filters of the initial linear embedding of RGB values of Vi T-L/32. Center: Sim-\nilarity of position embeddings of Vi T-L/32. Tiles show the cosine similarity between the position\nembedding of the patch with the indicated row and column and the position embeddings of all other\npatches. Right: Size of attended area by head and network depth.",
        "start_pos": 29637,
        "end_pos": 30394,
        "size": 756
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_53",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "sine similarity between the position\nembedding of the patch with the indicated row and column and the position embeddings of all other\npatches. Right: Size of attended area by head and network depth. Each dot shows the mean attention\ndistance across images for one of 16 heads at one layer. See Appendix D.6 for details.\net al., 2019; Radford et al., 2018). We also perform a preliminary exploration on masked patch\nprediction for self-supervision, mimicking the masked language modeling task used in BERT. With\nself-supervised pre-training, our smaller Vi T-B/16 model achieves 79.9% accuracy on Image Net, a\nsignicant improvement of 2% to training from scratch, but still 4% behind supervised pre-training.\nAppendix B.1.2 contains further details.",
        "start_pos": 30194,
        "end_pos": 30944,
        "size": 749
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_54",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ler Vi T-B/16 model achieves 79.9% accuracy on Image Net, a\nsignicant improvement of 2% to training from scratch, but still 4% behind supervised pre-training.\nAppendix B.1.2 contains further details. We leave exploration of contrastive pre-training (Chen\net al., 2020b; He et al., 2020; Bachman et al., 2019; Henaff et al., 2020) to future work.\nWe have explored the direct application of Transformers to image recognition. Unlike prior works\nusing self-attention in computer vision, we do not introduce image-specic inductive biases into\nthe architecture apart from the initial patch extraction step. Instead, we interpret an image as a\nsequence of patches and process it by a standard Transformer encoder as used in NLP.",
        "start_pos": 30744,
        "end_pos": 31467,
        "size": 722
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_55",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ive biases into\nthe architecture apart from the initial patch extraction step. Instead, we interpret an image as a\nsequence of patches and process it by a standard Transformer encoder as used in NLP. This simple,\nyet scalable, strategy works surprisingly well when coupled with pre-training on large datasets.\nThus, Vision Transformer matches or exceeds the state of the art on many image classication\ndatasets, whilst being relatively cheap to pre-train.\nWhile these initial results are encouraging, many challenges remain. One is to apply Vi T to other\ncomputer vision tasks, such as detection and segmentation. Our results, coupled with those in Carion\net al. (2020), indicate the promise of this approach. Another challenge is to continue exploring self-\nsupervised pre-training methods.",
        "start_pos": 31267,
        "end_pos": 32059,
        "size": 791
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_56",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ion and segmentation. Our results, coupled with those in Carion et al. (2020), indicate the promise of this approach. Another challenge is to continue exploring self- supervised pre-training methods. Our initial experiments show improvement from self-supervised pre-training, but there is still large gap between self-supervised and large-scale supervised pre- training. Finally, further scaling of Vi T would likely lead to improved performance. The work was performed in Berlin, Zurich, and Amsterdam. We thank many colleagues at Google for their help, in particular Andreas Steiner for crucial help with the infrastructure and the open- source release of the code; Joan Puigcerver and Maxim Neumann for help with the large-scale training infrastructure; Dmitry Lepikhin, Aravindh Mahendran,",
        "start_pos": 31859,
        "end_pos": 32652,
        "size": 793
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_57",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ial help with the infrastructure and the open-\nsource release of the code; Joan Puigcerver and Maxim Neumann for help with the large-scale\ntraining infrastructure; Dmitry Lepikhin, Aravindh Mahendran, Daniel Keysers, Mario Lucic, Noam\nShazeer, and Colin Raffel for useful discussions.\nSamira Abnar and Willem Zuidema. Quantifying attention ow in transformers. In ACL, 2020.\nPhilip Bachman, R Devon Hjelm, and William Buchwalter. Learning representations by maximizing\nmutual information across views. In Neur IPS, 2019.\n\nPublished as a conference paper at ICLR 2021\nAlexei Baevski and Michael Auli. Adaptive input representations for neural language modeling. In\nICLR, 2019.\nI. Bello, B. Zoph, Q. Le, A. Vaswani, and J. Shlens. Attention augmented convolutional networks.\nIn ICCV, 2019.",
        "start_pos": 32452,
        "end_pos": 33239,
        "size": 786
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_58",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "chael Auli. Adaptive input representations for neural language modeling. In\nICLR, 2019.\nI. Bello, B. Zoph, Q. Le, A. Vaswani, and J. Shlens. Attention augmented convolutional networks.\nIn ICCV, 2019.\nLucas Beyer, Olivier J. Henaff, Alexander Kolesnikov, Xiaohua Zhai, and Aaron van den Oord. Are\nwe done with imagenet? ar Xiv, 2020.\nTom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal,\nArvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are\nfew-shot learners. ar Xiv, 2020.\nNicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, and\nSergey Zagoruyko. End-to-end object detection with transformers. In ECCV, 2020.\nMark Chen, Alec Radford, Rewon Child, Jeff Wu, and Heewoo Jun.",
        "start_pos": 33039,
        "end_pos": 33821,
        "size": 781
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_59",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "briel Synnaeve, Nicolas Usunier, Alexander Kirillov, and\nSergey Zagoruyko. End-to-end object detection with transformers. In ECCV, 2020.\nMark Chen, Alec Radford, Rewon Child, Jeff Wu, and Heewoo Jun. Generative pretraining from\npixels. In ICML, 2020a.\nTing Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey E. Hinton. A simple framework\nfor contrastive learning of visual representations. In ICML, 2020b.\nYen-Chun Chen, Linjie Li, Licheng Yu, Ahmed El Kholy, Faisal Ahmed, Zhe Gan, Yu Cheng, and\nJingjing Liu. UNITER: UNiversal Image-TExt Representation Learning. In ECCV, 2020c.\nRewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse\ntransformers. ar Xiv, 2019.\nJean-Baptiste Cordonnier, Andreas Loukas, and Martin Jaggi.",
        "start_pos": 33621,
        "end_pos": 34390,
        "size": 768
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_60",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "n ECCV, 2020c. Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse transformers. ar Xiv, 2019. Jean-Baptiste Cordonnier, Andreas Loukas, and Martin Jaggi. On the relationship between self- attention and convolutional layers. In ICLR, 2020. J. Deng, W. Dong, R. Socher, L. Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In CVPR, 2009. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In NAACL, 2019. Josip Djolonga, Jessica Yung, Michael Tschannen, Rob Romijnders, Lucas Beyer, Alexander Kolesnikov, Joan Puigcerver, Matthias Minderer, Alexander DAmour, Dan Moldovan, Sylvan Gelly, Neil Houlsby, Xiaohua Zhai, and Mario",
        "start_pos": 34190,
        "end_pos": 34986,
        "size": 796
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_61",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "sica Yung, Michael Tschannen, Rob Romijnders, Lucas Beyer, Alexander\nKolesnikov, Joan Puigcerver, Matthias Minderer, Alexander DAmour, Dan Moldovan, Sylvan\nGelly, Neil Houlsby, Xiaohua Zhai, and Mario Lucic. On robustness and transferability of convo-\nlutional neural networks. ar Xiv, 2020.\nKaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-\nnition. In CVPR, 2016.\nKaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick.\nMomentum contrast for\nunsupervised visual representation learning. In CVPR, 2020.\nJonathan Ho, Nal Kalchbrenner, Dirk Weissenborn, and Tim Salimans. Axial attention in multidi-\nmensional transformers. ar Xiv, 2019.\nHan Hu, Jiayuan Gu, Zheng Zhang, Jifeng Dai, and Yichen Wei. Relation networks for object\ndetection.",
        "start_pos": 34786,
        "end_pos": 35577,
        "size": 790
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_62",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "k Weissenborn, and Tim Salimans. Axial attention in multidi-\nmensional transformers. ar Xiv, 2019.\nHan Hu, Jiayuan Gu, Zheng Zhang, Jifeng Dai, and Yichen Wei. Relation networks for object\ndetection. In CVPR, 2018.\nHan Hu, Zheng Zhang, Zhenda Xie, and Stephen Lin. Local relation networks for image recognition.\nIn ICCV, 2019.\nZilong Huang, Xinggang Wang, Yunchao Wei, Lichao Huang, Humphrey Shi, Wenyu Liu, and\nThomas S. Huang. Ccnet: Criss-cross attention for semantic segmentation. In ICCV, 2020.\nOlivier J. Henaff, Aravind Srinivas, Jeffrey De Fauw, Ali Razavi, Carl Doersch, S. M. Ali Eslami,\nand Aaron van den Oord. Data-efcient image recognition with contrastive predictive coding. In\nICML, 2020.\n\nPublished as a conference paper at ICLR 2021\nSergey Ioffe and Christian Szegedy.",
        "start_pos": 35377,
        "end_pos": 36163,
        "size": 785
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_63",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Ali Eslami,\nand Aaron van den Oord. Data-efcient image recognition with contrastive predictive coding. In\nICML, 2020.\n\nPublished as a conference paper at ICLR 2021\nSergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by\nreducing internal covariate shift. 2015.\nDiederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\nAlexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Joan Puigcerver, Jessica Yung, Sylvain Gelly,\nand Neil Houlsby. Big transfer (Bi T): General visual representation learning. In ECCV, 2020.\nAlex Krizhevsky. Learning multiple layers of features from tiny images. Technical report, 2009.\nAlex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classication with deep convo-\nlutional neural networks.",
        "start_pos": 35963,
        "end_pos": 36762,
        "size": 798
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_64",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "earning multiple layers of features from tiny images. Technical report, 2009.\nAlex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classication with deep convo-\nlutional neural networks. In NIPS, 2012.\nY. Le Cun, B. Boser, J. Denker, D. Henderson, R. Howard, W. Hubbard, and L. Jackel. Backpropa-\ngation applied to handwritten zip code recognition. Neural Computation, 1:541551, 1989.\nDmitry Lepikhin, Hyouk Joong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang,\nMaxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models with conditional\ncomputation and automatic sharding. ar Xiv, 2020.\nLiunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, and Kai-Wei Chang. Visual BERT: A\nSimple and Performant Baseline for Vision and Language. In Arxiv, 2019.",
        "start_pos": 36562,
        "end_pos": 37352,
        "size": 789
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_65",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "and automatic sharding. ar Xiv, 2020.\nLiunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, and Kai-Wei Chang. Visual BERT: A\nSimple and Performant Baseline for Vision and Language. In Arxiv, 2019.\nFrancesco Locatello, Dirk Weissenborn, Thomas Unterthiner, Aravindh Mahendran, Georg Heigold,\nJakob Uszkoreit, Alexey Dosovitskiy, and Thomas Kipf. Object-centric learning with slot atten-\ntion. ar Xiv, 2020.\nJiasen Lu, Dhruv Batra, Devi Parikh, and Stefan Lee. Vi LBERT: Pretraining Task-Agnostic Visi-\nolinguistic Representations for Vision-and-Language Tasks. In Neur IPS. 2019.\nDhruv Mahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li,\nAshwin Bharambe, and Laurens van der Maaten.\nExploring the limits of weakly supervised\npretraining. In ECCV, 2018.\nM.",
        "start_pos": 37152,
        "end_pos": 37941,
        "size": 788
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_66",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li,\nAshwin Bharambe, and Laurens van der Maaten.\nExploring the limits of weakly supervised\npretraining. In ECCV, 2018.\nM. Nilsback and A. Zisserman. Automated ower classication over a large number of classes. In\nICVGIP, 2008.\nOmkar M. Parkhi, Andrea Vedaldi, Andrew Zisserman, and C. V. Jawahar. Cats and dogs. In CVPR,\n2012.\nNiki Parmar, Ashish Vaswani, Jakob Uszkoreit, Lukasz Kaiser, Noam Shazeer, Alexander Ku, and\nDustin Tran. Image transformer. In ICML, 2018.\nB. T. Polyak and A. B. Juditsky. Acceleration of stochastic approximation by averaging. SIAM\nJournal on Control and Optimization, 30(4):838855, 1992.\ndoi: 10.1137/0330046.\nURL\nhttps://doi.org/10.1137/0330046.",
        "start_pos": 37741,
        "end_pos": 38494,
        "size": 752
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_67",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "yak and A. B. Juditsky. Acceleration of stochastic approximation by averaging. SIAM\nJournal on Control and Optimization, 30(4):838855, 1992.\ndoi: 10.1137/0330046.\nURL\nhttps://doi.org/10.1137/0330046.\nSiyuan Qiao, Huiyu Wang, Chenxi Liu, Wei Shen, and Alan Yuille. Weight standardization. ar Xiv\npreprint ar Xiv:1903.10520, 2019.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language under-\nstanding with unsupervised learning. Technical Report, 2018.\nAlec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language\nmodels are unsupervised multitask learners. Technical Report, 2019.\nPrajit Ramachandran, Niki Parmar, Ashish Vaswani, Irwan Bello, Anselm Levskaya, and Jon Shlens.\nStand-alone self-attention in vision models.",
        "start_pos": 38294,
        "end_pos": 39078,
        "size": 783
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_68",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "e unsupervised multitask learners. Technical Report, 2019.\nPrajit Ramachandran, Niki Parmar, Ashish Vaswani, Irwan Bello, Anselm Levskaya, and Jon Shlens.\nStand-alone self-attention in vision models. In Neur IPS, 2019.\nChen Sun, Abhinav Shrivastava, Saurabh Singh, and Abhinav Gupta. Revisiting unreasonable ef-\nfectiveness of data in deep learning era. In ICCV, 2017.\nChen Sun, Austin Myers, Carl Vondrick, Kevin Murphy, and Cordelia Schmid. Videobert: A joint\nmodel for video and language representation learning. In ICCV, 2019.\n\nPublished as a conference paper at ICLR 2021\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy. In Neur IPS. 2019.\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou.",
        "start_pos": 38878,
        "end_pos": 39646,
        "size": 767
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_69",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "CLR 2021\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy. In Neur IPS. 2019.\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy: Fixefcientnet. ar Xiv preprint ar Xiv:2003.08237, 2020.\nMichael Tschannen, Josip Djolonga, Marvin Ritter, Aravindh Mahendran, Neil Houlsby, Sylvain\nGelly, and Mario Lucic. Self-supervised learning of video-induced visual invariances. In Pro-\nceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), June\n2020.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,\nukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017.",
        "start_pos": 39446,
        "end_pos": 40198,
        "size": 751
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_70",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "rn Recognition (CVPR), June\n2020.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,\nukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017.\nHuiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh Chen.\nAxial-deeplab: Stand-alone axial-attention for panoptic segmentation. In ECCV, 2020a.\nHuiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh\nChen.\nAxial-deeplab: Stand-alone axial-attention for panoptic segmentation.\nar Xiv preprint\nar Xiv:2003.07853, 2020b.\nQiang Wang, Bei Li, Tong Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao.\nLearning deep transformer models for machine translation. In ACL, 2019.\nXiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He.",
        "start_pos": 39998,
        "end_pos": 40795,
        "size": 796
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_71",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao.\nLearning deep transformer models for machine translation. In ACL, 2019.\nXiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He. Non-local neural networks. In\nCVPR, 2018.\nDirk Weissenborn, Oscar Tackstrom, and Jakob Uszkoreit. Scaling autoregressive video models. In\nICLR, 2019.\nBichen Wu, Chenfeng Xu, Xiaoliang Dai, Alvin Wan, Peizhao Zhang, Masayoshi Tomizuka, Kurt\nKeutzer, and Peter Vajda. Visual transformers: Token-based image representation and processing\nfor computer vision. arxiv, 2020.\nYuxin Wu and Kaiming He. Group normalization. In ECCV, 2018.\nQizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V. Le. Self-training with noisy student\nimproves imagenet classication. In CVPR, 2020.",
        "start_pos": 40595,
        "end_pos": 41363,
        "size": 767
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_72",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Yuxin Wu and Kaiming He. Group normalization. In ECCV, 2018.\nQizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V. Le. Self-training with noisy student\nimproves imagenet classication. In CVPR, 2020.\nXiaohua Zhai, Avital Oliver, Alexander Kolesnikov, and Lucas Beyer. S4L: Self-Supervised Semi-\nSupervised Learning. In ICCV, 2019a.\nXiaohua Zhai, Joan Puigcerver, Alexander Kolesnikov, Pierre Ruyssen, Carlos Riquelme, Mario\nLucic, Josip Djolonga, Andre Susano Pinto, Maxim Neumann, Alexey Dosovitskiy, et al. A\nlarge-scale study of representation learning with the visual task adaptation benchmark. ar Xiv\npreprint ar Xiv:1910.04867, 2019b.\nHengshuang Zhao, Jiaya Jia, and Vladlen Koltun. Exploring self-attention for image recognition. In\nCVPR, 2020.",
        "start_pos": 41163,
        "end_pos": 41916,
        "size": 750
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_73",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ng with the visual task adaptation benchmark. ar Xiv preprint ar Xiv:1910.04867, 2019b. Hengshuang Zhao, Jiaya Jia, and Vladlen Koltun. Exploring self-attention for image recognition. In CVPR, 2020. Published as a conference paper at ICLR 2021 Models Dataset Epochs Base LR LR decay Weight decay Dropout Vi T-B/{16,32} JFT-300M 8 104 linear 0.1 0.0 Vi T-L/32 JFT-300M 6 104 linear 0.1 0.0 Vi T-L/16 JFT-300M 7/14 4 104 linear 0.1 0.0 Vi T-H/14 JFT-300M 3 104 linear 0.1 0.0 R50x{1,2} JFT-300M 103 linear 0.1 0.0 R101x1 JFT-300M 8 104 linear 0.1 0.0 R152x{1,2} JFT-300M 6 104 linear 0.1 0.0 R50+Vi T-B/{16,32} JFT-300M 8 104 linear 0.1 0.0 R50+Vi T-L/32 JFT-300M 2 104 linear 0.1 0.0 R50+Vi T-L/16 JFT-300M 7/14 4 104 linear 0.1 0.0 Vi T-B/{16,32} Image Net-21k 103 linear 0.03 0.1 Vi",
        "start_pos": 41716,
        "end_pos": 42499,
        "size": 783
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_74",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "inear\n0.1\n0.0\nR50+Vi T-B/{16,32}\nJFT-300M\n8  104\nlinear\n0.1\n0.0\nR50+Vi T-L/32\nJFT-300M\n2  104\nlinear\n0.1\n0.0\nR50+Vi T-L/16\nJFT-300M\n7/14\n4  104\nlinear\n0.1\n0.0\nVi T-B/{16,32}\nImage Net-21k\n103\nlinear\n0.03\n0.1\nVi T-L/{16,32}\nImage Net-21k\n30/90\nlinear\n0.03\n0.1\nVi T-\nImage Net\n3  103\ncosine\n0.3\n0.1\nTable 3: Hyperparameters for training. All models are trained with a batch size of 4096 and learn-\ning rate warmup of 10k steps. For Image Net we found it benecial to additionally apply gradient\nclipping at global norm 1. Training resolution is 224.\nMULTIHEAD SELF-ATTENTION\nStandard qkv self-attention (SA, Vaswani et al. (2017)) is a popular building block for neural archi-\ntectures. For each element in an input sequence z RND, we compute a weighted sum over all\nvalues v in the sequence.",
        "start_pos": 42299,
        "end_pos": 43089,
        "size": 789
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_75",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "attention (SA, Vaswani et al. (2017)) is a popular building block for neural archi-\ntectures. For each element in an input sequence z RND, we compute a weighted sum over all\nvalues v in the sequence. The attention weights Aij are based on the pairwise similarity between\ntwo elements of the sequence and their respective query qi and key kj representations.\n[q, k, v] = z Uqkv\nUqkv RD3Dh,\n(5)\nA = softmax\n\u0010\nqk/\np\nDh\n\u0011\nA RNN,\n(6)\nSA(z) = Av .\n(7)\nMultihead self-attention (MSA) is an extension of SA in which we run k self-attention operations,\ncalled heads, in parallel, and project their concatenated outputs. To keep compute and number of\nparameters constant when changing k, Dh (Eq. 5) is typically set to D/k.",
        "start_pos": 42889,
        "end_pos": 43603,
        "size": 713
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_76",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "k self-attention operations,\ncalled heads, in parallel, and project their concatenated outputs. To keep compute and number of\nparameters constant when changing k, Dh (Eq. 5) is typically set to D/k.\nMSA(z) = [SA1(z); SA2(z);    ; SAk(z)] Umsa\nUmsa Rk Dh D\n(8)\nB.1\nTRAINING\nTable 3 summarizes our training setups for our different models. We found strong regularization\nto be key when training models from scratch on Image Net. Dropout, when used, is applied after\nevery dense layer except for the the qkv-projections and directly after adding positional- to patch\nembeddings. Hybrid models are trained with the exact setup as their Vi T counterparts. Finally, all\ntraining is done on resolution 224.\nB.1.1\nFINE-TUNING\nWe ne-tune all Vi T models using SGD with a momentum of 0.9.",
        "start_pos": 43403,
        "end_pos": 44183,
        "size": 778
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_77",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "rid models are trained with the exact setup as their Vi T counterparts. Finally, all\ntraining is done on resolution 224.\nB.1.1\nFINE-TUNING\nWe ne-tune all Vi T models using SGD with a momentum of 0.9. We run a small grid search over\nlearning rates, see learning rate ranges in Table 4. To do so, we use small sub-splits from the training\nset (10% for Pets and Flowers, 2% for CIFAR, 1% Image Net) as development set and train on the\nremaining data. For nal results we train on the entire training set and evaluate on the respective\ntest data. For ne-tuning Res Nets and hybrid models we use the exact same setup, with the only\nexception of Image Net where we add another value 0.06 to the learning rate sweep.",
        "start_pos": 43983,
        "end_pos": 44692,
        "size": 708
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_78",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ate on the respective\ntest data. For ne-tuning Res Nets and hybrid models we use the exact same setup, with the only\nexception of Image Net where we add another value 0.06 to the learning rate sweep. Additionally,\n\nPublished as a conference paper at ICLR 2021\nDataset\nSteps\nBase LR\nImage Net\n20 000\n{0.003, 0.01, 0.03, 0.06}\nCIFAR100\n10 000\n{0.001, 0.003, 0.01, 0.03}\nCIFAR10\n10 000\n{0.001, 0.003, 0.01, 0.03}\nOxford-IIIT Pets\n{0.001, 0.003, 0.01, 0.03}\nOxford Flowers-102\n{0.001, 0.003, 0.01, 0.03}\nVTAB (19 tasks)\n2 500\n0.01\nTable 4: Hyperparameters for ne-tuning. All models are ne-tuned with cosine learning rate decay,\na batch size of 512, no weight decay, and grad clipping at global norm 1. If not mentioned otherwise,\nne-tuning resolution is 384.",
        "start_pos": 44492,
        "end_pos": 45247,
        "size": 754
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_79",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ne-tuning. All models are ne-tuned with cosine learning rate decay,\na batch size of 512, no weight decay, and grad clipping at global norm 1. If not mentioned otherwise,\nne-tuning resolution is 384.\nfor Res Nets we also run the setup of Kolesnikov et al. (2020) and select the best results across\nthis run and our sweep. Finally, if not mentioned otherwise, all ne-tuning experiments run at 384\nresolution (running ne-tuning at different resolution than training is common practice (Kolesnikov\net al., 2020)).\nWhen transferring Vi T models to another dataset, we remove the whole head (two linear layers) and\nreplace it by a single, zero-initialized linear layer outputting the number of classes required by the\ntarget dataset.",
        "start_pos": 45047,
        "end_pos": 45776,
        "size": 727
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_80",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Vi T models to another dataset, we remove the whole head (two linear layers) and\nreplace it by a single, zero-initialized linear layer outputting the number of classes required by the\ntarget dataset. We found this to be a little more robust than simply re-initializing the very last layer.\nFor VTAB we follow the protocol in Kolesnikov et al. (2020), and use the same hyperparameter\nsetting for all tasks. We use a learning rate of 0.01 and train for 2500 steps (Tab. 4). We chose this\nsetting by running a small sweep over two learning rates and two schedules, and selecting the setting\nwith the highest VTAB score on the 200-example validation sets. We follow the pre-processing used\nin Kolesnikov et al. (2020), except that we do not use task-specic input resolutions.",
        "start_pos": 45576,
        "end_pos": 46348,
        "size": 771
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_81",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ing the setting with the highest VTAB score on the 200-example validation sets. We follow the pre-processing used in Kolesnikov et al. (2020), except that we do not use task-specic input resolutions. Instead we nd that Vision Transformer benets most from a high resolution (384 384) for all tasks. B.1.2 SELF-SUPERVISION We employ the masked patch prediction objective for preliminary self-supervision experiments. To do so we corrupt 50% of patch embeddings by either replacing their embeddings with a learnable [mask] embedding (80%), a random other patch embedding (10%) or just keeping them as is (10%). This setup is very similar to the one used for language by Devlin et al. (2019). Finally, we predict the 3-bit, mean color (i.e., 512 colors in total) of every corrupted patch using their",
        "start_pos": 46148,
        "end_pos": 46943,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_82",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "as is\n(10%). This setup is very similar to the one used for language by Devlin et al. (2019). Finally, we\npredict the 3-bit, mean color (i.e., 512 colors in total) of every corrupted patch using their respective\npatch representations.\nWe trained our self-supervised model for 1M steps (ca. 14 epochs) with batch size 4096 on JFT. We\nuse Adam, with a base learning rate of 2104, warmup of 10k steps and cosine learning rate decay.\nAs prediction targets for pretraining we tried the following settings: 1) predicting only the mean,\n3bit color (i.e., 1 prediction of 512 colors), 2) predicting a 4  4 downsized version of the 16  16\npatch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch\nusing L2 (i.e., 256 regressions on the 3 RGB channels).",
        "start_pos": 46743,
        "end_pos": 47535,
        "size": 790
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_83",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "a 4  4 downsized version of the 16  16\npatch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch\nusing L2 (i.e., 256 regressions on the 3 RGB channels). Surprisingly, we found that all worked quite\nwell, though L2 was slightly worse. We report nal results only for option 1) because it has shown\nbest few-shot performance. We also experimented with 15% corruption rate as used by Devlin et al.\n(2019) but results were also slightly worse on our few-shot metrics.\nLastly, we would like to remark that our instantiation of masked patch prediction doesnt require\nsuch an enormous amount of pretraining nor a large dataset such as JFT in order to lead to sim-\nilar performance gains on Image Net classication.",
        "start_pos": 47335,
        "end_pos": 48088,
        "size": 752
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_84",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "stantiation of masked patch prediction doesnt require such an enormous amount of pretraining nor a large dataset such as JFT in order to lead to sim- ilar performance gains on Image Net classication. That is, we observed diminishing returns on downstream performance after 100k pretraining steps, and see similar gains when pretraining on Image Net. We report detailed results corresponding to the gures presented in the paper. Table 5 corresponds to Figure 3 from the paper and shows transfer performance of different Vi T models pre-trained on datasets of increasing size: Image Net, Image Net-21k, and JFT-300M. Table 6 corresponds to Published as a conference paper at ICLR 2021 Vi T-B/16 Vi T-B/32 Vi T-L/16 Vi T-L/32 Vi T-H/14 Image Net CIFAR-10 98.13 97.77 97.86 97.94 - CIFAR-100 87.13",
        "start_pos": 47888,
        "end_pos": 48681,
        "size": 793
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_85",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "et-21k, and JFT-300M. Table 6 corresponds to Published as a conference paper at ICLR 2021 Vi T-B/16 Vi T-B/32 Vi T-L/16 Vi T-L/32 Vi T-H/14 Image Net CIFAR-10 98.13 97.77 97.86 97.94 - CIFAR-100 87.13 86.31 86.35 87.07 - Image Net 77.91 73.38 76.53 71.16 - Image Net Rea L 83.57 79.56 82.19 77.83 - Oxford Flowers-102 89.49 85.43 89.66 86.36 - Oxford-IIIT-Pets 93.81 92.04 93.64 91.35 - Image Net-21k CIFAR-10 98.95 98.79 99.16 99.13 99.27 CIFAR-100 91.67 91.97 93.44 93.04 93.82 Image Net 83.97 81.28 85.15 80.99 85.13 Image Net Rea L 88.35 86.63 88.40 85.65 88.70 Oxford Flowers-102 99.38 99.11 99.61 99.19 99.51 Oxford-IIIT-Pets 94.43 93.02 94.73 93.09 94.82 JFT-300M CIFAR-10 99.00 98.61 99.38 99.19 99.50 CIFAR-100 91.87 90.49 94.04 92.52 94.55 Image Net 84.15 80.73 87.12 84.37 88.04 Image",
        "start_pos": 48481,
        "end_pos": 49276,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_86",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "11\n99.61\n99.19\n99.51\nOxford-IIIT-Pets\n94.43\n93.02\n94.73\n93.09\n94.82\nJFT-300M\nCIFAR-10\n99.00\n98.61\n99.38\n99.19\n99.50\nCIFAR-100\n91.87\n90.49\n94.04\n92.52\n94.55\nImage Net\n84.15\n80.73\n87.12\n84.37\n88.04\nImage Net Rea L\n88.85\n86.27\n89.99\n88.28\n90.33\nOxford Flowers-102\n99.56\n99.27\n99.56\n99.45\n99.68\nOxford-IIIT-Pets\n95.80\n93.40\n97.11\n95.83\n97.56\nTable 5: Top1 accuracy (in %) of Vision Transformer on various datasets when pre-trained on Im-\nage Net, Image Net-21k or JFT300M. These values correspond to Figure 3 in the main text. Models\nare ne-tuned at 384 resolution. Note that the Image Net results are computed without additional\ntechniques (Polyak averaging and 512 resolution images) used to achieve results in Table 2.",
        "start_pos": 49076,
        "end_pos": 49794,
        "size": 717
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_87",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ext. Models are ne-tuned at 384 resolution. Note that the Image Net results are computed without additional techniques (Polyak averaging and 512 resolution images) used to achieve results in Table 2. Model Epochs Image Net Image Net Rea L CIFAR-10 CIFAR-100 Pets Flowers exa FLOPs Vi T-B/32 80.73 86.27 98.61 90.49 93.40 99.27 Vi T-B/16 84.15 88.85 99.00 91.87 95.80 99.56 Vi T-L/32 84.37 88.28 99.19 92.52 95.83 99.45 Vi T-L/16 86.30 89.43 99.38 93.46 96.81 99.66 Vi T-L/16 87.12 89.99 99.38 94.04 97.11 99.56 Vi T-H/14 88.08 90.36 99.50 94.71 97.11 99.71 Res Net50x1 77.54 84.56 97.67 86.07 91.11 94.26 Res Net50x2 82.12 87.94 98.29 89.20 93.43 97.02 Res Net101x1 80.67 87.07 98.48 89.17 94.08 95.95 Res Net152x1 81.88 87.96 98.82 90.22 94.17 96.94 Res Net152x2 84.97 89.69 99.06 92.05 95.37",
        "start_pos": 49594,
        "end_pos": 50387,
        "size": 793
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_88",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "91.11 94.26 Res Net50x2 82.12 87.94 98.29 89.20 93.43 97.02 Res Net101x1 80.67 87.07 98.48 89.17 94.08 95.95 Res Net152x1 81.88 87.96 98.82 90.22 94.17 96.94 Res Net152x2 84.97 89.69 99.06 92.05 95.37 98.62 Res Net152x2 85.56 89.89 99.24 91.92 95.75 98.75 Res Net200x3 87.22 90.15 99.34 93.53 96.32 99.04 R50x1+Vi T-B/32 84.90 89.15 99.01 92.24 95.75 99.46 R50x1+Vi T-B/16 85.58 89.65 99.14 92.63 96.65 99.40 R50x1+Vi T-L/32 85.68 89.04 99.24 92.93 96.97 99.43 R50x1+Vi T-L/16 86.60 89.72 99.18 93.64 97.03 99.40 R50x1+Vi T-L/16 87.12 89.76 99.31 93.89 97.36 99.11 Table 6: Detailed results of model scaling experiments. These correspond to Figure 5 in the main paper. Figure 5 from the paper and shows the transfer performance of Vi T, Res Net, and hybrid models of varying size, as well as the",
        "start_pos": 50187,
        "end_pos": 50982,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_89",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "odel scaling experiments. These correspond to Figure 5 in the main paper. Figure 5 from the paper and shows the transfer performance of Vi T, Res Net, and hybrid models of varying size, as well as the estimated computational cost of their pre-training. D.1 SGD VS. ADAM FOR RESNETS Res Nets are typically trained with SGD and our use of Adam as optimizer is quite unconventional. Here we show the experiments that motivated this choice. Namely, we compare the ne-tuning performance of two Res Nets 50x1 and 152x2 pre-trained on JFT with SGD and Adam. For SGD, we use the hyperparameters recommended by Kolesnikov et al. (2020). Results are presented Published as a conference paper at ICLR 2021 Res Net50 Res Net152x2 Dataset Adam SGD Adam SGD Image Net 77.54 78.24 84.97 84.37 CIFAR10 97.67",
        "start_pos": 50782,
        "end_pos": 51573,
        "size": 791
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_90",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "commended by Kolesnikov et al. (2020). Results are presented\n\nPublished as a conference paper at ICLR 2021\nRes Net50\nRes Net152x2\nDataset\nAdam\nSGD\nAdam\nSGD\nImage Net\n77.54\n78.24\n84.97\n84.37\nCIFAR10\n97.67\n97.46\n99.06\n99.07\nCIFAR100\n86.07\n85.17\n92.05\n91.06\nOxford-IIIT Pets\n91.11\n91.00\n95.37\n94.79\nOxford Flowers-102\n94.26\n92.06\n98.62\n99.32\nAverage\n89.33\n88.79\n94.01\n93.72\nTable 7: Fine-tuning Res Net models pre-trained with Adam and SGD.\n101\nRelative Compute\n0.2\n0.3\n0.4\n0.5\n0.6\nImage Net 5shot\nModels\nAll\nDepth\nPatch size\nWidth MLP\nWidth\n101\nRelative Compute\n0.4\n0.5\n0.6\n0.7\n0.8\nAverage 5shot\nModels\nAll\nDepth\nPatch size\nWidth MLP\nWidth\nFigure 8: Scaling different model dimensions of the Vision Transformer.\nin Table 7.",
        "start_pos": 51373,
        "end_pos": 52095,
        "size": 721
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_91",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "Width MLP\nWidth\n101\nRelative Compute\n0.4\n0.5\n0.6\n0.7\n0.8\nAverage 5shot\nModels\nAll\nDepth\nPatch size\nWidth MLP\nWidth\nFigure 8: Scaling different model dimensions of the Vision Transformer.\nin Table 7. Adam pre-training outperforms SGD pre-training on most datasets and on average.\nThis justies the choice of Adam as the optimizer used to pre-train Res Nets on JFT. Note that the\nabsolute numbers are lower than those reported by Kolesnikov et al. (2020), since we pre-train only\nfor 7 epochs, not 30.\nD.2\nWe ran ablations on scaling different dimensions of the Transformer architecture to nd out which\nare best suited for scaling to very large models. Figure 8 shows 5-shot performance on Image Net\nfor different congurations.",
        "start_pos": 51895,
        "end_pos": 52621,
        "size": 724
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_92",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "aling different dimensions of the Transformer architecture to nd out which\nare best suited for scaling to very large models. Figure 8 shows 5-shot performance on Image Net\nfor different congurations. All congurations are based on a Vi T model with 8 layers, D = 1024,\nDMLP = 2048 and a patch size of 32, the intersection of all lines. We can see that scaling the\ndepth results in the biggest improvements which are clearly visible up until 64 layers. However,\ndiminishing returns are already visible after 16 layers. Interestingly, scaling the width of the net-\nwork seems to result in the smallest changes. Decreasing the patch size and thus increasing the\neffective sequence length shows surprisingly robust improvements without introducing parameters.",
        "start_pos": 52421,
        "end_pos": 53176,
        "size": 754
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_93",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "e net- work seems to result in the smallest changes. Decreasing the patch size and thus increasing the effective sequence length shows surprisingly robust improvements without introducing parameters. These ndings suggest that compute might be a better predictor of performance than the number of parameters, and that scaling should emphasize depth over width if any. Overall, we nd that scaling all dimensions proportionally results in robust improvements. D.3 We ran ablations on different ways of encoding spatial information using positional embedding. We tried the following cases: Providing no positional information: Considering the inputs as a bag of patches. 1-dimensional positional embedding: Considering the inputs as a sequence of patches in the raster order (default across all other",
        "start_pos": 52976,
        "end_pos": 53772,
        "size": 796
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_94",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "no positional information: Considering the inputs as a bag of patches.\n 1-dimensional positional embedding: Considering the inputs as a sequence of patches in\nthe raster order (default across all other experiments in this paper).\n 2-dimensional positional embedding: Considering the inputs as a grid of patches in two\ndimensions. In this case, two sets of embeddings are learned, each for one of the axes,\nX-embedding, and Y -embedding, each with size D/2. Then, based on the coordinate on\n\nPublished as a conference paper at ICLR 2021\nPos. Emb.\nDefault/Stem\nEvery Layer\nEvery Layer-Shared\nNo Pos. Emb.\n0.61382\nN/A\nN/A\n1-D Pos. Emb.\n0.64206\n0.63964\n0.64292\n2-D Pos. Emb.\n0.64001\n0.64046\n0.64022\nRel. Pos. Emb.",
        "start_pos": 53572,
        "end_pos": 54283,
        "size": 709
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_95",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "erence paper at ICLR 2021\nPos. Emb.\nDefault/Stem\nEvery Layer\nEvery Layer-Shared\nNo Pos. Emb.\n0.61382\nN/A\nN/A\n1-D Pos. Emb.\n0.64206\n0.63964\n0.64292\n2-D Pos. Emb.\n0.64001\n0.64046\n0.64022\nRel. Pos. Emb.\n0.64032\nN/A\nN/A\nTable 8: Results of the ablation study on positional embeddings with Vi T-B/16 model evaluated on\nImage Net 5-shot linear.\n2\n4\n6\n8\n10 11 12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n7 epochs, LR=0.0002, WD=0.01\n2\n4\n6\n8\n10 11 12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n7 epochs, LR=0.0004, WD=0.1\n2\n4\n6\n8\n10 11 12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n14 epochs, LR=0.0004, WD=0.1\n1\nCosine similarity\nFigure 9: Position embeddings of models trained with different hyperparameters.",
        "start_pos": 54083,
        "end_pos": 54860,
        "size": 776
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_96",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n14 epochs, LR=0.0004, WD=0.1\n1\nCosine similarity\nFigure 9: Position embeddings of models trained with different hyperparameters.\nthe path in the input, we concatenate the X and Y embedding to get the nal positional\nembedding for that patch.\n Relative positional embeddings: Considering the relative distance between patches to en-\ncode the spatial information as instead of their absolute position. To do so, we use 1-\ndimensional Relative Attention, in which we dene the relative distance all possible pairs\nof patches. Thus, for every given pair (one as query, and the other as key/value in the at-\ntention mechanism), we have an offset pq pk, where each offset is associated with an\nembedding.",
        "start_pos": 54660,
        "end_pos": 55428,
        "size": 766
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_97",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "sible pairs of patches. Thus, for every given pair (one as query, and the other as key/value in the at- tention mechanism), we have an offset pq pk, where each offset is associated with an embedding. Then, we simply run extra attention, where we use the original query (the content of query), but use relative positional embeddings as keys. We then use the log- its from the relative attention as a bias term and add it to the logits of the main attention (content-based attention) before applying the softmax. In addition to different ways of encoding spatial information, we also tried different ways of in- corporating this information in our model. For the 1-dimensional and 2-dimensional positional embeddings, we tried three different cases: (1) add positional embeddings to the inputs right",
        "start_pos": 55228,
        "end_pos": 56025,
        "size": 797
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_98",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ways of in- corporating this information in our model. For the 1-dimensional and 2-dimensional positional embeddings, we tried three different cases: (1) add positional embeddings to the inputs right after the stem of them model and before feeding the inputs to the Transformer encoder (default across all other experiments in this paper); (2) learn and add positional embeddings to the inputs at the beginning of each layer; (3) add a learned positional embeddings to the inputs at the beginning of each layer (shared between layers). Table 8 summarizes the results from this ablation study on a Vi T-B/16 model. As we can see, while there is a large gap between the performances of the model with no positional embedding and mod- els with positional embedding, there is little to no difference",
        "start_pos": 55825,
        "end_pos": 56620,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_99",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "a Vi T-B/16 model. As we can see, while\nthere is a large gap between the performances of the model with no positional embedding and mod-\nels with positional embedding, there is little to no difference between different ways of encoding\npositional information. We speculate that since our Transformer encoder operates on patch-level\ninputs, as opposed to pixel-level, the differences in how to encode spatial information is less impor-\ntant. More precisely, in patch-level inputs, the spatial dimensions are much smaller than the original\npixel-level inputs, e.g., 14  14 as opposed to 224  224, and learning to represent the spatial re-\nlations in this resolution is equally easy for these different positional encoding strategies.",
        "start_pos": 56420,
        "end_pos": 57153,
        "size": 731
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_100",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ginal\npixel-level inputs, e.g., 14  14 as opposed to 224  224, and learning to represent the spatial re-\nlations in this resolution is equally easy for these different positional encoding strategies. Even so,\nthe specic pattern of position embedding similarity learned by the network depends on the training\nhyperparameters (Figure 9).\n\nPublished as a conference paper at ICLR 2021\n5\n15\nNetwork depth (layer)\n20\n60\n100\nMean attention distance (pixels)\nVi T-L/16\nHead 1\nHead 2\nHead 3\n...\n5\n15\nNetwork depth (layer)\n20\n60\n100\nR50x1 + Vi T-L/16\nHead 1\nHead 2\nHead 3\n...\nFigure 10: Size of attended area by head and network depth. Attention distance was computed for\n128 example images by averaging the distance between the query pixel and all other pixels, weighted\nby the attention weight.",
        "start_pos": 56953,
        "end_pos": 57741,
        "size": 787
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_101",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "tended area by head and network depth. Attention distance was computed for\n128 example images by averaging the distance between the query pixel and all other pixels, weighted\nby the attention weight. Each dot shows the mean attention distance across images for one of 16\nheads at one layer. Image width is 224 pixels.\nD.4\nWe are also interested in real-world speed of the architectures on our hardware, which is not always\nwell predicted by theoretical FLOPs due to details like lane widths and cache sizes. For this purpose,\nwe perform timing of inference speed for the main models of interest, on a TPUv3 accelerator; the\ndifference between inference and backprop speed is a constant model-independent factor.",
        "start_pos": 57541,
        "end_pos": 58253,
        "size": 711
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_102",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "this purpose,\nwe perform timing of inference speed for the main models of interest, on a TPUv3 accelerator; the\ndifference between inference and backprop speed is a constant model-independent factor.\nFigure 11 (left) shows how many images one core can handle per second, across various input sizes.\nEvery single point refers to the peak performance measured across a wide range of batch-sizes. As\ncan be seen, the theoretical bi-quadratic scaling of Vi T with image size only barely starts happening\nfor the largest models at the largest resolutions.\nAnother quantity of interest is the largest batch-size each model can t onto a core, larger being\nbetter for scaling to large datasets. Figure 11 (right) shows this quantity for the same set of models.",
        "start_pos": 58053,
        "end_pos": 58806,
        "size": 752
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_103",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "other quantity of interest is the largest batch-size each model can t onto a core, larger being better for scaling to large datasets. Figure 11 (right) shows this quantity for the same set of models. This shows that large Vi T models have a clear advantage in terms of memory-efciency over Res Net models. D.5 Axial Attention (Huang et al., 2020; Ho et al., 2019) is a simple, yet effective technique to run self- attention on large inputs that are organized as multidimensional tensors. The general idea of axial attention is to perform multiple attention operations, each along a single axis of the input tensor, instead of applying 1-dimensional attention to the attened version of the input. In axial attention, each attention mixes information along a particular axis, while keeping",
        "start_pos": 58606,
        "end_pos": 59393,
        "size": 787
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_104",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "e axis of the input tensor, instead of applying 1-dimensional attention to the attened version of the input. In axial attention, each attention mixes information along a particular axis, while keeping information along the other axes independent. Along this line, Wang et al. (2020b) proposed the Axial Res Net model in which all the convolutions with kernel size 3 3 in a Res Net50 are replaced by axial self-attention, i.e. a row and column attention, augmented by relative positional encoding. We have implemented Axial Res Net as a baseline model.3. Moreover, we have modied Vi T to process inputs in the 2-dimensional shape, instead of a 1- dimensional sequence of patches, and incorporate Axial Transformer blocks, in which instead of 3Our implementation is based on the open-sourced Py",
        "start_pos": 59193,
        "end_pos": 59985,
        "size": 792
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_105",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "ess inputs in the 2-dimensional shape, instead of a 1- dimensional sequence of patches, and incorporate Axial Transformer blocks, in which instead of 3Our implementation is based on the open-sourced Py Torch implementation in https://github.com/ csrhddlam/axial-deeplab. In our experiments, we reproduced the scores reported in (Wang et al., 2020b) in terms of accuracy, however, our implementation, similar to the open-source implementation, is very slow on TPUs. Therefore, we were not able to use it for extensive large-scale experiments. These may be unlocked by a carefully optimized implementation. Published as a conference paper at ICLR 2021 128 384 Input size [px] 103 Peak inference speed [img/sec/core] 128 384 Input size [px] 103 Largest per-core batch-size R50x1 R50x2 Vi T-B/32 Vi",
        "start_pos": 59785,
        "end_pos": 60579,
        "size": 794
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_106",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "mentation. Published as a conference paper at ICLR 2021 128 384 Input size [px] 103 Peak inference speed [img/sec/core] 128 384 Input size [px] 103 Largest per-core batch-size R50x1 R50x2 Vi T-B/32 Vi T-L/32 Vi T-B/16 Vi T-L/16 Vi T-H/14 R152x4 Figure 11: Left: Real wall-clock timings of various architectures across input sizes. Vi T models have speed comparable to similar Res Nets. Right: Largest per-core batch-size tting on device with various architectures across input sizes. Vi T models are clearly more memory-efcient. a self-attention followed by an MLP, we have a a row-self-attention plus an MLP followed by a column-self-attention plus an MLP. Total compute [exa FLOPs] 0.500 0.525 0.550 0.575 0.600 0.625 0.650 Image Net 5-shot linear top-1 accuracy Axial Vi T-B/16 Axial Vi T-B/32",
        "start_pos": 60379,
        "end_pos": 61175,
        "size": 796
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_107",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "n plus an MLP followed by a column-self-attention plus an MLP. Total compute [exa FLOPs] 0.500 0.525 0.550 0.575 0.600 0.625 0.650 Image Net 5-shot linear top-1 accuracy Axial Vi T-B/16 Axial Vi T-B/32 Vi T-B/16 Vi T-B/32 Res Net50 Axial Res Net50 103 Peak inference speed [img/sec/core] 0.500 0.525 0.550 0.575 0.600 0.625 0.650 Image Net 5-shot linear top-1 accuracy Axial Vi T-B/16 Axial Vi T-B/32 Vi T-B/16 Vi T-B/32 Res Net50 Axial Res Net50 Figure 12: Performance of Axial-Attention based models, in terms of top-1 accuracy on Image Net 5-shot linear, versus their speed in terms of number of FLOPs (left) and inference time (left). Figure 12, present the performance of Axial Res Net, Axial-Vi T-B/32 and Axial-Vi T-B/16 on Ima- ge Net 5shot linear, when pretrained on JFT dataset, verses",
        "start_pos": 60975,
        "end_pos": 61770,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_108",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "of FLOPs (left) and inference time (left).\nFigure 12, present the performance of Axial Res Net, Axial-Vi T-B/32 and Axial-Vi T-B/16 on Ima-\nge Net 5shot linear, when pretrained on JFT dataset, verses the pretraining compute, both in terms of\nnumber of FLOPs and inference time (example per seconds). As we can see, both Axial-Vi T-B/32\nand Axial-Vi T-B/16 do better than their Vi T-B counterpart in terms of performance, but it comes at\nthe cost of more compute. This is because in Axial-Vi T models, each Transformer block with global\nself-attention is replaced by two Axial Transformer blocks, one with row and one with column self-\nattention and although the sequence length that self-attention operates on is smaller in axial case,\nthere is a extra MLP per Axial-Vi T block.",
        "start_pos": 61570,
        "end_pos": 62350,
        "size": 778
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_109",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "nsformer blocks, one with row and one with column self- attention and although the sequence length that self-attention operates on is smaller in axial case, there is a extra MLP per Axial-Vi T block. For the Axial Res Net, although it looks reasonable in terms of accuracy/compute trade-off (Figure 12, left), the naive implementation is extremely slow on TPUs (Figure 12, right). D.6 To understand how Vi T uses self-attention to integrate information across the image, we analyzed the average distance spanned by attention weights at different layers (Figure 10). This attention distance is analogous to receptive eld size in CNNs. Average attention distance is highly variable Published as a conference paper at ICLR 2021 across heads in lower layers, with some heads attending to much of the",
        "start_pos": 62150,
        "end_pos": 62945,
        "size": 795
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_110",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "alogous to receptive eld size in CNNs. Average attention distance is highly variable\n\nPublished as a conference paper at ICLR 2021\nacross heads in lower layers, with some heads attending to much of the image, while others attend\nto small regions at or near the query location. As depth increases, attention distance increases for all\nheads. In the second half of the network, most heads attend widely across tokens.\nD.7\nTo compute maps of the attention from the output token to the input space (Figures 6 and 13), we\nused Attention Rollout (Abnar & Zuidema, 2020). Briey, we averaged attention weights of Vi T-\nL/16 across all heads and then recursively multiplied the weight matrices of all layers. This accounts\nfor the mixing of attention across tokens through all layers.",
        "start_pos": 62745,
        "end_pos": 63521,
        "size": 775
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_111",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": "veraged attention weights of Vi T- L/16 across all heads and then recursively multiplied the weight matrices of all layers. This accounts for the mixing of attention across tokens through all layers. D.8 Table 9 shows the scores attained on each of the VTAB-1k tasks. Table 9: Breakdown of VTAB-1k performance across tasks. Caltech101 CIFAR-100 DTD Flowers102 Pets Sun397 SVHN Camelyon Euro SAT Resisc45 Retinopathy Clevr-Count Clevr-Dist DMLab d Spr-Loc d Spr-Ori KITTI-Dist s NORB-Azim s NORB-Elev Mean Vi T-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6 Vi T-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3 Vi T-L/16 (I21k) 90.8 84.1 74.1 99.3 92.7 61.0 80.9 82.5 95.6",
        "start_pos": 63321,
        "end_pos": 64119,
        "size": 798
      },
      {
        "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_112",
        "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
        "text": ".3 84.5 33.2 51.2 77.6\nVi T-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3\nVi T-L/16 (I21k) 90.8 84.1 74.1 99.3 92.7 61.0 80.9 82.5 95.6 85.2 75.3 70.3 56.1 41.9 74.7 64.9 79.9 30.5 41.7 72.7\n\nPublished as a conference paper at ICLR 2021\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n102\n104\n106\n108\n110\n112\n114\n116\n118\n120\n122\n124\n126\n128\nFigure 13: Further example attention maps as in Figure 6 (random selection).",
        "start_pos": 63919,
        "end_pos": 64500,
        "size": 581
      }
    ],
    "attention-is-all-you-need-1hodz0wcqb": [
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_0",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "Attention Is All You Need Ashish Vaswani Google Brain avaswani@google.com Noam Shazeer Google Brain noam@google.com Niki Parmar Google Research nikip@google.com Jakob Uszkoreit Google Research usz@google.com Llion Jones Google Research llion@google.com Aidan N. Gomez University of Toronto aidan@cs.toronto.edu ukasz Kaiser Google Brain lukaszkaiser@google.com Illia Polosukhin illia.polosukhin@gmail.com Abstract The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and",
        "start_pos": 0,
        "end_pos": 786,
        "size": 786
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_1",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring signicantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English- to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.0 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the",
        "start_pos": 586,
        "end_pos": 1376,
        "size": 790
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_2",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "slation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\nIntroduction\nRecurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networks\nin particular, have been rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [29, 2, 5]. Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\nEqual contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.",
        "start_pos": 1176,
        "end_pos": 1958,
        "size": 781
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_3",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "age models and encoder-decoder\narchitectures [31, 21, 13].\nEqual contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the rst Transformer models and\nhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and\nefcient inference and visualizations.",
        "start_pos": 1758,
        "end_pos": 2517,
        "size": 758
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_4",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "tless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efcient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research. Work performed while at Google Brain. Work performed while at Google Research. 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA. Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states ht, as a function of",
        "start_pos": 2317,
        "end_pos": 3111,
        "size": 794
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_5",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ally factor computation along the symbol positions of the input and output\nsequences. Aligning the positions to steps in computation time, they generate a sequence of hidden\nstates ht, as a function of the previous hidden state ht1 and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignicant improvements in computational efciency through factorization tricks [18] and conditional\ncomputation [26], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.",
        "start_pos": 2911,
        "end_pos": 3640,
        "size": 728
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_6",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "rough factorization tricks [18] and conditional\ncomputation [26], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\nAttention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [2, 16]. In all but a few cases [22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.",
        "start_pos": 3440,
        "end_pos": 4181,
        "size": 740
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_7",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "etwork. In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for signicantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs. Background The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [20], Byte Net [15] and Conv S2S [8], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output",
        "start_pos": 3981,
        "end_pos": 4773,
        "size": 792
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_8",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for Conv S2S and logarithmically for Byte Net. This makes it more difcult to learn dependencies between distant positions [11]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2. Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation",
        "start_pos": 4573,
        "end_pos": 5371,
        "size": 798
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_9",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "Attention as described in section 3.2. Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4, 22, 23, 19]. End-to-end memory networks are based on a recurrent attention mechanism instead of sequence- aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [28]. To the best of our knowledge, however, the Transformer is the rst transduction model relying entirely on self-attention to compute",
        "start_pos": 5171,
        "end_pos": 5954,
        "size": 783
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_10",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "simple-language question answering and\nlanguage modeling tasks [28].\nTo the best of our knowledge, however, the Transformer is the rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\nModel Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 29].\nHere, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence\nof continuous representations z = (z1, ..., zn).",
        "start_pos": 5754,
        "end_pos": 6460,
        "size": 704
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_11",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "on models have an encoder-decoder structure [5, 2, 29].\nHere, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence\nof continuous representations z = (z1, ..., zn). Given z, the decoder then generates an output\nsequence (y1, ..., ym) of symbols one element at a time. At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1\nEncoder and Decoder Stacks\nEncoder:\nThe encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers.",
        "start_pos": 6260,
        "end_pos": 7046,
        "size": 785
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_12",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "der, shown in the left and right halves of Figure 1,\nrespectively.\n3.1\nEncoder and Decoder Stacks\nEncoder:\nThe encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The rst is a multi-head self-attention mechanism, and the second is a simple, position-\n\nFigure 1: The Transformer - model architecture.\nwise fully connected feed-forward network. We employ a residual connection [10] around each of\nthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is\nLayer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.",
        "start_pos": 6846,
        "end_pos": 7623,
        "size": 776
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_13",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension dmodel = 512. Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the",
        "start_pos": 7423,
        "end_pos": 8218,
        "size": 795
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_14",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ion\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.\n3.2\nAttention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n3.2.1\nScaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).",
        "start_pos": 8018,
        "end_pos": 8771,
        "size": 752
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_15",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "h value is computed by a compatibility function of the\nquery with the corresponding key.\n3.2.1\nScaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\n\nScaled Dot-Product Attention\nMulti-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several\nattention layers running in parallel.\nquery with all keys, divide each by dk, and apply a softmax function to obtain the weights on the\nvalues.\nIn practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices K and V .",
        "start_pos": 8571,
        "end_pos": 9366,
        "size": 794
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_16",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "on the values. In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V . We compute the matrix of outputs as: Attention(Q, K, V ) = softmax(QKT dk )V (1) The two most commonly used attention functions are additive attention [2], and dot-product (multi- plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of dk . Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efcient in practice, since it can be implemented using highly optimized matrix",
        "start_pos": 9166,
        "end_pos": 9954,
        "size": 788
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_17",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "le hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efcient in practice, since it can be implemented using highly optimized matrix multiplication code. While for small values of dk the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of dk [3]. We suspect that for large values of dk, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients 4. To counteract this effect, we scale the dot products by dk . 3.2.2 Multi-Head Attention Instead of performing a single attention function with dmodel-dimensional keys, values and queries, we found it benecial to linearly project the queries,",
        "start_pos": 9754,
        "end_pos": 10548,
        "size": 794
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_18",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ot products by\ndk .\n3.2.2\nMulti-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it benecial to linearly project the queries, keys and values h times with different, learned\nlinear projections to dk, dk and dv dimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. These are concatenated and once again projected, resulting in the nal values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.",
        "start_pos": 10348,
        "end_pos": 11107,
        "size": 758
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_19",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\n4To illustrate why the dot products get large, assume that the components of q and k are independent random\nvariables with mean 0 and variance 1. Then their dot product, q  k = Pdk\ni=1 qiki, has mean 0 and variance dk.\n\nMulti Head(Q, K, V ) = Concat(head1, ..., headh)W O\nwhere headi = Attention(QW Q\ni , KW K\ni , V W V\ni )\nWhere the projections are parameter matrices W Q\ni\nRdmodeldk, W K\ni\nRdmodeldk, W V\ni\nRdmodeldv\nand W O Rhdvdmodel.\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64.",
        "start_pos": 10907,
        "end_pos": 11662,
        "size": 754
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_20",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "eter matrices W Q\ni\nRdmodeldk, W K\ni\nRdmodeldk, W V\ni\nRdmodeldv\nand W O Rhdvdmodel.\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3\nApplications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence.",
        "start_pos": 11462,
        "end_pos": 12168,
        "size": 705
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_21",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.",
        "start_pos": 11968,
        "end_pos": 12732,
        "size": 763
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_22",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "in the previous layer of the\nencoder.\n Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation ow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to ) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3\nPosition-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a Re LU activation in between.",
        "start_pos": 12532,
        "end_pos": 13326,
        "size": 792
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_23",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a Re LU activation in between.\nFFN(x) = max(0, x W1 + b1)W2 + b2\n(2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.\n3.4\nEmbeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.",
        "start_pos": 13126,
        "end_pos": 13850,
        "size": 722
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_24",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "onality\ndff = 2048.\n3.4\nEmbeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [24]. In the embedding layers, we multiply those weights by dmodel.\n3.5\nPositional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.",
        "start_pos": 13650,
        "end_pos": 14446,
        "size": 795
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_25",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention. Layer Type Complexity per Layer Sequential Maximum Path Length Operations Self-Attention O(n2 d) O(1) O(1) Recurrent O(n d2) O(n) O(n) Convolutional O(k n d2) O(1) O(logk(n)) Self-Attention (restricted) O(r n d) O(1) O(n/r) bottoms",
        "start_pos": 14246,
        "end_pos": 15036,
        "size": 790
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_26",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "er\nSequential\nMaximum Path Length\nOperations\nSelf-Attention\nO(n2  d)\nO(1)\nO(1)\nRecurrent\nO(n  d2)\nO(n)\nO(n)\nConvolutional\nO(k  n  d2)\nO(1)\nO(logk(n))\nSelf-Attention (restricted)\nO(r  n  d)\nO(1)\nO(n/r)\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and xed [8].\nIn this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i) = sin(pos/100002i/dmodel)\nPE(pos,2i+1) = cos(pos/100002i/dmodel)\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2 to 10000  2.",
        "start_pos": 14836,
        "end_pos": 15597,
        "size": 760
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_27",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "model)\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2 to 10000  2. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any xed offset k, PEpos+k can be represented as a linear function of\nPEpos.\nWe also experimented with using learned positional embeddings [8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.",
        "start_pos": 15397,
        "end_pos": 16116,
        "size": 718
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_28",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training. Why Self-Attention In this section we compare various aspects of self-attention layers to the recurrent and convolu- tional layers commonly used for mapping one variable-length sequence of symbol representations (x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi Rd, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of",
        "start_pos": 15916,
        "end_pos": 16706,
        "size": 790
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_29",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "of self-attention we\nconsider three desiderata.\nOne is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\nThe third is the path length between long-range dependencies in the network. Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [11].",
        "start_pos": 16506,
        "end_pos": 17210,
        "size": 703
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_30",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ckward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [11]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types. As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence length n is smaller than the representation dimensionality d, which is most often the case with sentence representations used by state-of-the-art models in",
        "start_pos": 17010,
        "end_pos": 17806,
        "size": 796
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_31",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ster than recurrent layers when the sequence\nlength n is smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [25] representations. To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size r in\n\nthe input sequence centered around the respective output position. This would increase the maximum\npath length to O(n/r). We plan to investigate this approach further in future work.\nA single convolutional layer with kernel width k < n does not connect all pairs of input and output\npositions.",
        "start_pos": 17606,
        "end_pos": 18345,
        "size": 738
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_32",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "imum path length to O(n/r). We plan to investigate this approach further in future work. A single convolutional layer with kernel width k < n does not connect all pairs of input and output positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(logk(n)) in the case of dilated convolutions [15], increasing the length of the longest paths between any two positions in the network. Convolutional layers are generally more expensive than recurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexity considerably, to O(k n d + n d2). Even with k = n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we",
        "start_pos": 18145,
        "end_pos": 18938,
        "size": 793
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_33",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ably, to O(k  n  d + n  d2). Even with k = n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\nAs side benet, self-attention could yield more interpretable models. We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\nTraining\nThis section describes the training regime for our models.\n5.1\nTraining Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.",
        "start_pos": 18738,
        "end_pos": 19516,
        "size": 777
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_34",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ng\nThis section describes the training regime for our models.\n5.1\nTraining Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-\ntarget vocabulary of about 37000 tokens. For English-French, we used the signicantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [31]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n5.2\nHardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.",
        "start_pos": 19316,
        "end_pos": 20087,
        "size": 770
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_35",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "g batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens. 5.2 Hardware and Schedule We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days). 5.3 Optimizer We used the Adam optimizer [17] with 1 = 0.9, 2 = 0.98 and = 109. We varied the learning rate over the course of training, according to the formula: lrate = d0.5 model min(step_num0.5, step_num warmup_steps1.5) (3) This corresponds to",
        "start_pos": 19887,
        "end_pos": 20672,
        "size": 785
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_36",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "th 1 = 0.9, 2 = 0.98 and  = 109. We varied the learning\nrate over the course of training, according to the formula:\nlrate = d0.5\nmodel  min(step_num0.5, step_num  warmup_steps1.5)\n(3)\nThis corresponds to increasing the learning rate linearly for the rst warmup_steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup_steps = 4000.\n5.4\nRegularization\nWe employ three types of regularization during training:\nResidual Dropout\nWe apply dropout [27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.",
        "start_pos": 20472,
        "end_pos": 21261,
        "size": 787
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_37",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "put and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of Pdrop = 0.1. Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost. Model BLEU Training Cost (FLOPs) EN-DE EN-FR EN-DE EN-FR Byte Net [15] 23.75 Deep-Att + Pos Unk [32] 39.2 1.0 1020 GNMT + RL [31] 24.6 39.92 2.3 1019 1.4 1020 Conv S2S [8] 25.16 40.46 9.6 1018 1.5 1020 Mo E [26] 26.03 40.56 2.0 1019 1.2 1020 Deep-Att + Pos Unk Ensemble [32] 40.4 8.0 1020 GNMT + RL Ensemble [31] 26.30 41.16 1.8 1020 1.1 1021 Conv S2S Ensemble [8] 26.36 41.29 7.7 1019 1.2",
        "start_pos": 21061,
        "end_pos": 21842,
        "size": 781
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_38",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": ".6  1018\n1.5  1020\nMo E [26]\n26.03\n40.56\n2.0  1019\n1.2  1020\nDeep-Att + Pos Unk Ensemble [32]\n40.4\n8.0  1020\nGNMT + RL Ensemble [31]\n26.30\n41.16\n1.8  1020\n1.1  1021\nConv S2S Ensemble [8]\n26.36\n41.29\n7.7  1019\n1.2  1021\nTransformer (base model)\n27.3\n38.1\n3.3  1018\nTransformer (big)\n28.4\n41.0\n2.3  1019\nLabel Smoothing\nDuring training, we employed label smoothing of value ls = 0.1 [30]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\nResults\n6.1\nMachine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.",
        "start_pos": 21642,
        "end_pos": 22419,
        "size": 776
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_39",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "g transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The conguration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.",
        "start_pos": 22219,
        "end_pos": 23013,
        "size": 793
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_40",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "shed single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty  = 0.6 [31]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.",
        "start_pos": 22813,
        "end_pos": 23606,
        "size": 792
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_41",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "to input length + 50, but terminate early when possible [31].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision oating-point capacity of each GPU 5.\n6.2\nModel Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.",
        "start_pos": 23406,
        "end_pos": 24191,
        "size": 783
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_42",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n\nTable 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base\nmodel. All metrics are on the English-to-German translation development set, newstest2013.",
        "start_pos": 23991,
        "end_pos": 24768,
        "size": 776
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_43",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ly. Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities. N dmodel dff h dk dv Pdrop ls train PPL BLEU params steps (dev) (dev) base 512 8 64 0.1 0.1 100K 4.92 25.8 (A) 512 5.29 24.9 128 5.00 25.5 32 4.91 25.8 16 5.01 25.4 (B) 5.16 25.1 32 5.01 25.4 (C) 6.11 23.7 4 5.19 25.3 8 4.88 25.5 256 32 5.75 24.5 1024 128 4.66 26.0 1024 5.12 25.4 4096 4.75 26.2 (D) 0.0 5.77 24.6 0.2 4.95 25.5 0.0 4.67 25.3 0.2 5.47 25.7 (E) positional embedding instead of sinusoids 4.92 25.7 big 1024 16 0.3 300K 4.33 26.4 In Table 3 rows (B), we",
        "start_pos": 24568,
        "end_pos": 25362,
        "size": 794
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_44",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "1024\n5.12\n25.4\n4096\n4.75\n26.2\n(D)\n0.0\n5.77\n24.6\n0.2\n4.95\n25.5\n0.0\n4.67\n25.3\n0.2\n5.47\n25.7\n(E)\npositional embedding instead of sinusoids\n4.92\n25.7\nbig\n1024\n16\n0.3\n300K\n4.33\n26.4\nIn Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be benecial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-tting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [8], and observe nearly identical\nresults to the base model.",
        "start_pos": 25162,
        "end_pos": 25866,
        "size": 702
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_45",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ropout is very helpful in avoiding over-tting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [8], and observe nearly identical\nresults to the base model.\nConclusion\nIn this work, we presented the Transformer, the rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained signicantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.",
        "start_pos": 25666,
        "end_pos": 26445,
        "size": 778
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_46",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "h WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efciently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.",
        "start_pos": 26245,
        "end_pos": 26959,
        "size": 713
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_47",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": ", audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements\nWe are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n\nReferences\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. ar Xiv preprint\nar Xiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. Co RR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural\nmachine translation architectures. Co RR, abs/1703.03906, 2017.",
        "start_pos": 26759,
        "end_pos": 27534,
        "size": 774
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_48",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "nd translate. Co RR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural\nmachine translation architectures. Co RR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. ar Xiv preprint ar Xiv:1601.06733, 2016.\n[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. Co RR, abs/1406.1078, 2014.\n[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. ar Xiv\npreprint ar Xiv:1610.02357, 2016.\n[7] Junyoung Chung, aglar Glehre, Kyunghyun Cho, and Yoshua Bengio.",
        "start_pos": 27334,
        "end_pos": 28103,
        "size": 768
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_49",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "2014.\n[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. ar Xiv\npreprint ar Xiv:1610.02357, 2016.\n[7] Junyoung Chung, aglar Glehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluation\nof gated recurrent neural networks on sequence modeling. Co RR, abs/1412.3555, 2014.\n[8] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-\ntional sequence to sequence learning. ar Xiv preprint ar Xiv:1705.03122v2, 2017.\n[9] Alex Graves.\nGenerating sequences with recurrent neural networks.\nar Xiv preprint\nar Xiv:1308.0850, 2013.\n[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-\nage recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition, pages 770778, 2016.",
        "start_pos": 27903,
        "end_pos": 28703,
        "size": 799
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_50",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ng He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-\nage recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition, pages 770778, 2016.\n[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jrgen Schmidhuber. Gradient ow in\nrecurrent nets: the difculty of learning long-term dependencies, 2001.\n[12] Sepp Hochreiter and Jrgen Schmidhuber. Long short-term memory. Neural computation,\n9(8):17351780, 1997.\n[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring\nthe limits of language modeling. ar Xiv preprint ar Xiv:1602.02410, 2016.\n[14] ukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference\non Learning Representations (ICLR), 2016.",
        "start_pos": 28503,
        "end_pos": 29279,
        "size": 775
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_51",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "f language modeling. ar Xiv preprint ar Xiv:1602.02410, 2016.\n[14] ukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference\non Learning Representations (ICLR), 2016.\n[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. Neural machine translation in linear time. ar Xiv preprint ar Xiv:1610.10099v2,\n2017.\n[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.\nIn International Conference on Learning Representations, 2017.\n[17] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. ar Xiv preprint\nar Xiv:1703.10722, 2017.",
        "start_pos": 29079,
        "end_pos": 29853,
        "size": 773
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_52",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "gma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. ar Xiv preprint\nar Xiv:1703.10722, 2017.\n[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. ar Xiv preprint\nar Xiv:1703.03130, 2017.\n[20] Samy Bengio ukasz Kaiser. Can active memory replace attention? In Advances in Neural\nInformation Processing Systems, (NIPS), 2016.\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-\nbased neural machine translation. ar Xiv preprint ar Xiv:1508.04025, 2015.\n[22] Ankur Parikh, Oscar Tckstrm, Dipanjan Das, and Jakob Uszkoreit.",
        "start_pos": 29653,
        "end_pos": 30428,
        "size": 774
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_53",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ristopher D Manning. Effective approaches to attention-\nbased neural machine translation. ar Xiv preprint ar Xiv:1508.04025, 2015.\n[22] Ankur Parikh, Oscar Tckstrm, Dipanjan Das, and Jakob Uszkoreit. A decomposable attention\nmodel. In Empirical Methods in Natural Language Processing, 2016.\n[23] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive\nsummarization. ar Xiv preprint ar Xiv:1705.04304, 2017.\n[24] Or Press and Lior Wolf. Using the output embedding to improve language models. ar Xiv\npreprint ar Xiv:1608.05859, 2016.\n[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words\nwith subword units. ar Xiv preprint ar Xiv:1508.07909, 2015.",
        "start_pos": 30228,
        "end_pos": 30952,
        "size": 723
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_54",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": ". ar Xiv\npreprint ar Xiv:1608.05859, 2016.\n[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words\nwith subword units. ar Xiv preprint ar Xiv:1508.07909, 2015.\n[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ar Xiv preprint ar Xiv:1701.06538, 2017.\n[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. Dropout: a simple way to prevent neural networks from overtting. Journal of Machine\nLearning Research, 15(1):19291958, 2014.\n[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D.",
        "start_pos": 30752,
        "end_pos": 31548,
        "size": 795
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_55",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "ing. Journal of Machine\nLearning Research, 15(1):19291958, 2014.\n[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28, pages 24402448. Curran Associates,\nInc., 2015.\n[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neural\nnetworks. In Advances in Neural Information Processing Systems, pages 31043112, 2014.\n[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. Co RR, abs/1512.00567, 2015.",
        "start_pos": 31348,
        "end_pos": 32054,
        "size": 705
      },
      {
        "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_56",
        "document": "attention-is-all-you-need-1hodz0wcqb",
        "text": "s 31043112, 2014.\n[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. Co RR, abs/1512.00567, 2015.\n[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Googles neural machine\ntranslation system: Bridging the gap between human and machine translation. ar Xiv preprint\nar Xiv:1609.08144, 2016.\n[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with\nfast-forward connections for neural machine translation. Co RR, abs/1606.04199, 2016.",
        "start_pos": 31854,
        "end_pos": 32516,
        "size": 662
      }
    ],
    "N19-1423": [
      {
        "chunk_id": "N19-1423_chunk_0",
        "document": "N19-1423",
        "text": "Proceedings of NAACL-HLT 2019, pages 41714186\nMinneapolis, Minnesota, June 2 - June 7, 2019. c2019 Association for Computational Linguistics\nBERT: Pre-training of Deep Bidirectional Transformers for\nLanguage Understanding\nJacob Devlin\nMing-Wei Chang\nKenton Lee\nKristina Toutanova\nGoogle AI Language\n{jacobdevlin,mingweichang,kentonl,kristout}@google.com\nAbstract\nWe introduce a new language representa-\ntion model called BERT, which stands for\nBidirectional Encoder Representations from\nTransformers. Unlike recent language repre-\nsentation models (Peters et al., 2018a; Rad-\nford et al., 2018), BERT is designed to pre-\ntrain deep bidirectional representations from\nunlabeled text by jointly conditioning on both\nleft and right context in all layers.",
        "start_pos": 0,
        "end_pos": 752,
        "size": 751
      },
      {
        "chunk_id": "N19-1423_chunk_1",
        "document": "N19-1423",
        "text": "ers et al., 2018a; Rad- ford et al., 2018), BERT is designed to pre- train deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers. As a re- sult, the pre-trained BERT model can be ne- tuned with just one additional output layer to create state-of-the-art models for a wide range of tasks, such as question answering and language inference, without substantial task- specic architecture modications. BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art re- sults on eleven natural language processing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), Multi NLI accuracy to 86.7% (4.6% absolute improvement), SQu AD v1.1 question answer- ing Test F1 to 93.2 (1.5",
        "start_pos": 552,
        "end_pos": 1348,
        "size": 796
      },
      {
        "chunk_id": "N19-1423_chunk_2",
        "document": "N19-1423",
        "text": "ssing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), Multi NLI accuracy to 86.7% (4.6% absolute improvement), SQu AD v1.1 question answer- ing Test F1 to 93.2 (1.5 point absolute im- provement) and SQu AD v2.0 Test F1 to 83.1 (5.1 point absolute improvement). Introduction Language model pre-training has been shown to be effective for improving many natural language processing tasks (Dai and Le, 2015; Peters et al., 2018a; Radford et al., 2018; Howard and Ruder, 2018). These include sentence-level tasks such as natural language inference (Bowman et al., 2015; Williams et al., 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the re- lationships between sentences by analyzing them holistically, as well as token-level tasks such as",
        "start_pos": 1148,
        "end_pos": 1945,
        "size": 797
      },
      {
        "chunk_id": "N19-1423_chunk_3",
        "document": "N19-1423",
        "text": "015; Williams et al., 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the re- lationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce ne-grained output at the token level (Tjong Kim Sang and De Meulder, 2003; Rajpurkar et al., 2016). There are two existing strategies for apply- ing pre-trained language representations to down- stream tasks: feature-based and ne-tuning. The feature-based approach, such as ELMo (Peters et al., 2018a), uses task-specic architectures that include the pre-trained representations as addi- tional features. The ne-tuning approach, such as the Generative Pre-trained Transformer (Open AI GPT) (Radford et al.,",
        "start_pos": 1745,
        "end_pos": 2538,
        "size": 793
      },
      {
        "chunk_id": "N19-1423_chunk_4",
        "document": "N19-1423",
        "text": "s task-specic architectures that\ninclude the pre-trained representations as addi-\ntional features. The ne-tuning approach, such as\nthe Generative Pre-trained Transformer (Open AI\nGPT) (Radford et al., 2018), introduces minimal\ntask-specic parameters, and is trained on the\ndownstream tasks by simply ne-tuning all pre-\ntrained parameters. The two approaches share the\nsame objective function during pre-training, where\nthey use unidirectional language models to learn\ngeneral language representations.\nWe argue that current techniques restrict the\npower of the pre-trained representations, espe-\ncially for the ne-tuning approaches.\nThe ma-\njor limitation is that standard language models are\nunidirectional, and this limits the choice of archi-\ntectures that can be used during pre-training.",
        "start_pos": 2338,
        "end_pos": 3131,
        "size": 792
      },
      {
        "chunk_id": "N19-1423_chunk_5",
        "document": "N19-1423",
        "text": "e-\ncially for the ne-tuning approaches.\nThe ma-\njor limitation is that standard language models are\nunidirectional, and this limits the choice of archi-\ntectures that can be used during pre-training. For\nexample, in Open AI GPT, the authors use a left-to-\nright architecture, where every token can only at-\ntend to previous tokens in the self-attention layers\nof the Transformer (Vaswani et al., 2017). Such re-\nstrictions are sub-optimal for sentence-level tasks,\nand could be very harmful when applying ne-\ntuning based approaches to token-level tasks such\nas question answering, where it is crucial to incor-\nporate context from both directions.\nIn this paper, we improve the ne-tuning based\napproaches by proposing BERT: Bidirectional\nEncoder\nRepresentations\nfrom\nTransformers.",
        "start_pos": 2931,
        "end_pos": 3713,
        "size": 781
      },
      {
        "chunk_id": "N19-1423_chunk_6",
        "document": "N19-1423",
        "text": "where it is crucial to incor-\nporate context from both directions.\nIn this paper, we improve the ne-tuning based\napproaches by proposing BERT: Bidirectional\nEncoder\nRepresentations\nfrom\nTransformers.\nBERT alleviates the previously mentioned unidi-\nrectionality constraint by using a masked lan-\nguage model (MLM) pre-training objective, in-\nspired by the Cloze task (Taylor, 1953).\nThe\nmasked language model randomly masks some of\nthe tokens from the input, and the objective is to\npredict the original vocabulary id of the masked\n\nword based only on its context.\nUnlike left-to-\nright language model pre-training, the MLM ob-\njective enables the representation to fuse the left\nand the right context, which allows us to pre-\ntrain a deep bidirectional Transformer.",
        "start_pos": 3513,
        "end_pos": 4279,
        "size": 765
      },
      {
        "chunk_id": "N19-1423_chunk_7",
        "document": "N19-1423",
        "text": "like left-to-\nright language model pre-training, the MLM ob-\njective enables the representation to fuse the left\nand the right context, which allows us to pre-\ntrain a deep bidirectional Transformer. In addi-\ntion to the masked language model, we also use\na next sentence prediction task that jointly pre-\ntrains text-pair representations. The contributions\nof our paper are as follows:\n We demonstrate the importance of bidirectional\npre-training for language representations. Un-\nlike Radford et al. (2018), which uses unidirec-\ntional language models for pre-training, BERT\nuses masked language models to enable pre-\ntrained deep bidirectional representations. This\nis also in contrast to Peters et al.",
        "start_pos": 4079,
        "end_pos": 4785,
        "size": 705
      },
      {
        "chunk_id": "N19-1423_chunk_8",
        "document": "N19-1423",
        "text": "8), which uses unidirec-\ntional language models for pre-training, BERT\nuses masked language models to enable pre-\ntrained deep bidirectional representations. This\nis also in contrast to Peters et al. (2018a), which\nuses a shallow concatenation of independently\ntrained left-to-right and right-to-left LMs.\n We show that pre-trained representations reduce\nthe need for many heavily-engineered task-\nspecic architectures. BERT is the rst ne-\ntuning based representation model that achieves\nstate-of-the-art performance on a large suite\nof sentence-level and token-level tasks, outper-\nforming many task-specic architectures.\n BERT advances the state of the art for eleven\nNLP tasks.\nThe code and pre-trained mod-\nels are available at https://github.com/\ngoogle-research/bert.",
        "start_pos": 4585,
        "end_pos": 5359,
        "size": 773
      },
      {
        "chunk_id": "N19-1423_chunk_9",
        "document": "N19-1423",
        "text": "outper- forming many task-specic architectures. BERT advances the state of the art for eleven NLP tasks. The code and pre-trained mod- els are available at https://github.com/ google-research/bert. Related Work There is a long history of pre-training general lan- guage representations, and we briey review the most widely-used approaches in this section. 2.1 Unsupervised Feature-based Approaches Learning widely applicable representations of words has been an active area of research for decades, including non-neural (Brown et al., 1992; Ando and Zhang, 2005; Blitzer et al., 2006) and neural (Mikolov et al., 2013; Pennington et al., 2014) methods. Pre-trained word embeddings are an integral part of modern NLP systems, of- fering signicant improvements over embeddings learned from scratch",
        "start_pos": 5159,
        "end_pos": 5954,
        "size": 795
      },
      {
        "chunk_id": "N19-1423_chunk_10",
        "document": "N19-1423",
        "text": "al (Mikolov et al., 2013; Pennington et al., 2014) methods. Pre-trained word embeddings are an integral part of modern NLP systems, of- fering signicant improvements over embeddings learned from scratch (Turian et al., 2010). To pre- train word embedding vectors, left-to-right lan- guage modeling objectives have been used (Mnih and Hinton, 2009), as well as objectives to dis- criminate correct from incorrect words in left and right context (Mikolov et al., 2013). These approaches have been generalized to coarser granularities, such as sentence embed- dings (Kiros et al., 2015; Logeswaran and Lee, 2018) or paragraph embeddings (Le and Mikolov, 2014). To train sentence representations, prior work has used objectives to rank candidate next sentences (Jernite et al., 2017; Logeswaran and",
        "start_pos": 5754,
        "end_pos": 6548,
        "size": 794
      },
      {
        "chunk_id": "N19-1423_chunk_11",
        "document": "N19-1423",
        "text": "and Lee,\n2018) or paragraph embeddings (Le and Mikolov,\n2014).\nTo train sentence representations, prior\nwork has used objectives to rank candidate next\nsentences (Jernite et al., 2017; Logeswaran and\nLee, 2018), left-to-right generation of next sen-\ntence words given a representation of the previous\nsentence (Kiros et al., 2015), or denoising auto-\nencoder derived objectives (Hill et al., 2016).\nELMo and its predecessor (Peters et al., 2017,\n2018a) generalize traditional word embedding re-\nsearch along a different dimension. They extract\ncontext-sensitive features from a left-to-right and a\nright-to-left language model. The contextual rep-\nresentation of each token is the concatenation of\nthe left-to-right and right-to-left representations.",
        "start_pos": 6348,
        "end_pos": 7100,
        "size": 750
      },
      {
        "chunk_id": "N19-1423_chunk_12",
        "document": "N19-1423",
        "text": "-sensitive features from a left-to-right and a\nright-to-left language model. The contextual rep-\nresentation of each token is the concatenation of\nthe left-to-right and right-to-left representations.\nWhen integrating contextual word embeddings\nwith existing task-specic architectures, ELMo\nadvances the state of the art for several major NLP\nbenchmarks (Peters et al., 2018a) including ques-\ntion answering (Rajpurkar et al., 2016), sentiment\nanalysis (Socher et al., 2013), and named entity\nrecognition (Tjong Kim Sang and De Meulder,\n2003). Melamud et al. (2016) proposed learning\ncontextual representations through a task to pre-\ndict a single word from both left and right context\nusing LSTMs. Similar to ELMo, their model is\nfeature-based and not deeply bidirectional. Fedus\net al.",
        "start_pos": 6900,
        "end_pos": 7687,
        "size": 786
      },
      {
        "chunk_id": "N19-1423_chunk_13",
        "document": "N19-1423",
        "text": "extual representations through a task to pre-\ndict a single word from both left and right context\nusing LSTMs. Similar to ELMo, their model is\nfeature-based and not deeply bidirectional. Fedus\net al. (2018) shows that the cloze task can be used\nto improve the robustness of text generation mod-\nels.\n2.2\nUnsupervised Fine-tuning Approaches\nAs with the feature-based approaches, the rst\nworks in this direction only pre-trained word em-\nbedding parameters from unlabeled text\n(Col-\nlobert and Weston, 2008).\nMore recently, sentence or document encoders\nwhich produce contextual token representations\nhave been pre-trained from unlabeled text and\nne-tuned for a supervised downstream task (Dai\nand Le, 2015; Howard and Ruder, 2018; Radford\net al., 2018).",
        "start_pos": 7487,
        "end_pos": 8240,
        "size": 752
      },
      {
        "chunk_id": "N19-1423_chunk_14",
        "document": "N19-1423",
        "text": "hich produce contextual token representations\nhave been pre-trained from unlabeled text and\nne-tuned for a supervised downstream task (Dai\nand Le, 2015; Howard and Ruder, 2018; Radford\net al., 2018). The advantage of these approaches\nis that few parameters need to be learned from\nscratch.\nAt least partly due to this advantage,\nOpen AI GPT (Radford et al., 2018) achieved pre-\nviously state-of-the-art results on many sentence-\nlevel tasks from the GLUE benchmark (Wang\net al., 2018a).\nLeft-to-right language model-\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...\nTok M\nQuestion\nParagraph\nStart/End Span\nBERT\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...",
        "start_pos": 8040,
        "end_pos": 8808,
        "size": 767
      },
      {
        "chunk_id": "N19-1423_chunk_15",
        "document": "N19-1423",
        "text": "TN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...\nTok M\nQuestion\nParagraph\nStart/End Span\nBERT\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...\nTok M\nMasked Sentence A\nMasked Sentence B\nPre-training\nFine-Tuning\nNSP\nMask LM\nMask LM\nUnlabeled Sentence A and B Pair \nSQu AD\nQuestion Answer Pair\nNER\nMNLI\nFigure 1: Overall pre-training and ne-tuning procedures for BERT. Apart from output layers, the same architec-\ntures are used in both pre-training and ne-tuning. The same pre-trained model parameters are used to initialize\nmodels for different down-stream tasks. During ne-tuning, all parameters are ne-tuned. [CLS] is a special\nsymbol added in front of every input example, and [SEP] is a special separator token (e.g.",
        "start_pos": 8608,
        "end_pos": 9385,
        "size": 776
      },
      {
        "chunk_id": "N19-1423_chunk_16",
        "document": "N19-1423",
        "text": "ze models for different down-stream tasks. During ne-tuning, all parameters are ne-tuned. [CLS] is a special symbol added in front of every input example, and [SEP] is a special separator token (e.g. separating ques- tions/answers). ing and auto-encoder objectives have been used for pre-training such models (Howard and Ruder, 2018; Radford et al., 2018; Dai and Le, 2015). 2.3 Transfer Learning from Supervised Data There has also been work showing effective trans- fer from supervised tasks with large datasets, such as natural language inference (Conneau et al., 2017) and machine translation (Mc Cann et al., 2017). Computer vision research has also demon- strated the importance of transfer learning from large pre-trained models, where an effective recipe is to ne-tune models pre-trained",
        "start_pos": 9185,
        "end_pos": 9980,
        "size": 795
      },
      {
        "chunk_id": "N19-1423_chunk_17",
        "document": "N19-1423",
        "text": "n (Mc Cann et al.,\n2017). Computer vision research has also demon-\nstrated the importance of transfer learning from\nlarge pre-trained models, where an effective recipe\nis to ne-tune models pre-trained with Ima-\nge Net (Deng et al., 2009; Yosinski et al., 2014).\nBERT\nWe introduce BERT and its detailed implementa-\ntion in this section. There are two steps in our\nframework: pre-training and ne-tuning.\nDur-\ning pre-training, the model is trained on unlabeled\ndata over different pre-training tasks.\nFor ne-\ntuning, the BERT model is rst initialized with\nthe pre-trained parameters, and all of the param-\neters are ne-tuned using labeled data from the\ndownstream tasks. Each downstream task has sep-\narate ne-tuned models, even though they are ini-\ntialized with the same pre-trained parameters.",
        "start_pos": 9780,
        "end_pos": 10575,
        "size": 794
      },
      {
        "chunk_id": "N19-1423_chunk_18",
        "document": "N19-1423",
        "text": "e param- eters are ne-tuned using labeled data from the downstream tasks. Each downstream task has sep- arate ne-tuned models, even though they are ini- tialized with the same pre-trained parameters. The question-answering example in Figure 1 will serve as a running example for this section. A distinctive feature of BERT is its unied ar- chitecture across different tasks. There is mini- mal difference between the pre-trained architec- ture and the nal downstream architecture. Model Architecture BERTs model architec- ture is a multi-layer bidirectional Transformer en- coder based on the original implementation de- scribed in Vaswani et al. (2017) and released in the tensor2tensor library.1 Because the use of Transformers has become common and our im- plementation is almost identical to",
        "start_pos": 10375,
        "end_pos": 11170,
        "size": 795
      },
      {
        "chunk_id": "N19-1423_chunk_19",
        "document": "N19-1423",
        "text": "iginal implementation de-\nscribed in Vaswani et al. (2017) and released in\nthe tensor2tensor library.1 Because the use\nof Transformers has become common and our im-\nplementation is almost identical to the original,\nwe will omit an exhaustive background descrip-\ntion of the model architecture and refer readers to\nVaswani et al. (2017) as well as excellent guides\nsuch as The Annotated Transformer.2\nIn this work, we denote the number of layers\n(i.e., Transformer blocks) as L, the hidden size as\nH, and the number of self-attention heads as A.3\nWe primarily report results on two model sizes:\nBERTBASE (L=12, H=768, A=12, Total Param-\neters=110M) and BERTLARGE (L=24, H=1024,\nA=16, Total Parameters=340M).\nBERTBASE was chosen to have the same model\nsize as Open AI GPT for comparison purposes.",
        "start_pos": 10970,
        "end_pos": 11765,
        "size": 794
      },
      {
        "chunk_id": "N19-1423_chunk_20",
        "document": "N19-1423",
        "text": "ERTBASE (L=12, H=768, A=12, Total Param- eters=110M) and BERTLARGE (L=24, H=1024, A=16, Total Parameters=340M). BERTBASE was chosen to have the same model size as Open AI GPT for comparison purposes. Critically, however, the BERT Transformer uses bidirectional self-attention, while the GPT Trans- former uses constrained self-attention where every token can only attend to context to its left.4 1https://github.com/tensorow/tensor2tensor 2http://nlp.seas.harvard.edu/2018/04/03/attention.html 3In all cases we set the feed-forward/lter size to be 4H, i.e., 3072 for the H = 768 and 4096 for the H = 1024. 4We note that in the literature the bidirectional Trans- Input/Output Representations To make BERT handle a variety of down-stream tasks, our input representation is able to unambiguously",
        "start_pos": 11565,
        "end_pos": 12358,
        "size": 793
      },
      {
        "chunk_id": "N19-1423_chunk_21",
        "document": "N19-1423",
        "text": "he H = 1024.\n4We note that in the literature the bidirectional Trans-\n\nInput/Output Representations\nTo make BERT\nhandle a variety of down-stream tasks, our input\nrepresentation is able to unambiguously represent\nboth a single sentence and a pair of sentences\n(e.g., Question, Answer ) in one token sequence.\nThroughout this work, a sentence can be an arbi-\ntrary span of contiguous text, rather than an actual\nlinguistic sentence. A sequence refers to the in-\nput token sequence to BERT, which may be a sin-\ngle sentence or two sentences packed together.\nWe use Word Piece embeddings (Wu et al.,\n2016) with a 30,000 token vocabulary. The rst\ntoken of every sequence is always a special clas-\nsication token ([CLS]).",
        "start_pos": 12158,
        "end_pos": 12874,
        "size": 715
      },
      {
        "chunk_id": "N19-1423_chunk_22",
        "document": "N19-1423",
        "text": "ence or two sentences packed together.\nWe use Word Piece embeddings (Wu et al.,\n2016) with a 30,000 token vocabulary. The rst\ntoken of every sequence is always a special clas-\nsication token ([CLS]). The nal hidden state\ncorresponding to this token is used as the ag-\ngregate sequence representation for classication\ntasks. Sentence pairs are packed together into a\nsingle sequence. We differentiate the sentences in\ntwo ways. First, we separate them with a special\ntoken ([SEP]). Second, we add a learned embed-\nding to every token indicating whether it belongs\nto sentence A or sentence B. As shown in Figure 1,\nwe denote input embedding as E, the nal hidden\nvector of the special [CLS] token as C RH,\nand the nal hidden vector for the ith input token\nas Ti RH.",
        "start_pos": 12674,
        "end_pos": 13438,
        "size": 763
      },
      {
        "chunk_id": "N19-1423_chunk_23",
        "document": "N19-1423",
        "text": "o sentence A or sentence B. As shown in Figure 1,\nwe denote input embedding as E, the nal hidden\nvector of the special [CLS] token as C RH,\nand the nal hidden vector for the ith input token\nas Ti RH.\nFor a given token, its input representation is\nconstructed by summing the corresponding token,\nsegment, and position embeddings. A visualiza-\ntion of this construction can be seen in Figure 2.\n3.1\nPre-training BERT\nUnlike Peters et al. (2018a) and Radford et al.\n(2018), we do not use traditional left-to-right or\nright-to-left language models to pre-train BERT.\nInstead, we pre-train BERT using two unsuper-\nvised tasks, described in this section. This step\nis presented in the left part of Figure 1.",
        "start_pos": 13238,
        "end_pos": 13940,
        "size": 701
      },
      {
        "chunk_id": "N19-1423_chunk_24",
        "document": "N19-1423",
        "text": "to-right or right-to-left language models to pre-train BERT. Instead, we pre-train BERT using two unsuper- vised tasks, described in this section. This step is presented in the left part of Figure 1. Task #1: Masked LM Intuitively, it is reason- able to believe that a deep bidirectional model is strictly more powerful than either a left-to-right model or the shallow concatenation of a left-to- right and a right-to-left model. Unfortunately, standard conditional language models can only be trained left-to-right or right-to-left, since bidirec- tional conditioning would allow each word to in- directly see itself, and the model could trivially predict the target word in a multi-layered context. former is often referred to as a Transformer encoder while the left-context-only version is",
        "start_pos": 13740,
        "end_pos": 14532,
        "size": 792
      },
      {
        "chunk_id": "N19-1423_chunk_25",
        "document": "N19-1423",
        "text": "o in-\ndirectly see itself, and the model could trivially\npredict the target word in a multi-layered context.\nformer is often referred to as a Transformer encoder while\nthe left-context-only version is referred to as a Transformer\ndecoder since it can be used for text generation.\nIn order to train a deep bidirectional representa-\ntion, we simply mask some percentage of the input\ntokens at random, and then predict those masked\ntokens. We refer to this procedure as a masked\nLM (MLM), although it is often referred to as a\nCloze task in the literature (Taylor, 1953). In this\ncase, the nal hidden vectors corresponding to the\nmask tokens are fed into an output softmax over\nthe vocabulary, as in a standard LM.",
        "start_pos": 14332,
        "end_pos": 15044,
        "size": 711
      },
      {
        "chunk_id": "N19-1423_chunk_26",
        "document": "N19-1423",
        "text": "red to as a\nCloze task in the literature (Taylor, 1953). In this\ncase, the nal hidden vectors corresponding to the\nmask tokens are fed into an output softmax over\nthe vocabulary, as in a standard LM. In all of our\nexperiments, we mask 15% of all Word Piece to-\nkens in each sequence at random. In contrast to\ndenoising auto-encoders (Vincent et al., 2008), we\nonly predict the masked words rather than recon-\nstructing the entire input.\nAlthough this allows us to obtain a bidirec-\ntional pre-trained model, a downside is that we\nare creating a mismatch between pre-training and\nne-tuning, since the [MASK] token does not ap-\npear during ne-tuning. To mitigate this, we do\nnot always replace masked words with the ac-\ntual [MASK] token.",
        "start_pos": 14844,
        "end_pos": 15581,
        "size": 736
      },
      {
        "chunk_id": "N19-1423_chunk_27",
        "document": "N19-1423",
        "text": "ating a mismatch between pre-training and ne-tuning, since the [MASK] token does not ap- pear during ne-tuning. To mitigate this, we do not always replace masked words with the ac- tual [MASK] token. The training data generator chooses 15% of the token positions at random for prediction. If the i-th token is chosen, we replace the i-th token with (1) the [MASK] token 80% of the time (2) a random token 10% of the time (3) the unchanged i-th token 10% of the time. Then, Ti will be used to predict the original token with cross entropy loss. We compare variations of this procedure in Appendix C.2. Task #2: Next Sentence Prediction (NSP) Many important downstream tasks such as Ques- tion Answering (QA) and Natural Language Infer- ence (NLI) are based on understanding the rela- tionship",
        "start_pos": 15381,
        "end_pos": 16172,
        "size": 791
      },
      {
        "chunk_id": "N19-1423_chunk_28",
        "document": "N19-1423",
        "text": "ndix C.2.\nTask #2:\nNext Sentence Prediction (NSP)\nMany important downstream tasks such as Ques-\ntion Answering (QA) and Natural Language Infer-\nence (NLI) are based on understanding the rela-\ntionship between two sentences, which is not di-\nrectly captured by language modeling. In order\nto train a model that understands sentence rela-\ntionships, we pre-train for a binarized next sen-\ntence prediction task that can be trivially gener-\nated from any monolingual corpus. Specically,\nwhen choosing the sentences A and B for each pre-\ntraining example, 50% of the time B is the actual\nnext sentence that follows A (labeled as Is Next),\nand 50% of the time it is a random sentence from\nthe corpus (labeled as Not Next).",
        "start_pos": 15972,
        "end_pos": 16690,
        "size": 717
      },
      {
        "chunk_id": "N19-1423_chunk_29",
        "document": "N19-1423",
        "text": "B for each pre- training example, 50% of the time B is the actual next sentence that follows A (labeled as Is Next), and 50% of the time it is a random sentence from the corpus (labeled as Not Next). As we show in Figure 1, C is used for next sentence predic- tion (NSP).5 Despite its simplicity, we demon- strate in Section 5.1 that pre-training towards this task is very benecial to both QA and NLI. 6 5The nal model achieves 97%-98% accuracy on NSP. 6The vector C is not a meaningful sentence representation without ne-tuning, since it was trained with NSP. [CLS] he likes play ##ing [SEP] my dog is cute [SEP] Input E[CLS] Ehe Elikes Eplay E##ing E[SEP] Emy Edog Eis Ecute E[SEP] Token Embeddings Segment Embeddings E0 E6 E7 E8 E9 E10 E1 E2 E3 E4 E5 Position Embeddings Figure 2: BERT input",
        "start_pos": 16490,
        "end_pos": 17284,
        "size": 794
      },
      {
        "chunk_id": "N19-1423_chunk_30",
        "document": "N19-1423",
        "text": "my\ndog\nis\ncute\n[SEP]\nInput\nE[CLS]\nEhe\nElikes\nEplay\nE##ing\nE[SEP]\nEmy\nEdog\nEis\nEcute\nE[SEP]\nToken\nEmbeddings\nSegment\nEmbeddings\nE0\nE6\nE7\nE8\nE9\nE10\nE1\nE2\nE3\nE4\nE5\nPosition\nEmbeddings\nFigure 2: BERT input representation. The input embeddings are the sum of the token embeddings, the segmenta-\ntion embeddings and the position embeddings.\nThe NSP task is closely related to representation-\nlearning objectives used in Jernite et al. (2017) and\nLogeswaran and Lee (2018). However, in prior\nwork, only sentence embeddings are transferred to\ndown-stream tasks, where BERT transfers all pa-\nrameters to initialize end-task model parameters.\nPre-training data The pre-training procedure\nlargely follows the existing literature on language\nmodel pre-training.",
        "start_pos": 17084,
        "end_pos": 17834,
        "size": 749
      },
      {
        "chunk_id": "N19-1423_chunk_31",
        "document": "N19-1423",
        "text": "ks, where BERT transfers all pa- rameters to initialize end-task model parameters. Pre-training data The pre-training procedure largely follows the existing literature on language model pre-training. For the pre-training corpus we use the Books Corpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words). For Wikipedia we extract only the text passages and ignore lists, tables, and headers. It is criti- cal to use a document-level corpus rather than a shufed sentence-level corpus such as the Billion Word Benchmark (Chelba et al., 2013) in order to extract long contiguous sequences. 3.2 Fine-tuning BERT Fine-tuning is straightforward since the self- attention mechanism in the Transformer al- lows BERT to model many downstream tasks whether they involve single text or text",
        "start_pos": 17634,
        "end_pos": 18430,
        "size": 796
      },
      {
        "chunk_id": "N19-1423_chunk_32",
        "document": "N19-1423",
        "text": "uences.\n3.2\nFine-tuning BERT\nFine-tuning is straightforward since the self-\nattention mechanism in the Transformer al-\nlows BERT to model many downstream tasks\nwhether they involve single text or text pairsby\nswapping out the appropriate inputs and outputs.\nFor applications involving text pairs, a common\npattern is to independently encode text pairs be-\nfore applying bidirectional cross attention, such\nas Parikh et al. (2016); Seo et al. (2017). BERT\ninstead uses the self-attention mechanism to unify\nthese two stages, as encoding a concatenated text\npair with self-attention effectively includes bidi-\nrectional cross attention between two sentences.\nFor each task, we simply plug in the task-\nspecic inputs and outputs into BERT and ne-\ntune all the parameters end-to-end.",
        "start_pos": 18230,
        "end_pos": 19010,
        "size": 779
      },
      {
        "chunk_id": "N19-1423_chunk_33",
        "document": "N19-1423",
        "text": "effectively includes bidi-\nrectional cross attention between two sentences.\nFor each task, we simply plug in the task-\nspecic inputs and outputs into BERT and ne-\ntune all the parameters end-to-end.\nAt the in-\nput, sentence A and sentence B from pre-training\nare analogous to (1) sentence pairs in paraphras-\ning, (2) hypothesis-premise pairs in entailment, (3)\nquestion-passage pairs in question answering, and\n(4) a degenerate text-pair in text classication\nor sequence tagging. At the output, the token rep-\nresentations are fed into an output layer for token-\nlevel tasks, such as sequence tagging or question\nanswering, and the [CLS] representation is fed\ninto an output layer for classication, such as en-\ntailment or sentiment analysis.",
        "start_pos": 18810,
        "end_pos": 19555,
        "size": 743
      },
      {
        "chunk_id": "N19-1423_chunk_34",
        "document": "N19-1423",
        "text": "ut layer for token- level tasks, such as sequence tagging or question answering, and the [CLS] representation is fed into an output layer for classication, such as en- tailment or sentiment analysis. Compared to pre-training, ne-tuning is rela- tively inexpensive. All of the results in the pa- per can be replicated in at most 1 hour on a sin- gle Cloud TPU, or a few hours on a GPU, starting from the exact same pre-trained model.7 We de- scribe the task-specic details in the correspond- ing subsections of Section 4. More details can be found in Appendix A.5. Experiments In this section, we present BERT ne-tuning re- sults on 11 NLP tasks. 4.1 GLUE The General Language Understanding Evaluation (GLUE) benchmark (Wang et al., 2018a) is a col- lection of diverse natural language understanding",
        "start_pos": 19355,
        "end_pos": 20153,
        "size": 798
      },
      {
        "chunk_id": "N19-1423_chunk_35",
        "document": "N19-1423",
        "text": "esent BERT ne-tuning re-\nsults on 11 NLP tasks.\n4.1\nGLUE\nThe General Language Understanding Evaluation\n(GLUE) benchmark (Wang et al., 2018a) is a col-\nlection of diverse natural language understanding\ntasks. Detailed descriptions of GLUE datasets are\nincluded in Appendix B.1.\nTo ne-tune on GLUE, we represent the input\nsequence (for single sentence or sentence pairs)\nas described in Section 3, and use the nal hid-\nden vector C RH corresponding to the rst\ninput token ([CLS]) as the aggregate representa-\ntion. The only new parameters introduced during\nne-tuning are classication layer weights W \nRKH, where K is the number of labels. We com-\npute a standard classication loss with C and W,\ni.e., log(softmax(CW T )).",
        "start_pos": 19953,
        "end_pos": 20673,
        "size": 719
      },
      {
        "chunk_id": "N19-1423_chunk_36",
        "document": "N19-1423",
        "text": "y new parameters introduced during ne-tuning are classication layer weights W RKH, where K is the number of labels. We com- pute a standard classication loss with C and W, i.e., log(softmax(CW T )). 7For example, the BERT SQu AD model can be trained in around 30 minutes on a single Cloud TPU to achieve a Dev F1 score of 91.0%. 8See (10) in https://gluebenchmark.com/faq. System MNLI-(m/mm) QQP QNLI SST-2 Co LA STS-B MRPC RTE Average 392k 363k 108k 67k 8.5k 5.7k 3.5k 2.5k - Pre-Open AI SOTA 80.6/80.1 66.1 82.3 93.2 35.0 81.0 86.0 61.7 74.0 Bi LSTM+ELMo+Attn 76.4/76.1 64.8 79.8 90.4 36.0 73.3 84.9 56.8 71.0 Open AI GPT 82.1/81.4 70.3 87.4 91.3 45.4 80.0 82.3 56.0 75.1 BERTBASE 84.6/83.4 71.2 90.5 93.5 52.1 85.8 88.9 66.4 79.6 BERTLARGE 86.7/85.9 72.1 92.7 94.9 60.5 86.5 89.3 70.1 82.1",
        "start_pos": 20473,
        "end_pos": 21265,
        "size": 792
      },
      {
        "chunk_id": "N19-1423_chunk_37",
        "document": "N19-1423",
        "text": "0\n73.3\n84.9\n56.8\n71.0\nOpen AI GPT\n82.1/81.4\n70.3\n87.4\n91.3\n45.4\n80.0\n82.3\n56.0\n75.1\nBERTBASE\n84.6/83.4\n71.2\n90.5\n93.5\n52.1\n85.8\n88.9\n66.4\n79.6\nBERTLARGE\n86.7/85.9\n72.1\n92.7\n94.9\n60.5\n86.5\n89.3\n70.1\n82.1\nTable 1: GLUE Test results, scored by the evaluation server (https://gluebenchmark.com/leaderboard).\nThe number below each task denotes the number of training examples. The Average column is slightly different\nthan the ofcial GLUE score, since we exclude the problematic WNLI set.8 BERT and Open AI GPT are single-\nmodel, single task. F1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.",
        "start_pos": 21065,
        "end_pos": 21805,
        "size": 739
      },
      {
        "chunk_id": "N19-1423_chunk_38",
        "document": "N19-1423",
        "text": "scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.\nWe use a batch size of 32 and ne-tune for 3\nepochs over the data for all GLUE tasks. For each\ntask, we selected the best ne-tuning learning rate\n(among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set.\nAdditionally, for BERTLARGE we found that ne-\ntuning was sometimes unstable on small datasets,\nso we ran several random restarts and selected the\nbest model on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ne-tuning data shufing and clas-\nsier layer initialization.9\nResults are presented in Table 1.",
        "start_pos": 21605,
        "end_pos": 22354,
        "size": 747
      },
      {
        "chunk_id": "N19-1423_chunk_39",
        "document": "N19-1423",
        "text": "del on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ne-tuning data shufing and clas-\nsier layer initialization.9\nResults are presented in Table 1.\nBoth\nBERTBASE and BERTLARGE outperform all sys-\ntems on all tasks by a substantial margin, obtaining\n4.5% and 7.0% respective average accuracy im-\nprovement over the prior state of the art. Note that\nBERTBASE and Open AI GPT are nearly identical\nin terms of model architecture apart from the at-\ntention masking. For the largest and most widely\nreported GLUE task, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofcial\nGLUE leaderboard10, BERTLARGE obtains a score\nof 80.5, compared to Open AI GPT, which obtains\n72.8 as of the date of writing.",
        "start_pos": 22154,
        "end_pos": 22916,
        "size": 761
      },
      {
        "chunk_id": "N19-1423_chunk_40",
        "document": "N19-1423",
        "text": "k, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofcial\nGLUE leaderboard10, BERTLARGE obtains a score\nof 80.5, compared to Open AI GPT, which obtains\n72.8 as of the date of writing.\nWe nd that BERTLARGE signicantly outper-\nforms BERTBASE across all tasks, especially those\nwith very little training data. The effect of model\nsize is explored more thoroughly in Section 5.2.\n4.2\nSQu AD v1.1\nThe\nStanford\nQuestion\nAnswering\nDataset\n(SQu AD v1.1) is a collection of 100k crowd-\nsourced question/answer pairs (Rajpurkar et al.,\n2016).\nGiven a question and a passage from\n9The GLUE data set distribution does not include the Test\nlabels, and we only made a single GLUE evaluation server\nsubmission for each of BERTBASE and BERTLARGE.",
        "start_pos": 22716,
        "end_pos": 23463,
        "size": 746
      },
      {
        "chunk_id": "N19-1423_chunk_41",
        "document": "N19-1423",
        "text": ". Given a question and a passage from 9The GLUE data set distribution does not include the Test labels, and we only made a single GLUE evaluation server submission for each of BERTBASE and BERTLARGE. 10https://gluebenchmark.com/leaderboard Wikipedia containing the answer, the task is to predict the answer text span in the passage. As shown in Figure 1, in the question answer- ing task, we represent the input question and pas- sage as a single packed sequence, with the ques- tion using the A embedding and the passage using the B embedding. We only introduce a start vec- tor S RH and an end vector E RH during ne-tuning. The probability of word i being the start of the answer span is computed as a dot prod- uct between Ti and S followed by a softmax over all of the words in the paragraph:",
        "start_pos": 23263,
        "end_pos": 24059,
        "size": 796
      },
      {
        "chunk_id": "N19-1423_chunk_42",
        "document": "N19-1423",
        "text": "vector E RH during\nne-tuning. The probability of word i being the\nstart of the answer span is computed as a dot prod-\nuct between Ti and S followed by a softmax over\nall of the words in the paragraph: Pi =\ne STi\nP\nj e STj .\nThe analogous formula is used for the end of the\nanswer span. The score of a candidate span from\nposition i to position j is dened as STi + ETj,\nand the maximum scoring span where j i is\nused as a prediction. The training objective is the\nsum of the log-likelihoods of the correct start and\nend positions. We ne-tune for 3 epochs with a\nlearning rate of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well\nas results from top published systems (Seo et al.,\n2017; Clark and Gardner, 2018; Peters et al.,\n2018a; Hu et al., 2018).",
        "start_pos": 23859,
        "end_pos": 24634,
        "size": 774
      },
      {
        "chunk_id": "N19-1423_chunk_43",
        "document": "N19-1423",
        "text": "of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well\nas results from top published systems (Seo et al.,\n2017; Clark and Gardner, 2018; Peters et al.,\n2018a; Hu et al., 2018). The top results from the\nSQu AD leaderboard do not have up-to-date public\nsystem descriptions available,11 and are allowed to\nuse any public data when training their systems.\nWe therefore use modest data augmentation in\nour system by rst ne-tuning on Trivia QA (Joshi\net al., 2017) befor ne-tuning on SQu AD.\nOur best performing system outperforms the top\nleaderboard system by +1.5 F1 in ensembling and\n+1.3 F1 as a single system. In fact, our single\nBERT model outperforms the top ensemble sys-\ntem in terms of F1 score. Without Trivia QA ne-\n11QANet is described in Yu et al.",
        "start_pos": 24434,
        "end_pos": 25213,
        "size": 778
      },
      {
        "chunk_id": "N19-1423_chunk_44",
        "document": "N19-1423",
        "text": "1.5 F1 in ensembling and\n+1.3 F1 as a single system. In fact, our single\nBERT model outperforms the top ensemble sys-\ntem in terms of F1 score. Without Trivia QA ne-\n11QANet is described in Yu et al. (2018), but the system\nhas improved substantially after publication.\n\nSystem\nDev\nTest\nEM\nF1\nEM\nF1\nTop Leaderboard Systems (Dec 10th, 2018)\nHuman\n-\n-\n82.3 91.2\n#1 Ensemble - nlnet\n-\n-\n86.0 91.7\n#2 Ensemble - QANet\n-\n-\n84.5 90.5\nPublished\nBi DAF+ELMo (Single)\n-\n85.6\n-\n85.8\nR. M. Reader (Ensemble)\n81.2 87.9 82.3 88.5\nOurs\nBERTBASE (Single)\n80.8 88.5\n-\n-\nBERTLARGE (Single)\n84.1 90.9\n-\n-\nBERTLARGE (Ensemble)\n85.8 91.8\n-\n-\nBERTLARGE (Sgl.+Trivia QA)\n84.2 91.1 85.1 91.8\nBERTLARGE (Ens.+Trivia QA) 86.2 92.2 87.4 93.2\nTable 2:\nSQu AD 1.1 results.",
        "start_pos": 25013,
        "end_pos": 25757,
        "size": 743
      },
      {
        "chunk_id": "N19-1423_chunk_45",
        "document": "N19-1423",
        "text": "88.5 - - BERTLARGE (Single) 84.1 90.9 - - BERTLARGE (Ensemble) 85.8 91.8 - - BERTLARGE (Sgl.+Trivia QA) 84.2 91.1 85.1 91.8 BERTLARGE (Ens.+Trivia QA) 86.2 92.2 87.4 93.2 Table 2: SQu AD 1.1 results. The BERT ensemble is 7x systems which use different pre-training check- points and ne-tuning seeds. System Dev Test EM F1 EM F1 Top Leaderboard Systems (Dec 10th, 2018) Human 86.3 89.0 86.9 89.5 #1 Single - MIR-MRC (F-Net) - - 74.8 78.0 #2 Single - nlnet - - 74.2 77.1 Published unet (Ensemble) - - 71.4 74.9 SLQA+ (Single) - 71.4 74.4 Ours BERTLARGE (Single) 78.7 81.9 80.0 83.1 Table 3: SQu AD 2.0 results. We exclude entries that use BERT as one of their components. tuning data, we only lose 0.1-0.4 F1, still outper- forming all existing systems by a wide margin.12 4.3 SQu AD v2.0 The SQu AD",
        "start_pos": 25557,
        "end_pos": 26354,
        "size": 797
      },
      {
        "chunk_id": "N19-1423_chunk_46",
        "document": "N19-1423",
        "text": ".0 results. We exclude entries that use BERT as one of their components. tuning data, we only lose 0.1-0.4 F1, still outper- forming all existing systems by a wide margin.12 4.3 SQu AD v2.0 The SQu AD 2.0 task extends the SQu AD 1.1 problem denition by allowing for the possibility that no short answer exists in the provided para- graph, making the problem more realistic. We use a simple approach to extend the SQu AD v1.1 BERT model for this task. We treat ques- tions that do not have an answer as having an an- swer span with start and end at the [CLS] to- ken. The probability space for the start and end answer span positions is extended to include the position of the [CLS] token. For prediction, we compare the score of the no-answer span: snull = SC + EC to the score of the best non-null",
        "start_pos": 26154,
        "end_pos": 26952,
        "size": 798
      },
      {
        "chunk_id": "N19-1423_chunk_47",
        "document": "N19-1423",
        "text": "tart and end answer span positions is extended to include the position of the [CLS] token. For prediction, we compare the score of the no-answer span: snull = SC + EC to the score of the best non-null span 12The Trivia QA data we used consists of paragraphs from Trivia QA-Wiki formed of the rst 400 tokens in documents, that contain at least one of the provided possible answers. System Dev Test ESIM+Glo Ve 51.9 52.7 ESIM+ELMo 59.1 59.2 Open AI GPT - 78.0 BERTBASE 81.6 - BERTLARGE 86.6 86.3 Human (expert) - 85.0 Human (5 annotations) - 88.0 Table 4: SWAG Dev and Test accuracies. Human per- formance is measured with 100 samples, as reported in the SWAG paper. si,j = maxji STi + ETj. We predict a non-null answer when si,j > snull + , where the thresh- old is selected on the dev set to",
        "start_pos": 26752,
        "end_pos": 27543,
        "size": 791
      },
      {
        "chunk_id": "N19-1423_chunk_48",
        "document": "N19-1423",
        "text": "er-\nformance is measured with 100 samples, as reported in\nthe SWAG paper.\n\nsi,j = maxji STi + ETj. We predict a non-null\nanswer when \nsi,j > snull + , where the thresh-\nold  is selected on the dev set to maximize F1.\nWe did not use Trivia QA data for this model. We\nne-tuned for 2 epochs with a learning rate of 5e-5\nand a batch size of 48.\nThe results compared to prior leaderboard en-\ntries and top published work (Sun et al., 2018;\nWang et al., 2018b) are shown in Table 3, exclud-\ning systems that use BERT as one of their com-\nponents. We observe a +5.1 F1 improvement over\nthe previous best system.\n4.4\nSWAG\nThe Situations With Adversarial Generations\n(SWAG) dataset contains 113k sentence-pair com-\npletion examples that evaluate grounded common-\nsense inference (Zellers et al., 2018).",
        "start_pos": 27343,
        "end_pos": 28137,
        "size": 793
      },
      {
        "chunk_id": "N19-1423_chunk_49",
        "document": "N19-1423",
        "text": "st system.\n4.4\nSWAG\nThe Situations With Adversarial Generations\n(SWAG) dataset contains 113k sentence-pair com-\npletion examples that evaluate grounded common-\nsense inference (Zellers et al., 2018). Given a sen-\ntence, the task is to choose the most plausible con-\ntinuation among four choices.\nWhen ne-tuning on the SWAG dataset, we\nconstruct four input sequences, each containing\nthe concatenation of the given sentence (sentence\nA) and a possible continuation (sentence B). The\nonly task-specic parameters introduced is a vec-\ntor whose dot product with the [CLS] token rep-\nresentation C denotes a score for each choice\nwhich is normalized with a softmax layer.\nWe ne-tune the model for 3 epochs with a\nlearning rate of 2e-5 and a batch size of 16. Re-\nsults are presented in Table 4.",
        "start_pos": 27937,
        "end_pos": 28727,
        "size": 789
      },
      {
        "chunk_id": "N19-1423_chunk_50",
        "document": "N19-1423",
        "text": "C denotes a score for each choice\nwhich is normalized with a softmax layer.\nWe ne-tune the model for 3 epochs with a\nlearning rate of 2e-5 and a batch size of 16. Re-\nsults are presented in Table 4. BERTLARGE out-\nperforms the authors baseline ESIM+ELMo sys-\ntem by +27.1% and Open AI GPT by 8.3%.\nAblation Studies\nIn this section, we perform ablation experiments\nover a number of facets of BERT in order to better\nunderstand their relative importance. Additional\n\nDev Set\nTasks\nMNLI-m QNLI MRPC SST-2 SQu AD\n(Acc)\n(Acc)\n(Acc)\n(Acc)\n(F1)\nBERTBASE\n84.4\n88.4\n86.7\n92.7\n88.5\nNo NSP\n83.9\n84.9\n86.5\n92.6\n87.9\nLTR & No NSP\n82.1\n84.3\n77.5\n92.1\n77.8\n+ Bi LSTM\n82.1\n84.1\n75.7\n91.6\n84.9\nTable 5: Ablation over the pre-training tasks using the\nBERTBASE architecture.",
        "start_pos": 28527,
        "end_pos": 29284,
        "size": 755
      },
      {
        "chunk_id": "N19-1423_chunk_51",
        "document": "N19-1423",
        "text": "86.7 92.7 88.5 No NSP 83.9 84.9 86.5 92.6 87.9 LTR & No NSP 82.1 84.3 77.5 92.1 77.8 + Bi LSTM 82.1 84.1 75.7 91.6 84.9 Table 5: Ablation over the pre-training tasks using the BERTBASE architecture. No NSP is trained without the next sentence prediction task. LTR & No NSP is trained as a left-to-right LM without the next sentence prediction, like Open AI GPT. + Bi LSTM adds a ran- domly initialized Bi LSTM on top of the LTR + No NSP model during ne-tuning. ablation studies can be found in Appendix C. 5.1 Effect of Pre-training Tasks We demonstrate the importance of the deep bidi- rectionality of BERT by evaluating two pre- training objectives using exactly the same pre- training data, ne-tuning scheme, and hyperpa- rameters as BERTBASE: No NSP: A bidirectional model which is trained",
        "start_pos": 29084,
        "end_pos": 29877,
        "size": 793
      },
      {
        "chunk_id": "N19-1423_chunk_52",
        "document": "N19-1423",
        "text": "onality of BERT by evaluating two pre-\ntraining objectives using exactly the same pre-\ntraining data, ne-tuning scheme, and hyperpa-\nrameters as BERTBASE:\nNo NSP: A bidirectional model which is trained\nusing the masked LM (MLM) but without the\nnext sentence prediction (NSP) task.\nLTR & No NSP: A left-context-only model which\nis trained using a standard Left-to-Right (LTR)\nLM, rather than an MLM. The left-only constraint\nwas also applied at ne-tuning, because removing\nit introduced a pre-train/ne-tune mismatch that\ndegraded downstream performance. Additionally,\nthis model was pre-trained without the NSP task.\nThis is directly comparable to Open AI GPT, but\nusing our larger training dataset, our input repre-\nsentation, and our ne-tuning scheme.",
        "start_pos": 29677,
        "end_pos": 30430,
        "size": 752
      },
      {
        "chunk_id": "N19-1423_chunk_53",
        "document": "N19-1423",
        "text": "Additionally,\nthis model was pre-trained without the NSP task.\nThis is directly comparable to Open AI GPT, but\nusing our larger training dataset, our input repre-\nsentation, and our ne-tuning scheme.\nWe rst examine the impact brought by the NSP\ntask.\nIn Table 5, we show that removing NSP\nhurts performance signicantly on QNLI, MNLI,\nand SQu AD 1.1. Next, we evaluate the impact\nof training bidirectional representations by com-\nparing No NSP to LTR & No NSP. The LTR\nmodel performs worse than the MLM model on all\ntasks, with large drops on MRPC and SQu AD.\nFor SQu AD it is intuitively clear that a LTR\nmodel will perform poorly at token predictions,\nsince the token-level hidden states have no right-\nside context.",
        "start_pos": 30230,
        "end_pos": 30948,
        "size": 717
      },
      {
        "chunk_id": "N19-1423_chunk_54",
        "document": "N19-1423",
        "text": "ks, with large drops on MRPC and SQu AD. For SQu AD it is intuitively clear that a LTR model will perform poorly at token predictions, since the token-level hidden states have no right- side context. In order to make a good faith at- tempt at strengthening the LTR system, we added a randomly initialized Bi LSTM on top. This does signicantly improve results on SQu AD, but the results are still far worse than those of the pre- trained bidirectional models. The Bi LSTM hurts performance on the GLUE tasks. We recognize that it would also be possible to train separate LTR and RTL models and represent each token as the concatenation of the two mod- els, as ELMo does. However: (a) this is twice as expensive as a single bidirectional model; (b) this is non-intuitive for tasks like QA, since the",
        "start_pos": 30748,
        "end_pos": 31545,
        "size": 797
      },
      {
        "chunk_id": "N19-1423_chunk_55",
        "document": "N19-1423",
        "text": "esent\neach token as the concatenation of the two mod-\nels, as ELMo does. However: (a) this is twice as\nexpensive as a single bidirectional model; (b) this\nis non-intuitive for tasks like QA, since the RTL\nmodel would not be able to condition the answer\non the question; (c) this it is strictly less powerful\nthan a deep bidirectional model, since it can use\nboth left and right context at every layer.\n5.2\nEffect of Model Size\nIn this section, we explore the effect of model size\non ne-tuning task accuracy. We trained a number\nof BERT models with a differing number of layers,\nhidden units, and attention heads, while otherwise\nusing the same hyperparameters and training pro-\ncedure as described previously.\nResults on selected GLUE tasks are shown in\nTable 6.",
        "start_pos": 31345,
        "end_pos": 32108,
        "size": 762
      },
      {
        "chunk_id": "N19-1423_chunk_56",
        "document": "N19-1423",
        "text": "ber of layers,\nhidden units, and attention heads, while otherwise\nusing the same hyperparameters and training pro-\ncedure as described previously.\nResults on selected GLUE tasks are shown in\nTable 6. In this table, we report the average Dev\nSet accuracy from 5 random restarts of ne-tuning.\nWe can see that larger models lead to a strict ac-\ncuracy improvement across all four datasets, even\nfor MRPC which only has 3,600 labeled train-\ning examples, and is substantially different from\nthe pre-training tasks. It is also perhaps surpris-\ning that we are able to achieve such signicant\nimprovements on top of models which are al-\nready quite large relative to the existing literature.\nFor example, the largest Transformer explored in\nVaswani et al.",
        "start_pos": 31908,
        "end_pos": 32657,
        "size": 748
      },
      {
        "chunk_id": "N19-1423_chunk_57",
        "document": "N19-1423",
        "text": "e are able to achieve such signicant\nimprovements on top of models which are al-\nready quite large relative to the existing literature.\nFor example, the largest Transformer explored in\nVaswani et al. (2017) is (L=6, H=1024, A=16)\nwith 100M parameters for the encoder, and the\nlargest Transformer we have found in the literature\nis (L=64, H=512, A=2) with 235M parameters\n(Al-Rfou et al., 2018). By contrast, BERTBASE\ncontains 110M parameters and BERTLARGE con-\ntains 340M parameters.\nIt has long been known that increasing the\nmodel size will lead to continual improvements\non large-scale tasks such as machine translation\nand language modeling, which is demonstrated\nby the LM perplexity of held-out training data\nshown in Table 6.",
        "start_pos": 32457,
        "end_pos": 33190,
        "size": 732
      },
      {
        "chunk_id": "N19-1423_chunk_58",
        "document": "N19-1423",
        "text": "size will lead to continual improvements\non large-scale tasks such as machine translation\nand language modeling, which is demonstrated\nby the LM perplexity of held-out training data\nshown in Table 6.\nHowever, we believe that\nthis is the rst work to demonstrate convinc-\ningly that scaling to extreme model sizes also\nleads to large improvements on very small scale\ntasks, provided that the model has been suf-\nciently pre-trained. Peters et al. (2018b) presented\n\nmixed results on the downstream task impact of\nincreasing the pre-trained bi-LM size from two\nto four layers and Melamud et al. (2016) men-\ntioned in passing that increasing hidden dimen-\nsion size from 200 to 600 helped, but increasing\nfurther to 1,000 did not bring further improve-\nments.",
        "start_pos": 32990,
        "end_pos": 33746,
        "size": 755
      },
      {
        "chunk_id": "N19-1423_chunk_59",
        "document": "N19-1423",
        "text": "o to four layers and Melamud et al. (2016) men- tioned in passing that increasing hidden dimen- sion size from 200 to 600 helped, but increasing further to 1,000 did not bring further improve- ments. Both of these prior works used a feature- based approach we hypothesize that when the model is ne-tuned directly on the downstream tasks and uses only a very small number of ran- domly initialized additional parameters, the task- specic models can benet from the larger, more expressive pre-trained representations even when downstream task data is very small. 5.3 Feature-based Approach with BERT All of the BERT results presented so far have used the ne-tuning approach, where a simple classi- cation layer is added to the pre-trained model, and all parameters are jointly ne-tuned on a down-",
        "start_pos": 33546,
        "end_pos": 34340,
        "size": 794
      },
      {
        "chunk_id": "N19-1423_chunk_60",
        "document": "N19-1423",
        "text": "BERT All of the BERT results presented so far have used the ne-tuning approach, where a simple classi- cation layer is added to the pre-trained model, and all parameters are jointly ne-tuned on a down- stream task. However, the feature-based approach, where xed features are extracted from the pre- trained model, has certain advantages. First, not all tasks can be easily represented by a Trans- former encoder architecture, and therefore require a task-specic model architecture to be added. Second, there are major computational benets to pre-compute an expensive representation of the training data once and then run many experiments with cheaper models on top of this representation. In this section, we compare the two approaches by applying BERT to the Co NLL-2003 Named Entity Recognition",
        "start_pos": 34140,
        "end_pos": 34936,
        "size": 796
      },
      {
        "chunk_id": "N19-1423_chunk_61",
        "document": "N19-1423",
        "text": "g data once and then run many experiments\nwith cheaper models on top of this representation.\nIn this section, we compare the two approaches\nby applying BERT to the Co NLL-2003 Named\nEntity Recognition (NER) task (Tjong Kim Sang\nand De Meulder, 2003). In the input to BERT, we\nuse a case-preserving Word Piece model, and we\ninclude the maximal document context provided\nby the data. Following standard practice, we for-\nmulate this as a tagging task but do not use a CRF\nHyperparams\nDev Set Accuracy\n#L\n#H #A LM (ppl) MNLI-m MRPC SST-2\n768\n5.84\n77.9\n79.8\n88.4\n768\n5.24\n80.6\n82.2\n90.7\n768\n4.68\n81.9\n84.8\n91.3\n768\n3.99\n84.4\n86.7\n92.9\n12 1024\n3.54\n85.7\n86.9\n93.3\n24 1024\n3.23\n86.6\n87.8\n93.7\nTable 6:\nAblation over BERT model size.",
        "start_pos": 34736,
        "end_pos": 35463,
        "size": 726
      },
      {
        "chunk_id": "N19-1423_chunk_62",
        "document": "N19-1423",
        "text": "C SST-2\n768\n5.84\n77.9\n79.8\n88.4\n768\n5.24\n80.6\n82.2\n90.7\n768\n4.68\n81.9\n84.8\n91.3\n768\n3.99\n84.4\n86.7\n92.9\n12 1024\n3.54\n85.7\n86.9\n93.3\n24 1024\n3.23\n86.6\n87.8\n93.7\nTable 6:\nAblation over BERT model size. #L = the\nnumber of layers; #H = hidden size; #A = number of at-\ntention heads. LM (ppl) is the masked LM perplexity\nof held-out training data.\nSystem\nDev F1 Test F1\nELMo (Peters et al., 2018a)\n95.7\n92.2\nCVT (Clark et al., 2018)\n-\n92.6\nCSE (Akbik et al., 2018)\n-\n93.1\nFine-tuning approach\nBERTLARGE\n96.6\n92.8\nBERTBASE\n96.4\n92.4\nFeature-based approach (BERTBASE)\nEmbeddings\n91.0\n-\nSecond-to-Last Hidden\n95.6\n-\nLast Hidden\n94.9\n-\nWeighted Sum Last Four Hidden\n95.9\n-\nConcat Last Four Hidden\n96.1\n-\nWeighted Sum All 12 Layers\n95.5\n-\nTable 7: Co NLL-2003 Named Entity Recognition re-\nsults.",
        "start_pos": 35263,
        "end_pos": 36049,
        "size": 785
      },
      {
        "chunk_id": "N19-1423_chunk_63",
        "document": "N19-1423",
        "text": "to-Last Hidden\n95.6\n-\nLast Hidden\n94.9\n-\nWeighted Sum Last Four Hidden\n95.9\n-\nConcat Last Four Hidden\n96.1\n-\nWeighted Sum All 12 Layers\n95.5\n-\nTable 7: Co NLL-2003 Named Entity Recognition re-\nsults. Hyperparameters were selected using the Dev\nset. The reported Dev and Test scores are averaged over\n5 random restarts using those hyperparameters.\nlayer in the output. We use the representation of\nthe rst sub-token as the input to the token-level\nclassier over the NER label set.\nTo ablate the ne-tuning approach, we apply the\nfeature-based approach by extracting the activa-\ntions from one or more layers without ne-tuning\nany parameters of BERT. These contextual em-\nbeddings are used as input to a randomly initial-\nized two-layer 768-dimensional Bi LSTM before\nthe classication layer.",
        "start_pos": 35849,
        "end_pos": 36638,
        "size": 788
      },
      {
        "chunk_id": "N19-1423_chunk_64",
        "document": "N19-1423",
        "text": "e or more layers without ne-tuning\nany parameters of BERT. These contextual em-\nbeddings are used as input to a randomly initial-\nized two-layer 768-dimensional Bi LSTM before\nthe classication layer.\nResults are presented in Table 7. BERTLARGE\nperforms competitively with state-of-the-art meth-\nods. The best performing method concatenates the\ntoken representations from the top four hidden lay-\ners of the pre-trained Transformer, which is only\n0.3 F1 behind ne-tuning the entire model. This\ndemonstrates that BERT is effective for both ne-\ntuning and feature-based approaches.\nConclusion\nRecent empirical improvements due to transfer\nlearning with language models have demonstrated\nthat rich, unsupervised pre-training is an integral\npart of many language understanding systems.",
        "start_pos": 36438,
        "end_pos": 37219,
        "size": 780
      },
      {
        "chunk_id": "N19-1423_chunk_65",
        "document": "N19-1423",
        "text": "nclusion\nRecent empirical improvements due to transfer\nlearning with language models have demonstrated\nthat rich, unsupervised pre-training is an integral\npart of many language understanding systems. In\nparticular, these results enable even low-resource\ntasks to benet from deep unidirectional architec-\ntures. Our major contribution is further general-\nizing these ndings to deep bidirectional architec-\ntures, allowing the same pre-trained model to suc-\ncessfully tackle a broad set of NLP tasks.\n\nReferences\nAlan Akbik, Duncan Blythe, and Roland Vollgraf.\n2018. Contextual string embeddings for sequence\nlabeling. In Proceedings of the 27th International\nConference on Computational Linguistics, pages\n16381649.\nRami Al-Rfou, Dokook Choe, Noah Constant, Mandy\nGuo, and Llion Jones. 2018.",
        "start_pos": 37019,
        "end_pos": 37810,
        "size": 790
      },
      {
        "chunk_id": "N19-1423_chunk_66",
        "document": "N19-1423",
        "text": "gs for sequence\nlabeling. In Proceedings of the 27th International\nConference on Computational Linguistics, pages\n16381649.\nRami Al-Rfou, Dokook Choe, Noah Constant, Mandy\nGuo, and Llion Jones. 2018.\nCharacter-level lan-\nguage modeling with deeper self-attention.\nar Xiv\npreprint ar Xiv:1808.04444.\nRie Kubota Ando and Tong Zhang. 2005. A framework\nfor learning predictive structures from multiple tasks\nand unlabeled data. Journal of Machine Learning\nResearch, 6(Nov):18171853.\nLuisa Bentivogli,\nBernardo Magnini,\nIdo Dagan,\nHoa Trang Dang, and Danilo Giampiccolo. 2009.\nThe fth PASCAL recognizing textual entailment\nchallenge. In TAC. NIST.\nJohn Blitzer, Ryan Mc Donald, and Fernando Pereira.\n2006. Domain adaptation with structural correspon-\ndence learning.",
        "start_pos": 37610,
        "end_pos": 38372,
        "size": 761
      },
      {
        "chunk_id": "N19-1423_chunk_67",
        "document": "N19-1423",
        "text": "lo. 2009.\nThe fth PASCAL recognizing textual entailment\nchallenge. In TAC. NIST.\nJohn Blitzer, Ryan Mc Donald, and Fernando Pereira.\n2006. Domain adaptation with structural correspon-\ndence learning. In Proceedings of the 2006 confer-\nence on empirical methods in natural language pro-\ncessing, pages 120128. Association for Computa-\ntional Linguistics.\nSamuel R. Bowman, Gabor Angeli, Christopher Potts,\nand Christopher D. Manning. 2015. A large anno-\ntated corpus for learning natural language inference.\nIn EMNLP. Association for Computational Linguis-\ntics.\nPeter F Brown, Peter V Desouza, Robert L Mercer,\nVincent J Della Pietra, and Jenifer C Lai. 1992.\nClass-based n-gram models of natural language.\nComputational linguistics, 18(4):467479.",
        "start_pos": 38172,
        "end_pos": 38920,
        "size": 747
      },
      {
        "chunk_id": "N19-1423_chunk_68",
        "document": "N19-1423",
        "text": "inguis-\ntics.\nPeter F Brown, Peter V Desouza, Robert L Mercer,\nVincent J Della Pietra, and Jenifer C Lai. 1992.\nClass-based n-gram models of natural language.\nComputational linguistics, 18(4):467479.\nDaniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-\nGazpio, and Lucia Specia. 2017.\nSemeval-2017\ntask 1: Semantic textual similarity multilingual and\ncrosslingual focused evaluation.\nIn Proceedings\nof the 11th International Workshop on Semantic\nEvaluation (Sem Eval-2017), pages 114, Vancou-\nver, Canada. Association for Computational Lin-\nguistics.\nCiprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge,\nThorsten Brants, Phillipp Koehn, and Tony Robin-\nson. 2013. One billion word benchmark for measur-\ning progress in statistical language modeling. ar Xiv\npreprint ar Xiv:1312.3005.\nZ. Chen, H.",
        "start_pos": 38720,
        "end_pos": 39513,
        "size": 792
      },
      {
        "chunk_id": "N19-1423_chunk_69",
        "document": "N19-1423",
        "text": "Qi Ge,\nThorsten Brants, Phillipp Koehn, and Tony Robin-\nson. 2013. One billion word benchmark for measur-\ning progress in statistical language modeling. ar Xiv\npreprint ar Xiv:1312.3005.\nZ. Chen, H. Zhang, X. Zhang, and L. Zhao. 2018.\nQuora question pairs.\nChristopher Clark and Matt Gardner. 2018.\nSimple\nand effective multi-paragraph reading comprehen-\nsion. In ACL.\nKevin Clark, Minh-Thang Luong, Christopher D Man-\nning, and Quoc Le. 2018.\nSemi-supervised se-\nquence modeling with cross-view training. In Pro-\nceedings of the 2018 Conference on Empirical Meth-\nods in Natural Language Processing, pages 1914\n1925.\nRonan Collobert and Jason Weston. 2008. A unied\narchitecture for natural language processing: Deep\nneural networks with multitask learning.",
        "start_pos": 39313,
        "end_pos": 40072,
        "size": 757
      },
      {
        "chunk_id": "N19-1423_chunk_70",
        "document": "N19-1423",
        "text": "Meth-\nods in Natural Language Processing, pages 1914\n1925.\nRonan Collobert and Jason Weston. 2008. A unied\narchitecture for natural language processing: Deep\nneural networks with multitask learning.\nIn Pro-\nceedings of the 25th international conference on\nMachine learning, pages 160167. ACM.\nAlexis Conneau, Douwe Kiela, Holger Schwenk, Loc\nBarrault, and Antoine Bordes. 2017.\nSupervised\nlearning of universal sentence representations from\nnatural language inference data. In Proceedings of\nthe 2017 Conference on Empirical Methods in Nat-\nural Language Processing, pages 670680, Copen-\nhagen, Denmark. Association for Computational\nLinguistics.\nAndrew M Dai and Quoc V Le. 2015. Semi-supervised\nsequence learning. In Advances in neural informa-\ntion processing systems, pages 30793087.\nJ.",
        "start_pos": 39872,
        "end_pos": 40664,
        "size": 790
      },
      {
        "chunk_id": "N19-1423_chunk_71",
        "document": "N19-1423",
        "text": "en, Denmark. Association for Computational\nLinguistics.\nAndrew M Dai and Quoc V Le. 2015. Semi-supervised\nsequence learning. In Advances in neural informa-\ntion processing systems, pages 30793087.\nJ. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-\nFei. 2009. Image Net: A Large-Scale Hierarchical\nImage Database. In CVPR09.\nWilliam B Dolan and Chris Brockett. 2005. Automati-\ncally constructing a corpus of sentential paraphrases.\nIn Proceedings of the Third International Workshop\non Paraphrasing (IWP2005).\nWilliam Fedus, Ian Goodfellow, and Andrew M Dai.\n2018. Maskgan: Better text generation via lling in\nthe . ar Xiv preprint ar Xiv:1801.07736.\nDan Hendrycks and Kevin Gimpel. 2016.\nBridging\nnonlinearities and stochastic regularizers with gaus-\nsian error linear units.",
        "start_pos": 40464,
        "end_pos": 41247,
        "size": 782
      },
      {
        "chunk_id": "N19-1423_chunk_72",
        "document": "N19-1423",
        "text": "ter text generation via lling in\nthe . ar Xiv preprint ar Xiv:1801.07736.\nDan Hendrycks and Kevin Gimpel. 2016.\nBridging\nnonlinearities and stochastic regularizers with gaus-\nsian error linear units. Co RR, abs/1606.08415.\nFelix Hill, Kyunghyun Cho, and Anna Korhonen. 2016.\nLearning distributed representations of sentences\nfrom unlabelled data. In Proceedings of the 2016\nConference of the North American Chapter of the\nAssociation for Computational Linguistics: Human\nLanguage Technologies. Association for Computa-\ntional Linguistics.\nJeremy Howard and Sebastian Ruder. 2018. Universal\nlanguage model ne-tuning for text classication. In\nACL. Association for Computational Linguistics.\nMinghao Hu, Yuxing Peng, Zhen Huang, Xipeng Qiu,\nFuru Wei, and Ming Zhou. 2018.",
        "start_pos": 41047,
        "end_pos": 41816,
        "size": 768
      },
      {
        "chunk_id": "N19-1423_chunk_73",
        "document": "N19-1423",
        "text": "der. 2018. Universal\nlanguage model ne-tuning for text classication. In\nACL. Association for Computational Linguistics.\nMinghao Hu, Yuxing Peng, Zhen Huang, Xipeng Qiu,\nFuru Wei, and Ming Zhou. 2018.\nReinforced\nmnemonic reader for machine reading comprehen-\nsion. In IJCAI.\nYacine Jernite, Samuel R. Bowman, and David Son-\ntag. 2017. Discourse-based objectives for fast un-\nsupervised sentence representation learning. Co RR,\nabs/1705.00557.\n\nMandar Joshi, Eunsol Choi, Daniel S Weld, and Luke\nZettlemoyer. 2017. Triviaqa: A large scale distantly\nsupervised challenge dataset for reading comprehen-\nsion. In ACL.\nRyan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,\nRichard Zemel, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Skip-thought vectors.",
        "start_pos": 41616,
        "end_pos": 42371,
        "size": 754
      },
      {
        "chunk_id": "N19-1423_chunk_74",
        "document": "N19-1423",
        "text": "ed challenge dataset for reading comprehen-\nsion. In ACL.\nRyan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,\nRichard Zemel, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Skip-thought vectors. In\nAdvances in neural information processing systems,\npages 32943302.\nQuoc Le and Tomas Mikolov. 2014. Distributed rep-\nresentations of sentences and documents. In Inter-\nnational Conference on Machine Learning, pages\n11881196.\nHector J Levesque, Ernest Davis, and Leora Morgen-\nstern. 2011. The winograd schema challenge. In\nAaai spring symposium: Logical formalizations of\ncommonsense reasoning, volume 46, page 47.\nLajanugen Logeswaran and Honglak Lee. 2018. An\nefcient framework for learning sentence represen-\ntations.\nIn International Conference on Learning\nRepresentations.",
        "start_pos": 42171,
        "end_pos": 42952,
        "size": 780
      },
      {
        "chunk_id": "N19-1423_chunk_75",
        "document": "N19-1423",
        "text": "sense reasoning, volume 46, page 47.\nLajanugen Logeswaran and Honglak Lee. 2018. An\nefcient framework for learning sentence represen-\ntations.\nIn International Conference on Learning\nRepresentations.\nBryan Mc Cann, James Bradbury, Caiming Xiong, and\nRichard Socher. 2017. Learned in translation: Con-\ntextualized word vectors. In NIPS.\nOren Melamud, Jacob Goldberger, and Ido Dagan.\n2016. context2vec: Learning generic context em-\nbedding with bidirectional LSTM. In Co NLL.\nTomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-\nrado, and Jeff Dean. 2013. Distributed representa-\ntions of words and phrases and their compositional-\nity. In Advances in Neural Information Processing\nSystems 26, pages 31113119. Curran Associates,\nInc.\nAndriy Mnih and Geoffrey E Hinton. 2009.",
        "start_pos": 42752,
        "end_pos": 43526,
        "size": 773
      },
      {
        "chunk_id": "N19-1423_chunk_76",
        "document": "N19-1423",
        "text": "nta-\ntions of words and phrases and their compositional-\nity. In Advances in Neural Information Processing\nSystems 26, pages 31113119. Curran Associates,\nInc.\nAndriy Mnih and Geoffrey E Hinton. 2009. A scal-\nable hierarchical distributed language model.\nIn\nD. Koller, D. Schuurmans, Y. Bengio, and L. Bot-\ntou, editors, Advances in Neural Information Pro-\ncessing Systems 21, pages 10811088. Curran As-\nsociates, Inc.\nAnkur P Parikh, Oscar Tackstrom, Dipanjan Das, and\nJakob Uszkoreit. 2016. A decomposable attention\nmodel for natural language inference. In EMNLP.\nJeffrey Pennington, Richard Socher, and Christo-\npher D. Manning. 2014. Glove: Global vectors for\nword representation. In Empirical Methods in Nat-\nural Language Processing (EMNLP), pages 1532\n1543.",
        "start_pos": 43326,
        "end_pos": 44090,
        "size": 763
      },
      {
        "chunk_id": "N19-1423_chunk_77",
        "document": "N19-1423",
        "text": "Jeffrey Pennington, Richard Socher, and Christo-\npher D. Manning. 2014. Glove: Global vectors for\nword representation. In Empirical Methods in Nat-\nural Language Processing (EMNLP), pages 1532\n1543.\nMatthew Peters, Waleed Ammar, Chandra Bhagavat-\nula, and Russell Power. 2017. Semi-supervised se-\nquence tagging with bidirectional language models.\nIn ACL.\nMatthew Peters, Mark Neumann, Mohit Iyyer, Matt\nGardner, Christopher Clark, Kenton Lee, and Luke\nZettlemoyer. 2018a. Deep contextualized word rep-\nresentations. In NAACL.\nMatthew Peters, Mark Neumann, Luke Zettlemoyer,\nand Wen-tau Yih. 2018b.\nDissecting contextual\nword embeddings: Architecture and representation.\nIn Proceedings of the 2018 Conference on Empiri-\ncal Methods in Natural Language Processing, pages\n14991509.",
        "start_pos": 43890,
        "end_pos": 44671,
        "size": 779
      },
      {
        "chunk_id": "N19-1423_chunk_78",
        "document": "N19-1423",
        "text": "en-tau Yih. 2018b.\nDissecting contextual\nword embeddings: Architecture and representation.\nIn Proceedings of the 2018 Conference on Empiri-\ncal Methods in Natural Language Processing, pages\n14991509.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and\nIlya Sutskever. 2018.\nImproving language under-\nstanding with unsupervised learning. Technical re-\nport, Open AI.\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and\nPercy Liang. 2016. Squad: 100,000+ questions for\nmachine comprehension of text. In Proceedings of\nthe 2016 Conference on Empirical Methods in Nat-\nural Language Processing, pages 23832392.\nMinjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and\nHannaneh Hajishirzi. 2017. Bidirectional attention\now for machine comprehension. In ICLR.",
        "start_pos": 44471,
        "end_pos": 45220,
        "size": 748
      },
      {
        "chunk_id": "N19-1423_chunk_79",
        "document": "N19-1423",
        "text": "l Methods in Nat-\nural Language Processing, pages 23832392.\nMinjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and\nHannaneh Hajishirzi. 2017. Bidirectional attention\now for machine comprehension. In ICLR.\nRichard Socher, Alex Perelygin, Jean Wu, Jason\nChuang, Christopher D Manning, Andrew Ng, and\nChristopher Potts. 2013.\nRecursive deep models\nfor semantic compositionality over a sentiment tree-\nbank.\nIn Proceedings of the 2013 conference on\nempirical methods in natural language processing,\npages 16311642.\nFu Sun, Linyang Li, Xipeng Qiu, and Yang Liu.\n2018.\nU-net:\nMachine reading comprehension\nwith unanswerable questions.\nar Xiv preprint\nar Xiv:1810.06638.\nWilson L Taylor. 1953.\nCloze procedure:\nA new\ntool for measuring readability. Journalism Bulletin,\n30(4):415433.",
        "start_pos": 45020,
        "end_pos": 45792,
        "size": 771
      },
      {
        "chunk_id": "N19-1423_chunk_80",
        "document": "N19-1423",
        "text": "reading comprehension\nwith unanswerable questions.\nar Xiv preprint\nar Xiv:1810.06638.\nWilson L Taylor. 1953.\nCloze procedure:\nA new\ntool for measuring readability. Journalism Bulletin,\n30(4):415433.\nErik F Tjong Kim Sang and Fien De Meulder.\n2003.\nIntroduction to the conll-2003 shared task:\nLanguage-independent named entity recognition. In\nCo NLL.\nJoseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.\nWord representations: A simple and general method\nfor semi-supervised learning. In Proceedings of the\n48th Annual Meeting of the Association for Compu-\ntational Linguistics, ACL 10, pages 384394.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob\nUszkoreit, Llion Jones, Aidan N Gomez, Lukasz\nKaiser, and Illia Polosukhin. 2017. Attention is all\nyou need.",
        "start_pos": 45592,
        "end_pos": 46350,
        "size": 756
      },
      {
        "chunk_id": "N19-1423_chunk_81",
        "document": "N19-1423",
        "text": "tional Linguistics, ACL 10, pages 384394.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob\nUszkoreit, Llion Jones, Aidan N Gomez, Lukasz\nKaiser, and Illia Polosukhin. 2017. Attention is all\nyou need. In Advances in Neural Information Pro-\ncessing Systems, pages 60006010.\nPascal Vincent, Hugo Larochelle, Yoshua Bengio, and\nPierre-Antoine Manzagol. 2008.\nExtracting and\ncomposing robust features with denoising autoen-\ncoders.\nIn Proceedings of the 25th international\nconference on Machine learning, pages 10961103.\nACM.\nAlex Wang, Amanpreet Singh, Julian Michael, Fe-\nlix Hill, Omer Levy, and Samuel Bowman. 2018a.\nGlue: A multi-task benchmark and analysis platform\n\nfor natural language understanding.",
        "start_pos": 46150,
        "end_pos": 46854,
        "size": 703
      },
      {
        "chunk_id": "N19-1423_chunk_82",
        "document": "N19-1423",
        "text": "s 10961103.\nACM.\nAlex Wang, Amanpreet Singh, Julian Michael, Fe-\nlix Hill, Omer Levy, and Samuel Bowman. 2018a.\nGlue: A multi-task benchmark and analysis platform\n\nfor natural language understanding. In Proceedings\nof the 2018 EMNLP Workshop Blackbox NLP: An-\nalyzing and Interpreting Neural Networks for NLP,\npages 353355.\nWei Wang, Ming Yan, and Chen Wu. 2018b. Multi-\ngranularity hierarchical attention fusion networks\nfor reading comprehension and question answering.\nIn Proceedings of the 56th Annual Meeting of the As-\nsociation for Computational Linguistics (Volume 1:\nLong Papers). Association for Computational Lin-\nguistics.\nAlex Warstadt, Amanpreet Singh, and Samuel R Bow-\nman. 2018.\nNeural network acceptability judg-\nments. ar Xiv preprint ar Xiv:1805.12471.",
        "start_pos": 46654,
        "end_pos": 47427,
        "size": 772
      },
      {
        "chunk_id": "N19-1423_chunk_83",
        "document": "N19-1423",
        "text": "1:\nLong Papers). Association for Computational Lin-\nguistics.\nAlex Warstadt, Amanpreet Singh, and Samuel R Bow-\nman. 2018.\nNeural network acceptability judg-\nments. ar Xiv preprint ar Xiv:1805.12471.\nAdina Williams, Nikita Nangia, and Samuel R Bow-\nman. 2018.\nA broad-coverage challenge corpus\nfor sentence understanding through inference.\nIn\nNAACL.\nYonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V\nLe,\nMohammad Norouzi,\nWolfgang Macherey,\nMaxim Krikun,\nYuan Cao,\nQin Gao,\nKlaus\nMacherey, et al. 2016.\nGoogles neural ma-\nchine translation system: Bridging the gap between\nhuman and machine translation.\nar Xiv preprint\nar Xiv:1609.08144.\nJason Yosinski, Jeff Clune, Yoshua Bengio, and Hod\nLipson. 2014. How transferable are features in deep\nneural networks?",
        "start_pos": 47227,
        "end_pos": 47984,
        "size": 756
      },
      {
        "chunk_id": "N19-1423_chunk_84",
        "document": "N19-1423",
        "text": "e gap between\nhuman and machine translation.\nar Xiv preprint\nar Xiv:1609.08144.\nJason Yosinski, Jeff Clune, Yoshua Bengio, and Hod\nLipson. 2014. How transferable are features in deep\nneural networks? In Advances in neural information\nprocessing systems, pages 33203328.\nAdams Wei Yu, David Dohan, Minh-Thang Luong, Rui\nZhao, Kai Chen, Mohammad Norouzi, and Quoc V\nLe. 2018.\nQANet: Combining local convolution\nwith global self-attention for reading comprehen-\nsion. In ICLR.\nRowan Zellers, Yonatan Bisk, Roy Schwartz, and Yejin\nChoi. 2018. Swag: A large-scale adversarial dataset\nfor grounded commonsense inference. In Proceed-\nings of the 2018 Conference on Empirical Methods\nin Natural Language Processing (EMNLP).",
        "start_pos": 47784,
        "end_pos": 48500,
        "size": 715
      },
      {
        "chunk_id": "N19-1423_chunk_85",
        "document": "N19-1423",
        "text": "and Yejin Choi. 2018. Swag: A large-scale adversarial dataset for grounded commonsense inference. In Proceed- ings of the 2018 Conference on Empirical Methods in Natural Language Processing (EMNLP). Yukun Zhu, Ryan Kiros, Rich Zemel, Ruslan Salakhut- dinov, Raquel Urtasun, Antonio Torralba, and Sanja Fidler. 2015. Aligning books and movies: Towards story-like visual explanations by watching movies and reading books. In Proceedings of the IEEE international conference on computer vision, pages 1927. Appendix for BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding We organize the appendix into three sections: Additional implementation details for BERT are presented in Appendix A; Additional details for our experiments are presented in Appendix B; and",
        "start_pos": 48300,
        "end_pos": 49087,
        "size": 787
      },
      {
        "chunk_id": "N19-1423_chunk_86",
        "document": "N19-1423",
        "text": "derstanding We organize the appendix into three sections: Additional implementation details for BERT are presented in Appendix A; Additional details for our experiments are presented in Appendix B; and Additional ablation studies are presented in Appendix C. We present additional ablation studies for BERT including: Effect of Number of Training Steps; and Ablation for Different Masking Proce- dures. A Additional Details for BERT A.1 Illustration of the Pre-training Tasks We provide examples of the pre-training tasks in the following. Masked LM and the Masking Procedure As- suming the unlabeled sentence is my dog is hairy, and during the random masking procedure we chose the 4-th token (which corresponding to hairy), our masking procedure can be further il- lustrated by 80% of the",
        "start_pos": 48887,
        "end_pos": 49677,
        "size": 790
      },
      {
        "chunk_id": "N19-1423_chunk_87",
        "document": "N19-1423",
        "text": "g the unlabeled sentence is my dog is hairy, and during the random masking procedure we chose the 4-th token (which corresponding to hairy), our masking procedure can be further il- lustrated by 80% of the time: Replace the word with the [MASK] token, e.g., my dog is hairy my dog is [MASK] 10% of the time: Replace the word with a random word, e.g., my dog is hairy my dog is apple 10% of the time: Keep the word un- changed, e.g., my dog is hairy my dog is hairy. The purpose of this is to bias the representation towards the actual observed word. The advantage of this procedure is that the Transformer encoder does not know which words it will be asked to predict or which have been re- placed by random words, so it is forced to keep a distributional contextual representation of ev- ery",
        "start_pos": 49477,
        "end_pos": 50269,
        "size": 792
      },
      {
        "chunk_id": "N19-1423_chunk_88",
        "document": "N19-1423",
        "text": "t the\nTransformer encoder does not know which words\nit will be asked to predict or which have been re-\nplaced by random words, so it is forced to keep\na distributional contextual representation of ev-\nery input token.\nAdditionally, because random\nreplacement only occurs for 1.5% of all tokens\n(i.e., 10% of 15%), this does not seem to harm\nthe models language understanding capability. In\nSection C.2, we evaluate the impact this proce-\ndure.\nCompared to standard langauge model training,\nthe masked LM only make predictions on 15% of\ntokens in each batch, which suggests that more\npre-training steps may be required for the model\n\nBERT (Ours)\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...",
        "start_pos": 50069,
        "end_pos": 50778,
        "size": 708
      },
      {
        "chunk_id": "N19-1423_chunk_89",
        "document": "N19-1423",
        "text": "make predictions on 15% of\ntokens in each batch, which suggests that more\npre-training steps may be required for the model\n\nBERT (Ours)\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...\nOpen AI GPT\nLstm\nELMo\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\n T1\nT2\n TN\n...\n...\n...\n...\n...\n E1\nE2\n EN\n...\n T1\nT2\nTN\n...\n E1\nE2\n EN\n...\n T1\nT2\n TN\n...\n E1\nE2\n EN\n...\nFigure 3: Differences in pre-training model architectures. BERT uses a bidirectional Transformer. Open AI GPT\nuses a left-to-right Transformer. ELMo uses the concatenation of independently trained left-to-right and right-to-\nleft LSTMs to generate features for downstream tasks. Among the three, only BERT representations are jointly\nconditioned on both left and right context in all layers.",
        "start_pos": 50578,
        "end_pos": 51352,
        "size": 773
      },
      {
        "chunk_id": "N19-1423_chunk_90",
        "document": "N19-1423",
        "text": "ined left-to-right and right-to- left LSTMs to generate features for downstream tasks. Among the three, only BERT representations are jointly conditioned on both left and right context in all layers. In addition to the architecture differences, BERT and Open AI GPT are ne-tuning approaches, while ELMo is a feature-based approach. to converge. In Section C.1 we demonstrate that MLM does converge marginally slower than a left- to-right model (which predicts every token), but the empirical improvements of the MLM model far outweigh the increased training cost. Next Sentence Prediction The next sentence prediction task can be illustrated in the following examples. Input = [CLS] the man went to [MASK] store [SEP] he bought a gallon [MASK] milk [SEP] Label = Is Next Input = [CLS] the man",
        "start_pos": 51152,
        "end_pos": 51944,
        "size": 792
      },
      {
        "chunk_id": "N19-1423_chunk_91",
        "document": "N19-1423",
        "text": "next sentence\nprediction task can be illustrated in the following\nexamples.\nInput = [CLS] the man went to [MASK] store [SEP]\nhe bought a gallon [MASK] milk [SEP]\nLabel = Is Next\nInput = [CLS] the man [MASK] to the store [SEP]\npenguin [MASK] are flight ##less birds [SEP]\nLabel = Not Next\nA.2\nPre-training Procedure\nTo generate each training input sequence, we sam-\nple two spans of text from the corpus, which we\nrefer to as sentences even though they are typ-\nically much longer than single sentences (but can\nbe shorter also). The rst sentence receives the A\nembedding and the second receives the B embed-\nding. 50% of the time B is the actual next sentence\nthat follows A and 50% of the time it is a random\nsentence, which is done for the next sentence pre-\ndiction task.",
        "start_pos": 51744,
        "end_pos": 52520,
        "size": 774
      },
      {
        "chunk_id": "N19-1423_chunk_92",
        "document": "N19-1423",
        "text": "the second receives the B embed-\nding. 50% of the time B is the actual next sentence\nthat follows A and 50% of the time it is a random\nsentence, which is done for the next sentence pre-\ndiction task. They are sampled such that the com-\nbined length is 512 tokens. The LM masking is\napplied after Word Piece tokenization with a uni-\nform masking rate of 15%, and no special consid-\neration given to partial word pieces.\nWe train with batch size of 256 sequences (256\nsequences * 512 tokens = 128,000 tokens/batch)\nfor 1,000,000 steps, which is approximately 40\nepochs over the 3.3 billion word corpus.\nWe\nuse Adam with learning rate of 1e-4, 1 = 0.9,\n2 = 0.999, L2 weight decay of 0.01, learning\nrate warmup over the rst 10,000 steps, and linear\ndecay of the learning rate.",
        "start_pos": 52320,
        "end_pos": 53093,
        "size": 772
      },
      {
        "chunk_id": "N19-1423_chunk_93",
        "document": "N19-1423",
        "text": "he 3.3 billion word corpus.\nWe\nuse Adam with learning rate of 1e-4, 1 = 0.9,\n2 = 0.999, L2 weight decay of 0.01, learning\nrate warmup over the rst 10,000 steps, and linear\ndecay of the learning rate. We use a dropout prob-\nability of 0.1 on all layers. We use a gelu acti-\nvation (Hendrycks and Gimpel, 2016) rather than\nthe standard relu, following Open AI GPT. The\ntraining loss is the sum of the mean masked LM\nlikelihood and the mean next sentence prediction\nlikelihood.\nTraining of BERTBASE was performed on 4\nCloud TPUs in Pod conguration (16 TPU chips\ntotal).13 Training of BERTLARGE was performed\non 16 Cloud TPUs (64 TPU chips total). Each pre-\ntraining took 4 days to complete.\nLonger sequences are disproportionately expen-\nsive because attention is quadratic to the sequence\nlength.",
        "start_pos": 52893,
        "end_pos": 53688,
        "size": 794
      },
      {
        "chunk_id": "N19-1423_chunk_94",
        "document": "N19-1423",
        "text": "performed on 16 Cloud TPUs (64 TPU chips total). Each pre- training took 4 days to complete. Longer sequences are disproportionately expen- sive because attention is quadratic to the sequence length. To speed up pretraing in our experiments, we pre-train the model with sequence length of 128 for 90% of the steps. Then, we train the rest 10% of the steps of sequence of 512 to learn the positional embeddings. A.3 Fine-tuning Procedure For ne-tuning, most model hyperparameters are the same as in pre-training, with the exception of the batch size, learning rate, and number of train- ing epochs. The dropout probability was always kept at 0.1. The optimal hyperparameter values are task-specic, but we found the following range of possible values to work well across all tasks: Batch size: 16,",
        "start_pos": 53488,
        "end_pos": 54283,
        "size": 795
      },
      {
        "chunk_id": "N19-1423_chunk_95",
        "document": "N19-1423",
        "text": "s. The dropout probability was always\nkept at 0.1. The optimal hyperparameter values\nare task-specic, but we found the following range\nof possible values to work well across all tasks:\n Batch size: 16, 32\n13https://cloudplatform.googleblog.com/2018/06/Cloud-\nTPU-now-offers-preemptible-pricing-and-global-\navailability.html\n\n Learning rate (Adam): 5e-5, 3e-5, 2e-5\n Number of epochs: 2, 3, 4\nWe also observed that large data sets (e.g.,\n100k+ labeled training examples) were far less\nsensitive to hyperparameter choice than small data\nsets. Fine-tuning is typically very fast, so it is rea-\nsonable to simply run an exhaustive search over\nthe above parameters and choose the model that\nperforms best on the development set.",
        "start_pos": 54083,
        "end_pos": 54807,
        "size": 723
      },
      {
        "chunk_id": "N19-1423_chunk_96",
        "document": "N19-1423",
        "text": "small data\nsets. Fine-tuning is typically very fast, so it is rea-\nsonable to simply run an exhaustive search over\nthe above parameters and choose the model that\nperforms best on the development set.\nA.4\nComparison of BERT, ELMo ,and\nOpen AI GPT\nHere we studies the differences in recent popular\nrepresentation learning models including ELMo,\nOpen AI GPT and BERT. The comparisons be-\ntween the model architectures are shown visually\nin Figure 3. Note that in addition to the architec-\nture differences, BERT and Open AI GPT are ne-\ntuning approaches, while ELMo is a feature-based\napproach.\nThe most comparable existing pre-training\nmethod to BERT is Open AI GPT, which trains a\nleft-to-right Transformer LM on a large text cor-\npus.",
        "start_pos": 54607,
        "end_pos": 55342,
        "size": 734
      },
      {
        "chunk_id": "N19-1423_chunk_97",
        "document": "N19-1423",
        "text": "ning approaches, while ELMo is a feature-based\napproach.\nThe most comparable existing pre-training\nmethod to BERT is Open AI GPT, which trains a\nleft-to-right Transformer LM on a large text cor-\npus. In fact, many of the design decisions in BERT\nwere intentionally made to make it as close to\nGPT as possible so that the two methods could be\nminimally compared. The core argument of this\nwork is that the bi-directionality and the two pre-\ntraining tasks presented in Section 3.1 account for\nthe majority of the empirical improvements, but\nwe do note that there are several other differences\nbetween how BERT and GPT were trained:\n GPT is trained on the Books Corpus (800M\nwords); BERT is trained on the Books Cor-\npus (800M words) and Wikipedia (2,500M\nwords).",
        "start_pos": 55142,
        "end_pos": 55905,
        "size": 761
      },
      {
        "chunk_id": "N19-1423_chunk_98",
        "document": "N19-1423",
        "text": "re several other differences between how BERT and GPT were trained: GPT is trained on the Books Corpus (800M words); BERT is trained on the Books Cor- pus (800M words) and Wikipedia (2,500M words). GPT uses a sentence separator ([SEP]) and classier token ([CLS]) which are only in- troduced at ne-tuning time; BERT learns [SEP], [CLS] and sentence A/B embed- dings during pre-training. GPT was trained for 1M steps with a batch size of 32,000 words; BERT was trained for 1M steps with a batch size of 128,000 words. GPT used the same learning rate of 5e-5 for all ne-tuning experiments; BERT chooses a task-specic ne-tuning learning rate which performs the best on the development set. To isolate the effect of these differences, we per- form ablation experiments in Section 5.1 which",
        "start_pos": 55705,
        "end_pos": 56489,
        "size": 784
      },
      {
        "chunk_id": "N19-1423_chunk_99",
        "document": "N19-1423",
        "text": "ments; BERT chooses a\ntask-specic ne-tuning learning rate which\nperforms the best on the development set.\nTo isolate the effect of these differences, we per-\nform ablation experiments in Section 5.1 which\ndemonstrate that the majority of the improvements\nare in fact coming from the two pre-training tasks\nand the bidirectionality they enable.\nA.5\nIllustrations of Fine-tuning on Different\nTasks\nThe illustration of ne-tuning BERT on different\ntasks can be seen in Figure 4. Our task-specic\nmodels are formed by incorporating BERT with\none additional output layer, so a minimal num-\nber of parameters need to be learned from scratch.\nAmong the tasks, (a) and (b) are sequence-level\ntasks while (c) and (d) are token-level tasks.",
        "start_pos": 56289,
        "end_pos": 57018,
        "size": 728
      },
      {
        "chunk_id": "N19-1423_chunk_100",
        "document": "N19-1423",
        "text": "T with\none additional output layer, so a minimal num-\nber of parameters need to be learned from scratch.\nAmong the tasks, (a) and (b) are sequence-level\ntasks while (c) and (d) are token-level tasks. In\nthe gure, E represents the input embedding, Ti\nrepresents the contextual representation of token i,\n[CLS] is the special symbol for classication out-\nput, and [SEP] is the special symbol to separate\nnon-consecutive token sequences.\nB\nDetailed Experimental Setup\nB.1\nDetailed Descriptions for the GLUE\nBenchmark Experiments.\nThe GLUE benchmark includes the following\ndatasets, the descriptions of which were originally\nsummarized in Wang et al. (2018a):\nMNLI\nMulti-Genre Natural Language Inference\nis a large-scale, crowdsourced entailment classi-\ncation task (Williams et al., 2018).",
        "start_pos": 56818,
        "end_pos": 57605,
        "size": 786
      },
      {
        "chunk_id": "N19-1423_chunk_101",
        "document": "N19-1423",
        "text": "riptions of which were originally\nsummarized in Wang et al. (2018a):\nMNLI\nMulti-Genre Natural Language Inference\nis a large-scale, crowdsourced entailment classi-\ncation task (Williams et al., 2018). Given a pair of\nsentences, the goal is to predict whether the sec-\nond sentence is an entailment, contradiction, or\nneutral with respect to the rst one.\nQQP\nQuora Question Pairs is a binary classi-\ncation task where the goal is to determine if two\nquestions asked on Quora are semantically equiv-\nalent (Chen et al., 2018).\nQNLI\nQuestion Natural Language Inference is\na version of the Stanford Question Answering\nDataset (Rajpurkar et al., 2016) which has been\nconverted to a binary classication task (Wang\net al., 2018a).",
        "start_pos": 57405,
        "end_pos": 58128,
        "size": 722
      },
      {
        "chunk_id": "N19-1423_chunk_102",
        "document": "N19-1423",
        "text": "QNLI\nQuestion Natural Language Inference is\na version of the Stanford Question Answering\nDataset (Rajpurkar et al., 2016) which has been\nconverted to a binary classication task (Wang\net al., 2018a). The positive examples are (ques-\ntion, sentence) pairs which do contain the correct\nanswer, and the negative examples are (question,\nsentence) from the same paragraph which do not\ncontain the answer.\nSST-2\nThe Stanford Sentiment Treebank is a\nbinary single-sentence classication task consist-\ning of sentences extracted from movie reviews\n\nBERT\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok \n [SEP]\n...\nTok \nN\nTok \n...\nTok\nM\nQuestion\nParagraph\nBERT\nE[CLS]\nE1\n E2\n EN\nC\nT1\n T2\n TN\nSingle Sentence \n...\n...\nBERT\nTok 1\n Tok 2\n Tok N\n...",
        "start_pos": 57928,
        "end_pos": 58690,
        "size": 760
      },
      {
        "chunk_id": "N19-1423_chunk_103",
        "document": "N19-1423",
        "text": "... EN E1 ... EM C T1 T[SEP] ... TN T1 ... TM [CLS] Tok [SEP] ... Tok N Tok ... Tok M Question Paragraph BERT E[CLS] E1 E2 EN C T1 T2 TN Single Sentence ... ... BERT Tok 1 Tok 2 Tok N ... [CLS] E[CLS] E1 E2 EN C T1 T2 TN Single Sentence B-PER O O ... ... E[CLS] E1 E[SEP] Class Label ... EN E1 ... EM C T1 T[SEP] ... TN T1 ... TM Start/End Span Class Label BERT Tok 1 Tok 2 Tok N ... [CLS] Tok 1 [CLS] [CLS] Tok [SEP] ... Tok N Tok ... Tok M Sentence 1 ... Sentence 2 Figure 4: Illustrations of Fine-tuning BERT on Different Tasks. with human annotations of their sentiment (Socher et al., 2013). Co LA The Corpus of Linguistic Acceptability is a binary single-sentence classication task, where the goal is to predict whether an English sentence is linguistically",
        "start_pos": 58490,
        "end_pos": 59253,
        "size": 763
      },
      {
        "chunk_id": "N19-1423_chunk_104",
        "document": "N19-1423",
        "text": "human annotations of their sentiment (Socher\net al., 2013).\nCo LA\nThe Corpus of Linguistic Acceptability is\na binary single-sentence classication task, where\nthe goal is to predict whether an English sentence\nis linguistically acceptable or not (Warstadt\net al., 2018).\nSTS-B\nThe Semantic Textual Similarity Bench-\nmark is a collection of sentence pairs drawn from\nnews headlines and other sources (Cer et al.,\n2017). They were annotated with a score from 1\nto 5 denoting how similar the two sentences are in\nterms of semantic meaning.\nMRPC\nMicrosoft Research Paraphrase Corpus\nconsists of sentence pairs automatically extracted\nfrom online news sources, with human annotations\nfor whether the sentences in the pair are semanti-\ncally equivalent (Dolan and Brockett, 2005).",
        "start_pos": 59053,
        "end_pos": 59827,
        "size": 773
      },
      {
        "chunk_id": "N19-1423_chunk_105",
        "document": "N19-1423",
        "text": "pus\nconsists of sentence pairs automatically extracted\nfrom online news sources, with human annotations\nfor whether the sentences in the pair are semanti-\ncally equivalent (Dolan and Brockett, 2005).\nRTE\nRecognizing Textual Entailment is a bi-\nnary entailment task similar to MNLI, but with\nmuch less training data (Bentivogli et al., 2009).14\nWNLI\nWinograd NLI is a small natural lan-\nguage inference dataset (Levesque et al., 2011).\nThe GLUE webpage notes that there are issues\nwith the construction of this dataset, 15 and every\ntrained system thats been submitted to GLUE has\nperformed worse than the 65.1 baseline accuracy\nof predicting the majority class. We therefore ex-\nclude this set to be fair to Open AI GPT. For our\nGLUE submission, we always predicted the ma-\njority class.",
        "start_pos": 59627,
        "end_pos": 60415,
        "size": 787
      },
      {
        "chunk_id": "N19-1423_chunk_106",
        "document": "N19-1423",
        "text": "d worse than the 65.1 baseline accuracy\nof predicting the majority class. We therefore ex-\nclude this set to be fair to Open AI GPT. For our\nGLUE submission, we always predicted the ma-\njority class.\n14Note that we only report single-task ne-tuning results\nin this paper. A multitask ne-tuning approach could poten-\ntially push the performance even further. For example, we\ndid observe substantial improvements on RTE from multi-\ntask training with MNLI.\n15https://gluebenchmark.com/faq\n\nC\nAdditional Ablation Studies\nC.1\nEffect of Number of Training Steps\nFigure 5 presents MNLI Dev accuracy after ne-\ntuning from a checkpoint that has been pre-trained\nfor k steps. This allows us to answer the following\nquestions:\n1.",
        "start_pos": 60215,
        "end_pos": 60935,
        "size": 719
      },
      {
        "chunk_id": "N19-1423_chunk_107",
        "document": "N19-1423",
        "text": "1\nEffect of Number of Training Steps\nFigure 5 presents MNLI Dev accuracy after ne-\ntuning from a checkpoint that has been pre-trained\nfor k steps. This allows us to answer the following\nquestions:\n1. Question:\nDoes BERT really need such\na large amount of pre-training (128,000\nwords/batch * 1,000,000 steps) to achieve\nhigh ne-tuning accuracy?\nAnswer: Yes, BERTBASE achieves almost\n1.0% additional accuracy on MNLI when\ntrained on 1M steps compared to 500k steps.\n2. Question: Does MLM pre-training converge\nslower than LTR pre-training, since only 15%\nof words are predicted in each batch rather\nthan every word?\nAnswer: The MLM model does converge\nslightly slower than the LTR model. How-\never, in terms of absolute accuracy the MLM\nmodel begins to outperform the LTR model\nalmost immediately.",
        "start_pos": 60735,
        "end_pos": 61531,
        "size": 795
      },
      {
        "chunk_id": "N19-1423_chunk_108",
        "document": "N19-1423",
        "text": "than every word?\nAnswer: The MLM model does converge\nslightly slower than the LTR model. How-\never, in terms of absolute accuracy the MLM\nmodel begins to outperform the LTR model\nalmost immediately.\nC.2\nAblation for Different Masking\nProcedures\nIn Section 3.1, we mention that BERT uses a\nmixed strategy for masking the target tokens when\npre-training with the masked language model\n(MLM) objective. The following is an ablation\nstudy to evaluate the effect of different masking\nstrategies.\nNote that the purpose of the masking strategies\nis to reduce the mismatch between pre-training\n400\n800\n1,000\n78\n82\nPre-training Steps (Thousands)\nMNLI Dev Accuracy\nBERTBASE (Masked LM)\nBERTBASE (Left-to-Right)\nFigure 5: Ablation over number of training steps.",
        "start_pos": 61331,
        "end_pos": 62083,
        "size": 750
      },
      {
        "chunk_id": "N19-1423_chunk_109",
        "document": "N19-1423",
        "text": "the mismatch between pre-training 400 800 1,000 78 82 Pre-training Steps (Thousands) MNLI Dev Accuracy BERTBASE (Masked LM) BERTBASE (Left-to-Right) Figure 5: Ablation over number of training steps. This shows the MNLI accuracy after ne-tuning, starting from model parameters that have been pre-trained for k steps. The x-axis is the value of k. and ne-tuning, as the [MASK] symbol never ap- pears during the ne-tuning stage. We report the Dev results for both MNLI and NER. For NER, we report both ne-tuning and feature-based ap- proaches, as we expect the mismatch will be am- plied for the feature-based approach as the model will not have the chance to adjust the representa- tions. Masking Rates Dev Set Results Fine-tune Fine-tune Feature-based 80% 10% 10% 84.2 95.4 94.9 100% 0% 0% 84.3",
        "start_pos": 61883,
        "end_pos": 62676,
        "size": 793
      },
      {
        "chunk_id": "N19-1423_chunk_110",
        "document": "N19-1423",
        "text": "feature-based approach as the model\nwill not have the chance to adjust the representa-\ntions.\nMasking Rates\nDev Set Results\nFine-tune Fine-tune Feature-based\n80%\n10%\n10%\n84.2\n95.4\n94.9\n100%\n0%\n0%\n84.3\n94.9\n94.0\n80%\n0%\n20%\n84.1\n95.2\n94.6\n80%\n20%\n0%\n84.4\n95.2\n94.7\n0%\n20%\n80%\n83.7\n94.8\n94.6\n0%\n0% 100%\n83.6\n94.9\n94.6\nTable 8: Ablation over different masking strategies.\nThe results are presented in Table 8. In the table,\nMASK means that we replace the target token with\nthe [MASK] symbol for MLM; SAME means that\nwe keep the target token as is; RND means that\nwe replace the target token with another random\ntoken.\nThe numbers in the left part of the table repre-\nsent the probabilities of the specic strategies used\nduring MLM pre-training (BERT uses 80%, 10%,\n10%).",
        "start_pos": 62476,
        "end_pos": 63244,
        "size": 766
      },
      {
        "chunk_id": "N19-1423_chunk_111",
        "document": "N19-1423",
        "text": "ce the target token with another random\ntoken.\nThe numbers in the left part of the table repre-\nsent the probabilities of the specic strategies used\nduring MLM pre-training (BERT uses 80%, 10%,\n10%). The right part of the paper represents the\nDev set results. For the feature-based approach,\nwe concatenate the last 4 layers of BERT as the\nfeatures, which was shown to be the best approach\nin Section 5.3.\nFrom the table it can be seen that ne-tuning is\nsurprisingly robust to different masking strategies.\nHowever, as expected, using only the MASK strat-\negy was problematic when applying the feature-\nbased approach to NER. Interestingly, using only\nthe RND strategy performs much worse than our\nstrategy as well.",
        "start_pos": 63044,
        "end_pos": 63759,
        "size": 715
      }
    ]
  },
  "all_chunks": [
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_0",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Published as a conference paper at ICLR 2021\nAN IMAGE IS WORTH 16X16 WORDS:\nAlexey Dosovitskiy,, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn,\nXiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer,\nGeorg Heigold, Sylvain Gelly, Jakob Uszkoreit, Neil Houlsby,\nequal technical contribution, equal advising\nGoogle Research, Brain Team\n{adosovitskiy, neilhoulsby}@google.com\nABSTRACT\nWhile the Transformer architecture has become the de-facto standard for natural\nlanguage processing tasks, its applications to computer vision remain limited. In\nvision, attention is either applied in conjunction with convolutional networks, or\nused to replace certain components of convolutional networks while keeping their\noverall structure in place.",
      "start_pos": 0,
      "end_pos": 757,
      "size": 756
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_1",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ted. In vision, attention is either applied in conjunction with convolutional networks, or used to replace certain components of convolutional networks while keeping their overall structure in place. We show that this reliance on CNNs is not necessary and a pure transformer applied directly to sequences of image patches can perform very well on image classication tasks. When pre-trained on large amounts of data and transferred to multiple mid-sized or small image recognition benchmarks (Image Net, CIFAR-100, VTAB, etc.), Vision Transformer (Vi T) attains excellent results compared to state-of-the-art convolutional networks while requiring sub- stantially fewer computational resources to train.1 Self-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have",
      "start_pos": 557,
      "end_pos": 1352,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_2",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "e-of-the-art convolutional networks while requiring sub- stantially fewer computational resources to train.1 Self-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have become the model of choice in natural language processing (NLP). The dominant approach is to pre-train on a large text corpus and then ne-tune on a smaller task-specic dataset (Devlin et al., 2019). Thanks to Transformers computational efciency and scalability, it has become possible to train models of unprecedented size, with over 100B parameters (Brown et al., 2020; Lepikhin et al., 2020). With the models and datasets growing, there is still no sign of saturating performance. In computer vision, however, convolutional architectures remain dominant (Le Cun et al., 1989; Krizhevsky et al.,",
      "start_pos": 1152,
      "end_pos": 1949,
      "size": 797
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_3",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ith the\nmodels and datasets growing, there is still no sign of saturating performance.\nIn computer vision, however, convolutional architectures remain dominant (Le Cun et al., 1989;\nKrizhevsky et al., 2012; He et al., 2016). Inspired by NLP successes, multiple works try combining\nCNN-like architectures with self-attention (Wang et al., 2018; Carion et al., 2020), some replacing\nthe convolutions entirely (Ramachandran et al., 2019; Wang et al., 2020a). The latter models, while\ntheoretically efcient, have not yet been scaled effectively on modern hardware accelerators due to\nthe use of specialized attention patterns. Therefore, in large-scale image recognition, classic Res Net-\nlike architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al.,\n2020).",
      "start_pos": 1749,
      "end_pos": 2547,
      "size": 797
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_4",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ized attention patterns. Therefore, in large-scale image recognition, classic Res Net- like architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al., 2020). Inspired by the Transformer scaling successes in NLP, we experiment with applying a standard Transformer directly to images, with the fewest possible modications. To do so, we split an image into patches and provide the sequence of linear embeddings of these patches as an input to a Trans- former. Image patches are treated the same way as tokens (words) in an NLP application. We train the model on image classication in supervised fashion. When trained on mid-sized datasets such as Image Net without strong regularization, these mod- els yield modest accuracies of a few percentage points below",
      "start_pos": 2347,
      "end_pos": 3145,
      "size": 798
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_5",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "on image classication in supervised fashion.\nWhen trained on mid-sized datasets such as Image Net without strong regularization, these mod-\nels yield modest accuracies of a few percentage points below Res Nets of comparable size. This\nseemingly discouraging outcome may be expected: Transformers lack some of the inductive biases\n1Fine-tuning\ncode\nand\npre-trained\nmodels\nare\navailable\nat\nhttps://github.com/\ngoogle-research/vision_transformer\n\nPublished as a conference paper at ICLR 2021\ninherent to CNNs, such as translation equivariance and locality, and therefore do not generalize well\nwhen trained on insufcient amounts of data.\nHowever, the picture changes if the models are trained on larger datasets (14M-300M images). We\nnd that large scale training trumps inductive bias.",
      "start_pos": 2945,
      "end_pos": 3728,
      "size": 782
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_6",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ze well\nwhen trained on insufcient amounts of data.\nHowever, the picture changes if the models are trained on larger datasets (14M-300M images). We\nnd that large scale training trumps inductive bias. Our Vision Transformer (Vi T) attains excellent\nresults when pre-trained at sufcient scale and transferred to tasks with fewer datapoints. When\npre-trained on the public Image Net-21k dataset or the in-house JFT-300M dataset, Vi T approaches\nor beats state of the art on multiple image recognition benchmarks. In particular, the best model\nreaches the accuracy of 88.55% on Image Net, 90.72% on Image Net-Rea L, 94.55% on CIFAR-100,\nand 77.63% on the VTAB suite of 19 tasks.\nTransformers were proposed by Vaswani et al.",
      "start_pos": 3528,
      "end_pos": 4248,
      "size": 719
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_7",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "lar, the best model\nreaches the accuracy of 88.55% on Image Net, 90.72% on Image Net-Rea L, 94.55% on CIFAR-100,\nand 77.63% on the VTAB suite of 19 tasks.\nTransformers were proposed by Vaswani et al. (2017) for machine translation, and have since be-\ncome the state of the art method in many NLP tasks. Large Transformer-based models are often\npre-trained on large corpora and then ne-tuned for the task at hand: BERT (Devlin et al., 2019)\nuses a denoising self-supervised pre-training task, while the GPT line of work uses language mod-\neling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020).\nNaive application of self-attention to images would require that each pixel attends to every other\npixel.",
      "start_pos": 4048,
      "end_pos": 4773,
      "size": 724
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_8",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "anguage mod- eling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020). Naive application of self-attention to images would require that each pixel attends to every other pixel. With quadratic cost in the number of pixels, this does not scale to realistic input sizes. Thus, to apply Transformers in the context of image processing, several approximations have been tried in the past. Parmar et al. (2018) applied the self-attention only in local neighborhoods for each query pixel instead of globally. Such local multi-head dot-product self attention blocks can completely replace convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different line of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-",
      "start_pos": 4573,
      "end_pos": 5371,
      "size": 798
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_9",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "place convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different\nline of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-\nattention in order to be applicable to images. An alternative way to scale attention is to apply it in\nblocks of varying sizes (Weissenborn et al., 2019), in the extreme case only along individual axes (Ho\net al., 2019; Wang et al., 2020a). Many of these specialized attention architectures demonstrate\npromising results on computer vision tasks, but require complex engineering to be implemented\nefciently on hardware accelerators.\nMost related to ours is the model of Cordonnier et al. (2020), which extracts patches of size 2  2\nfrom the input image and applies full self-attention on top.",
      "start_pos": 5171,
      "end_pos": 5965,
      "size": 793
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_10",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ted\nefciently on hardware accelerators.\nMost related to ours is the model of Cordonnier et al. (2020), which extracts patches of size 2  2\nfrom the input image and applies full self-attention on top. This model is very similar to Vi T,\nbut our work goes further to demonstrate that large scale pre-training makes vanilla transformers\ncompetitive with (or even better than) state-of-the-art CNNs. Moreover, Cordonnier et al. (2020)\nuse a small patch size of 2  2 pixels, which makes the model applicable only to small-resolution\nimages, while we handle medium-resolution images as well.\nThere has also been a lot of interest in combining convolutional neural networks (CNNs) with forms\nof self-attention, e.g.",
      "start_pos": 5765,
      "end_pos": 6474,
      "size": 708
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_11",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "o small-resolution images, while we handle medium-resolution images as well. There has also been a lot of interest in combining convolutional neural networks (CNNs) with forms of self-attention, e.g. by augmenting feature maps for image classication (Bello et al., 2019) or by further processing the output of a CNN using self-attention, e.g. for object detection (Hu et al., 2018; Carion et al., 2020), video processing (Wang et al., 2018; Sun et al., 2019), image classication (Wu et al., 2020), unsupervised object discovery (Locatello et al., 2020), or unied text-vision tasks (Chen et al., 2020c; Lu et al., 2019; Li et al., 2019). Another recent related model is image GPT (i GPT) (Chen et al., 2020a), which applies Transformers to image pixels after reducing image resolution and color",
      "start_pos": 6274,
      "end_pos": 7067,
      "size": 793
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_12",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": ", 2020c; Lu et al., 2019; Li et al., 2019).\nAnother recent related model is image GPT (i GPT) (Chen et al., 2020a), which applies Transformers\nto image pixels after reducing image resolution and color space. The model is trained in an unsu-\npervised fashion as a generative model, and the resulting representation can then be ne-tuned or\nprobed linearly for classication performance, achieving a maximal accuracy of 72% on Image Net.\nOur work adds to the increasing collection of papers that explore image recognition at larger scales\nthan the standard Image Net dataset. The use of additional data sources allows to achieve state-of-\nthe-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020).\nMoreover, Sun et al.",
      "start_pos": 6867,
      "end_pos": 7626,
      "size": 758
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_13",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Net dataset. The use of additional data sources allows to achieve state-of-\nthe-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020).\nMoreover, Sun et al. (2017) study how CNN performance scales with dataset size, and Kolesnikov\net al. (2020); Djolonga et al. (2020) perform an empirical exploration of CNN transfer learning from\nlarge scale datasets such as Image Net-21k and JFT-300M. We focus on these two latter datasets as\nwell, but train Transformers instead of Res Net-based models used in prior works.\n\nPublished as a conference paper at ICLR 2021\nTransformer Encoder\nMLP \nHead\nVision Transformer (Vi T)\n*\nLinear Projection of Flattened Patches\n* Extra learnable\n [ cl ass] embedding\n2\n4\n6\n8\n0\nPatch + Position \nEmbedding\nClass\nBird\nBall\nCar\n...",
      "start_pos": 7426,
      "end_pos": 8225,
      "size": 798
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_14",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "1\nTransformer Encoder\nMLP \nHead\nVision Transformer (Vi T)\n*\nLinear Projection of Flattened Patches\n* Extra learnable\n [ cl ass] embedding\n2\n4\n6\n8\n0\nPatch + Position \nEmbedding\nClass\nBird\nBall\nCar\n...\nEmbedded \nPatches\nMulti-Head \nAttention\nNorm\nMLP\nNorm\n+\nL x\n+\nTransformer Encoder\nFigure 1: Model overview. We split an image into xed-size patches, linearly embed each of them,\nadd position embeddings, and feed the resulting sequence of vectors to a standard Transformer\nencoder. In order to perform classication, we use the standard approach of adding an extra learnable\nclassication token to the sequence. The illustration of the Transformer encoder was inspired by\nVaswani et al. (2017).\nMETHOD\nIn model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible.",
      "start_pos": 8025,
      "end_pos": 8822,
      "size": 796
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_15",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "e sequence. The illustration of the Transformer encoder was inspired by Vaswani et al. (2017). METHOD In model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible. An advantage of this intentionally simple setup is that scalable NLP Transformer architectures and their efcient implementations can be used almost out of the box. 3.1 VISION TRANSFORMER (VIT) An overview of the model is depicted in Figure 1. The standard Transformer receives as input a 1D sequence of token embeddings. To handle 2D images, we reshape the image x RHW C into a sequence of attened 2D patches xp RN(P 2C), where (H, W) is the resolution of the original image, C is the number of channels, (P, P) is the resolution of each image patch, and N = HW/P 2 is the resulting number of",
      "start_pos": 8622,
      "end_pos": 9414,
      "size": 792
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_16",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "attened 2D patches xp RN(P 2C), where (H, W) is the resolution of the original\nimage, C is the number of channels, (P, P) is the resolution of each image patch, and N = HW/P 2\nis the resulting number of patches, which also serves as the effective input sequence length for the\nTransformer. The Transformer uses constant latent vector size D through all of its layers, so we\natten the patches and map to D dimensions with a trainable linear projection (Eq. 1). We refer to\nthe output of this projection as the patch embeddings.\nSimilar to BERTs [class] token, we prepend a learnable embedding to the sequence of embed-\nded patches (z0\n0 = xclass), whose state at the output of the Transformer encoder (z0\nL) serves as the\nimage representation y (Eq. 4).",
      "start_pos": 9214,
      "end_pos": 9967,
      "size": 752
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_17",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "oken, we prepend a learnable embedding to the sequence of embed-\nded patches (z0\n0 = xclass), whose state at the output of the Transformer encoder (z0\nL) serves as the\nimage representation y (Eq. 4). Both during pre-training and ne-tuning, a classication head is at-\ntached to z0\nL. The classication head is implemented by a MLP with one hidden layer at pre-training\ntime and by a single linear layer at ne-tuning time.\nPosition embeddings are added to the patch embeddings to retain positional information. We use\nstandard learnable 1D position embeddings, since we have not observed signicant performance\ngains from using more advanced 2D-aware position embeddings (Appendix D.3). The resulting\nsequence of embedding vectors serves as input to the encoder.",
      "start_pos": 9767,
      "end_pos": 10526,
      "size": 758
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_18",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ince we have not observed signicant performance\ngains from using more advanced 2D-aware position embeddings (Appendix D.3). The resulting\nsequence of embedding vectors serves as input to the encoder.\nThe Transformer encoder (Vaswani et al., 2017) consists of alternating layers of multiheaded self-\nattention (MSA, see Appendix A) and MLP blocks (Eq. 2, 3). Layernorm (LN) is applied before\nevery block, and residual connections after every block (Wang et al., 2019; Baevski & Auli, 2019).\n\nPublished as a conference paper at ICLR 2021\nThe MLP contains two layers with a GELU non-linearity.\nz0 = [xclass; x1\np E; x2\np E;    ; x N\np E] + Epos,\nE R(P 2C)D, Epos R(N+1)D\n(1)\nz\n= MSA(LN(z1)) + z1,\n= 1 . . . L\n(2)\nz= MLP(LN(z\n)) + z\n,\n= 1 . . . L\n(3)\ny = LN(z0\nL)\n(4)\nInductive bias.",
      "start_pos": 10326,
      "end_pos": 11106,
      "size": 779
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_19",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "linearity.\nz0 = [xclass; x1\np E; x2\np E;    ; x N\np E] + Epos,\nE R(P 2C)D, Epos R(N+1)D\n(1)\nz\n= MSA(LN(z1)) + z1,\n= 1 . . . L\n(2)\nz= MLP(LN(z\n)) + z\n,\n= 1 . . . L\n(3)\ny = LN(z0\nL)\n(4)\nInductive bias.\nWe note that Vision Transformer has much less image-specic inductive bias than\nCNNs. In CNNs, locality, two-dimensional neighborhood structure, and translation equivariance are\nbaked into each layer throughout the whole model. In Vi T, only MLP layers are local and transla-\ntionally equivariant, while the self-attention layers are global. The two-dimensional neighborhood\nstructure is used very sparingly: in the beginning of the model by cutting the image into patches and\nat ne-tuning time for adjusting the position embeddings for images of different resolution (as de-\nscribed below).",
      "start_pos": 10906,
      "end_pos": 11697,
      "size": 790
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_20",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "very sparingly: in the beginning of the model by cutting the image into patches and at ne-tuning time for adjusting the position embeddings for images of different resolution (as de- scribed below). Other than that, the position embeddings at initialization time carry no information about the 2D positions of the patches and all spatial relations between the patches have to be learned from scratch. Hybrid Architecture. As an alternative to raw image patches, the input sequence can be formed from feature maps of a CNN (Le Cun et al., 1989). In this hybrid model, the patch embedding projection E (Eq. 1) is applied to patches extracted from a CNN feature map. As a special case, the patches can have spatial size 1x1, which means that the input sequence is obtained by simply attening the",
      "start_pos": 11497,
      "end_pos": 12289,
      "size": 792
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_21",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ection E (Eq. 1) is applied to patches extracted from a CNN feature map. As a special case,\nthe patches can have spatial size 1x1, which means that the input sequence is obtained by simply\nattening the spatial dimensions of the feature map and projecting to the Transformer dimension.\nThe classication input embedding and position embeddings are added as described above.\n3.2\nFINE-TUNING AND HIGHER RESOLUTION\nTypically, we pre-train Vi T on large datasets, and ne-tune to (smaller) downstream tasks. For\nthis, we remove the pre-trained prediction head and attach a zero-initialized D  K feedforward\nlayer, where K is the number of downstream classes. It is often benecial to ne-tune at higher\nresolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020).",
      "start_pos": 12089,
      "end_pos": 12861,
      "size": 771
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_22",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "nitialized D K feedforward layer, where K is the number of downstream classes. It is often benecial to ne-tune at higher resolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020). When feeding images of higher resolution, we keep the patch size the same, which results in a larger effective sequence length. The Vision Transformer can handle arbitrary sequence lengths (up to memory constraints), however, the pre-trained position embeddings may no longer be meaningful. We therefore perform 2D interpolation of the pre-trained position embeddings, according to their location in the original image. Note that this resolution adjustment and patch extraction are the only points at which an inductive bias about the 2D structure of the images is manually injected into the Vision",
      "start_pos": 12661,
      "end_pos": 13458,
      "size": 797
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_23",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "in the original\nimage. Note that this resolution adjustment and patch extraction are the only points at which an\ninductive bias about the 2D structure of the images is manually injected into the Vision Transformer.\nWe evaluate the representation learning capabilities of Res Net, Vision Transformer (Vi T), and the\nhybrid. To understand the data requirements of each model, we pre-train on datasets of varying size\nand evaluate many benchmark tasks. When considering the computational cost of pre-training the\nmodel, Vi T performs very favourably, attaining state of the art on most recognition benchmarks at\na lower pre-training cost. Lastly, we perform a small experiment using self-supervision, and show\nthat self-supervised Vi T holds promise for the future.\n4.1\nSETUP\nDatasets.",
      "start_pos": 13258,
      "end_pos": 14041,
      "size": 782
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_24",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "recognition benchmarks at a lower pre-training cost. Lastly, we perform a small experiment using self-supervision, and show that self-supervised Vi T holds promise for the future. 4.1 SETUP Datasets. To explore model scalability, we use the ILSVRC-2012 Image Net dataset with 1k classes and 1.3M images (we refer to it as Image Net in what follows), its superset Image Net-21k with 21k classes and 14M images (Deng et al., 2009), and JFT (Sun et al., 2017) with 18k classes and 303M high-resolution images. We de-duplicate the pre-training datasets w.r.t. the test sets of the downstream tasks following Kolesnikov et al. (2020). We transfer the models trained on these dataset to several benchmark tasks: Image Net on the original validation labels and the cleaned-up Rea L labels (Beyer et al.,",
      "start_pos": 13841,
      "end_pos": 14637,
      "size": 796
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_25",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "llowing Kolesnikov et al. (2020). We transfer the models trained on these\ndataset to several benchmark tasks: Image Net on the original validation labels and the cleaned-up\nRea L labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al.,\n2012), and Oxford Flowers-102 (Nilsback & Zisserman, 2008). For these datasets, pre-processing\nfollows Kolesnikov et al. (2020).\n\nPublished as a conference paper at ICLR 2021\nModel\nLayers\nHidden size D\nMLP size\nHeads\nParams\nVi T-Base\n768\n12\n86M\nVi T-Large\n1024\n16\n307M\nVi T-Huge\n1280\n16\n632M\nTable 1: Details of Vision Transformer model variants.\nWe also evaluate on the 19-task VTAB classication suite (Zhai et al., 2019b). VTAB evaluates\nlow-data transfer to diverse tasks, using 1 000 training examples per task.",
      "start_pos": 14437,
      "end_pos": 15227,
      "size": 789
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_26",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "on Transformer model variants.\nWe also evaluate on the 19-task VTAB classication suite (Zhai et al., 2019b). VTAB evaluates\nlow-data transfer to diverse tasks, using 1 000 training examples per task. The tasks are divided into\nthree groups: Natural  tasks like the above, Pets, CIFAR, etc. Specialized  medical and satellite\nimagery, and Structured  tasks that require geometric understanding like localization.\nModel Variants. We base Vi T congurations on those used for BERT (Devlin et al., 2019), as\nsummarized in Table 1. The Base and Large models are directly adopted from BERT and we\nadd the larger Huge model. In what follows we use brief notation to indicate the model size and\nthe input patch size: for instance, Vi T-L/16 means the Large variant with 1616 input patch size.",
      "start_pos": 15027,
      "end_pos": 15811,
      "size": 783
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_27",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "nd we\nadd the larger Huge model. In what follows we use brief notation to indicate the model size and\nthe input patch size: for instance, Vi T-L/16 means the Large variant with 1616 input patch size.\nNote that the Transformers sequence length is inversely proportional to the square of the patch size,\nthus models with smaller patch size are computationally more expensive.\nFor the baseline CNNs, we use Res Net (He et al., 2016), but replace the Batch Normalization lay-\ners (Ioffe & Szegedy, 2015) with Group Normalization (Wu & He, 2018), and used standardized\nconvolutions (Qiao et al., 2019). These modications improve transfer (Kolesnikov et al., 2020),\nand we denote the modied model Res Net (Bi T).",
      "start_pos": 15611,
      "end_pos": 16318,
      "size": 706
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_28",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "oup Normalization (Wu & He, 2018), and used standardized convolutions (Qiao et al., 2019). These modications improve transfer (Kolesnikov et al., 2020), and we denote the modied model Res Net (Bi T). For the hybrids, we feed the intermediate fea- ture maps into Vi T with patch size of one pixel. To experiment with different sequence lengths, we either (i) take the output of stage 4 of a regular Res Net50 or (ii) remove stage 4, place the same number of layers in stage 3 (keeping the total number of layers), and take the output of this extended stage 3. Option (ii) results in a 4x longer sequence length, and a more expensive Vi T model. Training & Fine-tuning. We train all models, including Res Nets, using Adam (Kingma & Ba, 2015) with 1 = 0.9, 2 = 0.999, a batch size of 4096 and apply a",
      "start_pos": 16118,
      "end_pos": 16915,
      "size": 797
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_29",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "uence length, and a more expensive Vi T model. Training & Fine-tuning. We train all models, including Res Nets, using Adam (Kingma & Ba, 2015) with 1 = 0.9, 2 = 0.999, a batch size of 4096 and apply a high weight decay of 0.1, which we found to be useful for transfer of all models (Appendix D.1 shows that, in contrast to common practices, Adam works slightly better than SGD for Res Nets in our setting). We use a linear learning rate warmup and decay, see Appendix B.1 for details. For ne-tuning we use SGD with momentum, batch size 512, for all models, see Appendix B.1.1. For Image Net results in Table 2, we ne-tuned at higher resolution: 512 for Vi T-L/16 and 518 for Vi T-H/14, and also used Polyak & Juditsky (1992) averaging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et",
      "start_pos": 16715,
      "end_pos": 17509,
      "size": 794
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_30",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ults in Table 2, we ne-tuned at higher resolution: 512 for Vi T-L/16 and 518 for Vi T-H/14, and also used Polyak & Juditsky (1992) averaging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et al., 2020b). Metrics. We report results on downstream datasets either through few-shot or ne-tuning accuracy. Fine-tuning accuracies capture the performance of each model after ne-tuning it on the respective dataset. Few-shot accuracies are obtained by solving a regularized least-squares regression problem that maps the (frozen) representation of a subset of training images to {1, 1}K target vectors. This formulation allows us to recover the exact solution in closed form. Though we mainly focus on ne-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-y",
      "start_pos": 17309,
      "end_pos": 18097,
      "size": 788
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_31",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "target vectors. This\nformulation allows us to recover the exact solution in closed form. Though we mainly focus on\nne-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-y evaluation\nwhere ne-tuning would be too costly.\n4.2\nWe rst compare our largest models  Vi T-H/14 and Vi T-L/16  to state-of-the-art CNNs from\nthe literature. The rst comparison point is Big Transfer (Bi T) (Kolesnikov et al., 2020), which\nperforms supervised transfer learning with large Res Nets. The second is Noisy Student (Xie et al.,\n2020), which is a large Efcient Net trained using semi-supervised learning on Image Net and JFT-\n300M with the labels removed. Currently, Noisy Student is the state of the art on Image Net and\nBi T-L on the other datasets reported here.",
      "start_pos": 17897,
      "end_pos": 18674,
      "size": 775
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_32",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "rained using semi-supervised learning on Image Net and JFT- 300M with the labels removed. Currently, Noisy Student is the state of the art on Image Net and Bi T-L on the other datasets reported here. All models were trained on TPUv3 hardware, and we report the number of TPUv3-core-days taken to pre-train each of them, that is, the number of TPU v3 cores (2 per chip) used for training multiplied by the training time in days. Table 2 shows the results. The smaller Vi T-L/16 model pre-trained on JFT-300M outperforms Bi T-L (which is pre-trained on the same dataset) on all tasks, while requiring substantially less computa- tional resources to train. The larger model, Vi T-H/14, further improves the performance, especially on the more challenging datasets Image Net, CIFAR-100, and the VTAB",
      "start_pos": 18474,
      "end_pos": 19269,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_33",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ing substantially less computa- tional resources to train. The larger model, Vi T-H/14, further improves the performance, especially on the more challenging datasets Image Net, CIFAR-100, and the VTAB suite. Interestingly, this Published as a conference paper at ICLR 2021 Ours-JFT Ours-JFT Ours-I21k Bi T-L Noisy Student (Vi T-H/14) (Vi T-L/16) (Vi T-L/16) (Res Net152x4) (Efcient Net-L2) Image Net 88.55 0.04 87.76 0.03 85.30 0.02 87.54 0.02 88.4/88.5 Image Net Rea L 90.72 0.05 90.54 0.03 88.62 0.05 90.54 90.55 CIFAR-10 99.50 0.06 99.42 0.03 99.15 0.03 99.37 0.06 CIFAR-100 94.55 0.04 93.90 0.05 93.25 0.05 93.51 0.08 Oxford-IIIT Pets 97.56 0.03 97.32 0.11 94.67 0.15 96.62 0.23 Oxford Flowers-102 99.68 0.02 99.74 0.00 99.61 0.02 99.63 0.03 VTAB (19 tasks) 77.63",
      "start_pos": 19069,
      "end_pos": 19836,
      "size": 767
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_34",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "3\n99.37  0.06\n\nCIFAR-100\n94.55  0.04\n93.90  0.05\n93.25  0.05\n93.51  0.08\n\nOxford-IIIT Pets\n97.56  0.03\n97.32  0.11\n94.67  0.15\n96.62  0.23\n\nOxford Flowers-102\n99.68  0.02\n99.74  0.00\n99.61  0.02\n99.63  0.03\n\nVTAB (19 tasks)\n77.63  0.23\n76.28  0.46\n72.72  0.21\n76.29  1.70\n\nTPUv3-core-days\n2.5k\n0.68k\n0.23k\n9.9k\n12.3k\nTable 2:\nComparison with state of the art on popular image classication benchmarks. We re-\nport mean and standard deviation of the accuracies, averaged over three ne-tuning runs. Vision\nTransformer models pre-trained on the JFT-300M dataset outperform Res Net-based baselines on all\ndatasets, while taking substantially less computational resources to pre-train. Vi T pre-trained on the\nsmaller public Image Net-21k dataset performs well too.",
      "start_pos": 19636,
      "end_pos": 20396,
      "size": 759
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_35",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "tperform Res Net-based baselines on all\ndatasets, while taking substantially less computational resources to pre-train. Vi T pre-trained on the\nsmaller public Image Net-21k dataset performs well too. Slightly improved 88.5% result reported\nin Touvron et al. (2020).\nVTAB (19 tasks)\n70\n80\nAccuracy [%]\nNatural (7 tasks)\n80\nSpecialized (4 tasks)\n82\n88\nStructured (8 tasks)\n60\nVi T-H/14\nBi T-L (R152x4)\nVIVI-Ex-100% (R50x3)\nS4L (R50x1)\nFigure 2: Breakdown of VTAB performance in Natural, Specialized, and Structured task groups.\nmodel still took substantially less compute to pre-train than prior state of the art. However, we note\nthat pre-training efciency may be affected not only by the architecture choice, but also other pa-\nrameters, such as training schedule, optimizer, weight decay, etc.",
      "start_pos": 20196,
      "end_pos": 20991,
      "size": 794
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_36",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "tate of the art. However, we note that pre-training efciency may be affected not only by the architecture choice, but also other pa- rameters, such as training schedule, optimizer, weight decay, etc. We provide a controlled study of performance vs. compute for different architectures in Section 4.4. Finally, the Vi T-L/16 model pre-trained on the public Image Net-21k dataset performs well on most datasets too, while taking fewer resources to pre-train: it could be trained using a standard cloud TPUv3 with 8 cores in ap- proximately 30 days. Figure 2 decomposes the VTAB tasks into their respective groups, and compares to previous SOTA methods on this benchmark: Bi T, VIVI a Res Net co-trained on Image Net and Youtube (Tschannen et al., 2020), and S4L supervised plus semi-supervised",
      "start_pos": 20791,
      "end_pos": 21582,
      "size": 791
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_37",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "r respective groups, and compares to previous SOTA\nmethods on this benchmark: Bi T, VIVI  a Res Net co-trained on Image Net and Youtube (Tschannen\net al., 2020), and S4L  supervised plus semi-supervised learning on Image Net (Zhai et al., 2019a).\nVi T-H/14 outperforms Bi T-R152x4, and other methods, on the Natural and Structured tasks. On the\nSpecialized the performance of the top two models is similar.\n4.3\nPRE-TRAINING DATA REQUIREMENTS\nThe Vision Transformer performs well when pre-trained on a large JFT-300M dataset. With fewer\ninductive biases for vision than Res Nets, how crucial is the dataset size? We perform two series of\nexperiments.\nFirst, we pre-train Vi T models on datasets of increasing size: Image Net, Image Net-21k, and JFT-\n300M.",
      "start_pos": 21382,
      "end_pos": 22137,
      "size": 754
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_38",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "r vision than Res Nets, how crucial is the dataset size? We perform two series of\nexperiments.\nFirst, we pre-train Vi T models on datasets of increasing size: Image Net, Image Net-21k, and JFT-\n300M. To boost the performance on the smaller datasets, we optimize three basic regularization\nparameters  weight decay, dropout, and label smoothing. Figure 3 shows the results after ne-\ntuning to Image Net (results on other datasets are shown in Table 5)2. When pre-trained on the\nsmallest dataset, Image Net, Vi T-Large models underperform compared to Vi T-Base models, despite\n(moderate) regularization. With Image Net-21k pre-training, their performances are similar. Only\nwith JFT-300M, do we see the full benet of larger models.",
      "start_pos": 21937,
      "end_pos": 22667,
      "size": 729
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_39",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "erform compared to Vi T-Base models, despite\n(moderate) regularization. With Image Net-21k pre-training, their performances are similar. Only\nwith JFT-300M, do we see the full benet of larger models. Figure 3 also shows the performance\n2Note that the Image Net pre-trained models are also ne-tuned, but again on Image Net. This is because the\nresolution increase during ne-tuning improves the performance.\n\nPublished as a conference paper at ICLR 2021\nImage Net\nImage Net-21k\nJFT-300M\nPre-training dataset\n75\n85\nImage Net Top1 Accuracy [%]\nBi T\nVi T-B/32\nVi T-B/16\nVi T-L/32\nVi T-L/16\nVi T-H/14\nFigure 3:\nTransfer to Image Net.\nWhile\nlarge Vi T models perform worse than Bi T\nRes Nets (shaded area) when pre-trained on\nsmall datasets, they shine when pre-trained on\nlarger datasets.",
      "start_pos": 22467,
      "end_pos": 23250,
      "size": 782
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_40",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "6\nVi T-H/14\nFigure 3:\nTransfer to Image Net.\nWhile\nlarge Vi T models perform worse than Bi T\nRes Nets (shaded area) when pre-trained on\nsmall datasets, they shine when pre-trained on\nlarger datasets. Similarly, larger Vi T variants\novertake smaller ones as the dataset grows.\n10 M\n30 M\n100 M\n300 M\nNumber of JFT pre-training samples\n40\n60\nLinear 5-shot Image Net Top1 [%]\nVi T-L/16\nVi T-L/32\nVi T-B/32\nVi T-b/32\nRes Net50x1 (Bi T)\nRes Net152x2 (Bi T)\nFigure 4: Linear few-shot evaluation on Ima-\nge Net versus pre-training size. Res Nets per-\nform better with smaller pre-training datasets\nbut plateau sooner than Vi T, which performs\nbetter with larger pre-training. Vi T-b is Vi T-B\nwith all hidden dimensions halved.",
      "start_pos": 23050,
      "end_pos": 23770,
      "size": 719
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_41",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ng size. Res Nets per-\nform better with smaller pre-training datasets\nbut plateau sooner than Vi T, which performs\nbetter with larger pre-training. Vi T-b is Vi T-B\nwith all hidden dimensions halved.\n103\n90\nTransfer accuracy [%]\nAverage-5\nTransformer (Vi T)\nRes Net (Bi T)\nHybrid\n103\n75\n85\nImage Net\nTransformer (Vi T)\nRes Net (Bi T)\nHybrid\nTotal pre-training compute [exa FLOPs]\nFigure 5: Performance versus cost for different architectures: Vision Transformers, Res Nets, and\nhybrids. Vision Transformers generally outperform Res Nets with the same computational budget.\nHybrids improve upon pure Transformers for smaller model sizes, but the gap vanishes for larger\nmodels.\nregion spanned by Bi T models of different sizes.",
      "start_pos": 23570,
      "end_pos": 24297,
      "size": 726
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_42",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Res Nets with the same computational budget.\nHybrids improve upon pure Transformers for smaller model sizes, but the gap vanishes for larger\nmodels.\nregion spanned by Bi T models of different sizes. The Bi T CNNs outperform Vi T on Image Net, but\nwith the larger datasets, Vi T overtakes.\nSecond, we train our models on random subsets of 9M, 30M, and 90M as well as the full JFT-\n300M dataset. We do not perform additional regularization on the smaller subsets and use the same\nhyper-parameters for all settings. This way, we assess the intrinsic model properties, and not the\neffect of regularization. We do, however, use early-stopping, and report the best validation accuracy\nachieved during training. To save compute, we report few-shot linear accuracy instead of full ne-\ntuning accuracy.",
      "start_pos": 24097,
      "end_pos": 24892,
      "size": 793
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_43",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ization. We do, however, use early-stopping, and report the best validation accuracy\nachieved during training. To save compute, we report few-shot linear accuracy instead of full ne-\ntuning accuracy. Figure 4 contains the results. Vision Transformers overt more than Res Nets with\ncomparable computational cost on smaller datasets. For example, Vi T-B/32 is slightly faster than\nRes Net50; it performs much worse on the 9M subset, but better on 90M+ subsets. The same is true\nfor Res Net152x2 and Vi T-L/16. This result reinforces the intuition that the convolutional inductive\nbias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from\ndata is sufcient, even benecial.",
      "start_pos": 24692,
      "end_pos": 25406,
      "size": 713
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_44",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "esult reinforces the intuition that the convolutional inductive\nbias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from\ndata is sufcient, even benecial.\nOverall, the few-shot results on Image Net (Figure 4), as well as the low-data results on VTAB\n(Table 2) seem promising for very low-data transfer. Further analysis of few-shot properties of Vi T\nis an exciting direction of future work.\n\nPublished as a conference paper at ICLR 2021\n4.4\nWe perform a controlled scaling study of different models by evaluating transfer performance from\nJFT-300M. In this setting data size does not bottleneck the models performances, and we assess\nperformance versus pre-training cost of each model.",
      "start_pos": 25206,
      "end_pos": 25938,
      "size": 731
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_45",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "erent models by evaluating transfer performance from\nJFT-300M. In this setting data size does not bottleneck the models performances, and we assess\nperformance versus pre-training cost of each model. The model set includes: 7 Res Nets, R50x1,\nR50x2 R101x1, R152x1, R152x2, pre-trained for 7 epochs, plus R152x2 and R200x3 pre-trained\nfor 14 epochs; 6 Vision Transformers, Vi T-B/32, B/16, L/32, L/16, pre-trained for 7 epochs, plus\nL/16 and H/14 pre-trained for 14 epochs; and 5 hybrids, R50+Vi T-B/32, B/16, L/32, L/16 pre-\ntrained for 7 epochs, plus R50+Vi T-L/16 pre-trained for 14 epochs (for hybrids, the number at the\nend of the model name stands not for the patch size, but for the total dowsampling ratio in the Res Net\nbackbone).",
      "start_pos": 25738,
      "end_pos": 26477,
      "size": 738
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_46",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "epochs, plus R50+Vi T-L/16 pre-trained for 14 epochs (for hybrids, the number at the\nend of the model name stands not for the patch size, but for the total dowsampling ratio in the Res Net\nbackbone).\nFigure 5 contains the transfer performance versus total pre-training compute (see Appendix D.4\nfor details on computational costs). Detailed results per model are provided in Table 6 in the Ap-\npendix. A few patterns can be observed. First, Vision Transformers dominate Res Nets on the\nperformance/compute trade-off. Vi T uses approximately 2 4 less compute to attain the same\nperformance (average over 5 datasets). Second, hybrids slightly outperform Vi T at small compu-\ntational budgets, but the difference vanishes for larger models.",
      "start_pos": 26277,
      "end_pos": 27015,
      "size": 737
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_47",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ly 2 4 less compute to attain the same performance (average over 5 datasets). Second, hybrids slightly outperform Vi T at small compu- tational budgets, but the difference vanishes for larger models. This result is somewhat surprising, since one might expect convolutional local feature processing to assist Vi T at any size. Third, Vision Transformers appear not to saturate within the range tried, motivating future scaling efforts. 4.5 Input Attention Figure 6: Representative ex- amples of attention from the output token to the input space. See Appendix D.6 for details. To begin to understand how the Vision Transformer processes im- age data, we analyze its internal representations. The rst layer of the Vision Transformer linearly projects the attened patches into a lower-dimensional",
      "start_pos": 26815,
      "end_pos": 27608,
      "size": 793
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_48",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "stand how the Vision Transformer processes im-\nage data, we analyze its internal representations. The rst layer of\nthe Vision Transformer linearly projects the attened patches into a\nlower-dimensional space (Eq. 1). Figure 7 (left) shows the top prin-\ncipal components of the the learned embedding lters. The com-\nponents resemble plausible basis functions for a low-dimensional\nrepresentation of the ne structure within each patch.\nAfter the projection, a learned position embedding is added to the\npatch representations. Figure 7 (center) shows that the model learns\nto encode distance within the image in the similarity of position em-\nbeddings, i.e. closer patches tend to have more similar position em-\nbeddings.",
      "start_pos": 27408,
      "end_pos": 28126,
      "size": 717
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_49",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ons. Figure 7 (center) shows that the model learns\nto encode distance within the image in the similarity of position em-\nbeddings, i.e. closer patches tend to have more similar position em-\nbeddings. Further, the row-column structure appears; patches in the\nsame row/column have similar embeddings. Finally, a sinusoidal\nstructure is sometimes apparent for larger grids (Appendix D). That\nthe position embeddings learn to represent 2D image topology ex-\nplains why hand-crafted 2D-aware embedding variants do not yield\nimprovements (Appendix D.3).\nSelf-attention allows Vi T to integrate information across the entire\nimage even in the lowest layers. We investigate to what degree\nthe network makes use of this capability.",
      "start_pos": 27926,
      "end_pos": 28649,
      "size": 722
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_50",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ovements (Appendix D.3). Self-attention allows Vi T to integrate information across the entire image even in the lowest layers. We investigate to what degree the network makes use of this capability. Specically, we compute the average distance in image space across which information is integrated, based on the attention weights (Figure 7, right). This attention distance is analogous to receptive eld size in CNNs. We nd that some heads attend to most of the image already in the lowest layers, showing that the ability to integrate information globally is indeed used by the model. Other attention heads have consistently small attention distances in the low layers. This highly localized attention is less pronounced in hybrid models that apply a Res Net before the Transformer (Figure 7,",
      "start_pos": 28449,
      "end_pos": 29241,
      "size": 792
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_51",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ttention heads have consistently small attention distances in the low layers. This highly localized attention is less pronounced in hybrid models that apply a Res Net before the Transformer (Figure 7, right), suggesting that it may serve a similar function as early convolutional layers in CNNs. Further, the attention distance increases with network depth. Globally, we nd that the model attends to image regions that are semantically relevant for classication (Figure 6). 4.6 SELF-SUPERVISION Transformers show impressive performance on NLP tasks. However, much of their success stems not only from their excellent scalability but also from large scale self-supervised pre-training (Devlin Published as a conference paper at ICLR 2021 RGB embedding filters (first 28 principal components) 2 4 6",
      "start_pos": 29041,
      "end_pos": 29837,
      "size": 796
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_52",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "from their excellent scalability but also from large scale self-supervised pre-training (Devlin\n\nPublished as a conference paper at ICLR 2021\nRGB embedding filters\n(first 28 principal components)\n2\n4\n6\nInput patch column\n2\n4\n6\nInput patch row\nPosition embedding similarity\n1\nCosine similarity\n5\n15\nNetwork depth (layer)\n20\n60\n100\nMean attention distance (pixels)\nVi T-L/16\nHead 1\nHead 2\nHead 3\n...\nFigure 7: Left: Filters of the initial linear embedding of RGB values of Vi T-L/32. Center: Sim-\nilarity of position embeddings of Vi T-L/32. Tiles show the cosine similarity between the position\nembedding of the patch with the indicated row and column and the position embeddings of all other\npatches. Right: Size of attended area by head and network depth.",
      "start_pos": 29637,
      "end_pos": 30394,
      "size": 756
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_53",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "sine similarity between the position\nembedding of the patch with the indicated row and column and the position embeddings of all other\npatches. Right: Size of attended area by head and network depth. Each dot shows the mean attention\ndistance across images for one of 16 heads at one layer. See Appendix D.6 for details.\net al., 2019; Radford et al., 2018). We also perform a preliminary exploration on masked patch\nprediction for self-supervision, mimicking the masked language modeling task used in BERT. With\nself-supervised pre-training, our smaller Vi T-B/16 model achieves 79.9% accuracy on Image Net, a\nsignicant improvement of 2% to training from scratch, but still 4% behind supervised pre-training.\nAppendix B.1.2 contains further details.",
      "start_pos": 30194,
      "end_pos": 30944,
      "size": 749
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_54",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ler Vi T-B/16 model achieves 79.9% accuracy on Image Net, a\nsignicant improvement of 2% to training from scratch, but still 4% behind supervised pre-training.\nAppendix B.1.2 contains further details. We leave exploration of contrastive pre-training (Chen\net al., 2020b; He et al., 2020; Bachman et al., 2019; Henaff et al., 2020) to future work.\nWe have explored the direct application of Transformers to image recognition. Unlike prior works\nusing self-attention in computer vision, we do not introduce image-specic inductive biases into\nthe architecture apart from the initial patch extraction step. Instead, we interpret an image as a\nsequence of patches and process it by a standard Transformer encoder as used in NLP.",
      "start_pos": 30744,
      "end_pos": 31467,
      "size": 722
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_55",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ive biases into\nthe architecture apart from the initial patch extraction step. Instead, we interpret an image as a\nsequence of patches and process it by a standard Transformer encoder as used in NLP. This simple,\nyet scalable, strategy works surprisingly well when coupled with pre-training on large datasets.\nThus, Vision Transformer matches or exceeds the state of the art on many image classication\ndatasets, whilst being relatively cheap to pre-train.\nWhile these initial results are encouraging, many challenges remain. One is to apply Vi T to other\ncomputer vision tasks, such as detection and segmentation. Our results, coupled with those in Carion\net al. (2020), indicate the promise of this approach. Another challenge is to continue exploring self-\nsupervised pre-training methods.",
      "start_pos": 31267,
      "end_pos": 32059,
      "size": 791
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_56",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ion and segmentation. Our results, coupled with those in Carion et al. (2020), indicate the promise of this approach. Another challenge is to continue exploring self- supervised pre-training methods. Our initial experiments show improvement from self-supervised pre-training, but there is still large gap between self-supervised and large-scale supervised pre- training. Finally, further scaling of Vi T would likely lead to improved performance. The work was performed in Berlin, Zurich, and Amsterdam. We thank many colleagues at Google for their help, in particular Andreas Steiner for crucial help with the infrastructure and the open- source release of the code; Joan Puigcerver and Maxim Neumann for help with the large-scale training infrastructure; Dmitry Lepikhin, Aravindh Mahendran,",
      "start_pos": 31859,
      "end_pos": 32652,
      "size": 793
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_57",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ial help with the infrastructure and the open-\nsource release of the code; Joan Puigcerver and Maxim Neumann for help with the large-scale\ntraining infrastructure; Dmitry Lepikhin, Aravindh Mahendran, Daniel Keysers, Mario Lucic, Noam\nShazeer, and Colin Raffel for useful discussions.\nSamira Abnar and Willem Zuidema. Quantifying attention ow in transformers. In ACL, 2020.\nPhilip Bachman, R Devon Hjelm, and William Buchwalter. Learning representations by maximizing\nmutual information across views. In Neur IPS, 2019.\n\nPublished as a conference paper at ICLR 2021\nAlexei Baevski and Michael Auli. Adaptive input representations for neural language modeling. In\nICLR, 2019.\nI. Bello, B. Zoph, Q. Le, A. Vaswani, and J. Shlens. Attention augmented convolutional networks.\nIn ICCV, 2019.",
      "start_pos": 32452,
      "end_pos": 33239,
      "size": 786
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_58",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "chael Auli. Adaptive input representations for neural language modeling. In\nICLR, 2019.\nI. Bello, B. Zoph, Q. Le, A. Vaswani, and J. Shlens. Attention augmented convolutional networks.\nIn ICCV, 2019.\nLucas Beyer, Olivier J. Henaff, Alexander Kolesnikov, Xiaohua Zhai, and Aaron van den Oord. Are\nwe done with imagenet? ar Xiv, 2020.\nTom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal,\nArvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are\nfew-shot learners. ar Xiv, 2020.\nNicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, and\nSergey Zagoruyko. End-to-end object detection with transformers. In ECCV, 2020.\nMark Chen, Alec Radford, Rewon Child, Jeff Wu, and Heewoo Jun.",
      "start_pos": 33039,
      "end_pos": 33821,
      "size": 781
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_59",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "briel Synnaeve, Nicolas Usunier, Alexander Kirillov, and\nSergey Zagoruyko. End-to-end object detection with transformers. In ECCV, 2020.\nMark Chen, Alec Radford, Rewon Child, Jeff Wu, and Heewoo Jun. Generative pretraining from\npixels. In ICML, 2020a.\nTing Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey E. Hinton. A simple framework\nfor contrastive learning of visual representations. In ICML, 2020b.\nYen-Chun Chen, Linjie Li, Licheng Yu, Ahmed El Kholy, Faisal Ahmed, Zhe Gan, Yu Cheng, and\nJingjing Liu. UNITER: UNiversal Image-TExt Representation Learning. In ECCV, 2020c.\nRewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse\ntransformers. ar Xiv, 2019.\nJean-Baptiste Cordonnier, Andreas Loukas, and Martin Jaggi.",
      "start_pos": 33621,
      "end_pos": 34390,
      "size": 768
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_60",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "n ECCV, 2020c. Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse transformers. ar Xiv, 2019. Jean-Baptiste Cordonnier, Andreas Loukas, and Martin Jaggi. On the relationship between self- attention and convolutional layers. In ICLR, 2020. J. Deng, W. Dong, R. Socher, L. Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical image database. In CVPR, 2009. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In NAACL, 2019. Josip Djolonga, Jessica Yung, Michael Tschannen, Rob Romijnders, Lucas Beyer, Alexander Kolesnikov, Joan Puigcerver, Matthias Minderer, Alexander DAmour, Dan Moldovan, Sylvan Gelly, Neil Houlsby, Xiaohua Zhai, and Mario",
      "start_pos": 34190,
      "end_pos": 34986,
      "size": 796
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_61",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "sica Yung, Michael Tschannen, Rob Romijnders, Lucas Beyer, Alexander\nKolesnikov, Joan Puigcerver, Matthias Minderer, Alexander DAmour, Dan Moldovan, Sylvan\nGelly, Neil Houlsby, Xiaohua Zhai, and Mario Lucic. On robustness and transferability of convo-\nlutional neural networks. ar Xiv, 2020.\nKaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-\nnition. In CVPR, 2016.\nKaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick.\nMomentum contrast for\nunsupervised visual representation learning. In CVPR, 2020.\nJonathan Ho, Nal Kalchbrenner, Dirk Weissenborn, and Tim Salimans. Axial attention in multidi-\nmensional transformers. ar Xiv, 2019.\nHan Hu, Jiayuan Gu, Zheng Zhang, Jifeng Dai, and Yichen Wei. Relation networks for object\ndetection.",
      "start_pos": 34786,
      "end_pos": 35577,
      "size": 790
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_62",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "k Weissenborn, and Tim Salimans. Axial attention in multidi-\nmensional transformers. ar Xiv, 2019.\nHan Hu, Jiayuan Gu, Zheng Zhang, Jifeng Dai, and Yichen Wei. Relation networks for object\ndetection. In CVPR, 2018.\nHan Hu, Zheng Zhang, Zhenda Xie, and Stephen Lin. Local relation networks for image recognition.\nIn ICCV, 2019.\nZilong Huang, Xinggang Wang, Yunchao Wei, Lichao Huang, Humphrey Shi, Wenyu Liu, and\nThomas S. Huang. Ccnet: Criss-cross attention for semantic segmentation. In ICCV, 2020.\nOlivier J. Henaff, Aravind Srinivas, Jeffrey De Fauw, Ali Razavi, Carl Doersch, S. M. Ali Eslami,\nand Aaron van den Oord. Data-efcient image recognition with contrastive predictive coding. In\nICML, 2020.\n\nPublished as a conference paper at ICLR 2021\nSergey Ioffe and Christian Szegedy.",
      "start_pos": 35377,
      "end_pos": 36163,
      "size": 785
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_63",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Ali Eslami,\nand Aaron van den Oord. Data-efcient image recognition with contrastive predictive coding. In\nICML, 2020.\n\nPublished as a conference paper at ICLR 2021\nSergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by\nreducing internal covariate shift. 2015.\nDiederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\nAlexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Joan Puigcerver, Jessica Yung, Sylvain Gelly,\nand Neil Houlsby. Big transfer (Bi T): General visual representation learning. In ECCV, 2020.\nAlex Krizhevsky. Learning multiple layers of features from tiny images. Technical report, 2009.\nAlex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classication with deep convo-\nlutional neural networks.",
      "start_pos": 35963,
      "end_pos": 36762,
      "size": 798
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_64",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "earning multiple layers of features from tiny images. Technical report, 2009.\nAlex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classication with deep convo-\nlutional neural networks. In NIPS, 2012.\nY. Le Cun, B. Boser, J. Denker, D. Henderson, R. Howard, W. Hubbard, and L. Jackel. Backpropa-\ngation applied to handwritten zip code recognition. Neural Computation, 1:541551, 1989.\nDmitry Lepikhin, Hyouk Joong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang,\nMaxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models with conditional\ncomputation and automatic sharding. ar Xiv, 2020.\nLiunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, and Kai-Wei Chang. Visual BERT: A\nSimple and Performant Baseline for Vision and Language. In Arxiv, 2019.",
      "start_pos": 36562,
      "end_pos": 37352,
      "size": 789
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_65",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "and automatic sharding. ar Xiv, 2020.\nLiunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, and Kai-Wei Chang. Visual BERT: A\nSimple and Performant Baseline for Vision and Language. In Arxiv, 2019.\nFrancesco Locatello, Dirk Weissenborn, Thomas Unterthiner, Aravindh Mahendran, Georg Heigold,\nJakob Uszkoreit, Alexey Dosovitskiy, and Thomas Kipf. Object-centric learning with slot atten-\ntion. ar Xiv, 2020.\nJiasen Lu, Dhruv Batra, Devi Parikh, and Stefan Lee. Vi LBERT: Pretraining Task-Agnostic Visi-\nolinguistic Representations for Vision-and-Language Tasks. In Neur IPS. 2019.\nDhruv Mahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li,\nAshwin Bharambe, and Laurens van der Maaten.\nExploring the limits of weakly supervised\npretraining. In ECCV, 2018.\nM.",
      "start_pos": 37152,
      "end_pos": 37941,
      "size": 788
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_66",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li,\nAshwin Bharambe, and Laurens van der Maaten.\nExploring the limits of weakly supervised\npretraining. In ECCV, 2018.\nM. Nilsback and A. Zisserman. Automated ower classication over a large number of classes. In\nICVGIP, 2008.\nOmkar M. Parkhi, Andrea Vedaldi, Andrew Zisserman, and C. V. Jawahar. Cats and dogs. In CVPR,\n2012.\nNiki Parmar, Ashish Vaswani, Jakob Uszkoreit, Lukasz Kaiser, Noam Shazeer, Alexander Ku, and\nDustin Tran. Image transformer. In ICML, 2018.\nB. T. Polyak and A. B. Juditsky. Acceleration of stochastic approximation by averaging. SIAM\nJournal on Control and Optimization, 30(4):838855, 1992.\ndoi: 10.1137/0330046.\nURL\nhttps://doi.org/10.1137/0330046.",
      "start_pos": 37741,
      "end_pos": 38494,
      "size": 752
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_67",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "yak and A. B. Juditsky. Acceleration of stochastic approximation by averaging. SIAM\nJournal on Control and Optimization, 30(4):838855, 1992.\ndoi: 10.1137/0330046.\nURL\nhttps://doi.org/10.1137/0330046.\nSiyuan Qiao, Huiyu Wang, Chenxi Liu, Wei Shen, and Alan Yuille. Weight standardization. ar Xiv\npreprint ar Xiv:1903.10520, 2019.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language under-\nstanding with unsupervised learning. Technical Report, 2018.\nAlec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language\nmodels are unsupervised multitask learners. Technical Report, 2019.\nPrajit Ramachandran, Niki Parmar, Ashish Vaswani, Irwan Bello, Anselm Levskaya, and Jon Shlens.\nStand-alone self-attention in vision models.",
      "start_pos": 38294,
      "end_pos": 39078,
      "size": 783
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_68",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "e unsupervised multitask learners. Technical Report, 2019.\nPrajit Ramachandran, Niki Parmar, Ashish Vaswani, Irwan Bello, Anselm Levskaya, and Jon Shlens.\nStand-alone self-attention in vision models. In Neur IPS, 2019.\nChen Sun, Abhinav Shrivastava, Saurabh Singh, and Abhinav Gupta. Revisiting unreasonable ef-\nfectiveness of data in deep learning era. In ICCV, 2017.\nChen Sun, Austin Myers, Carl Vondrick, Kevin Murphy, and Cordelia Schmid. Videobert: A joint\nmodel for video and language representation learning. In ICCV, 2019.\n\nPublished as a conference paper at ICLR 2021\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy. In Neur IPS. 2019.\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou.",
      "start_pos": 38878,
      "end_pos": 39646,
      "size": 767
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_69",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "CLR 2021\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy. In Neur IPS. 2019.\nHugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy: Fixefcientnet. ar Xiv preprint ar Xiv:2003.08237, 2020.\nMichael Tschannen, Josip Djolonga, Marvin Ritter, Aravindh Mahendran, Neil Houlsby, Sylvain\nGelly, and Mario Lucic. Self-supervised learning of video-induced visual invariances. In Pro-\nceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), June\n2020.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,\nukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017.",
      "start_pos": 39446,
      "end_pos": 40198,
      "size": 751
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_70",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "rn Recognition (CVPR), June\n2020.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,\nukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017.\nHuiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh Chen.\nAxial-deeplab: Stand-alone axial-attention for panoptic segmentation. In ECCV, 2020a.\nHuiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh\nChen.\nAxial-deeplab: Stand-alone axial-attention for panoptic segmentation.\nar Xiv preprint\nar Xiv:2003.07853, 2020b.\nQiang Wang, Bei Li, Tong Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao.\nLearning deep transformer models for machine translation. In ACL, 2019.\nXiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He.",
      "start_pos": 39998,
      "end_pos": 40795,
      "size": 796
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_71",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao.\nLearning deep transformer models for machine translation. In ACL, 2019.\nXiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He. Non-local neural networks. In\nCVPR, 2018.\nDirk Weissenborn, Oscar Tackstrom, and Jakob Uszkoreit. Scaling autoregressive video models. In\nICLR, 2019.\nBichen Wu, Chenfeng Xu, Xiaoliang Dai, Alvin Wan, Peizhao Zhang, Masayoshi Tomizuka, Kurt\nKeutzer, and Peter Vajda. Visual transformers: Token-based image representation and processing\nfor computer vision. arxiv, 2020.\nYuxin Wu and Kaiming He. Group normalization. In ECCV, 2018.\nQizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V. Le. Self-training with noisy student\nimproves imagenet classication. In CVPR, 2020.",
      "start_pos": 40595,
      "end_pos": 41363,
      "size": 767
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_72",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Yuxin Wu and Kaiming He. Group normalization. In ECCV, 2018.\nQizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V. Le. Self-training with noisy student\nimproves imagenet classication. In CVPR, 2020.\nXiaohua Zhai, Avital Oliver, Alexander Kolesnikov, and Lucas Beyer. S4L: Self-Supervised Semi-\nSupervised Learning. In ICCV, 2019a.\nXiaohua Zhai, Joan Puigcerver, Alexander Kolesnikov, Pierre Ruyssen, Carlos Riquelme, Mario\nLucic, Josip Djolonga, Andre Susano Pinto, Maxim Neumann, Alexey Dosovitskiy, et al. A\nlarge-scale study of representation learning with the visual task adaptation benchmark. ar Xiv\npreprint ar Xiv:1910.04867, 2019b.\nHengshuang Zhao, Jiaya Jia, and Vladlen Koltun. Exploring self-attention for image recognition. In\nCVPR, 2020.",
      "start_pos": 41163,
      "end_pos": 41916,
      "size": 750
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_73",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ng with the visual task adaptation benchmark. ar Xiv preprint ar Xiv:1910.04867, 2019b. Hengshuang Zhao, Jiaya Jia, and Vladlen Koltun. Exploring self-attention for image recognition. In CVPR, 2020. Published as a conference paper at ICLR 2021 Models Dataset Epochs Base LR LR decay Weight decay Dropout Vi T-B/{16,32} JFT-300M 8 104 linear 0.1 0.0 Vi T-L/32 JFT-300M 6 104 linear 0.1 0.0 Vi T-L/16 JFT-300M 7/14 4 104 linear 0.1 0.0 Vi T-H/14 JFT-300M 3 104 linear 0.1 0.0 R50x{1,2} JFT-300M 103 linear 0.1 0.0 R101x1 JFT-300M 8 104 linear 0.1 0.0 R152x{1,2} JFT-300M 6 104 linear 0.1 0.0 R50+Vi T-B/{16,32} JFT-300M 8 104 linear 0.1 0.0 R50+Vi T-L/32 JFT-300M 2 104 linear 0.1 0.0 R50+Vi T-L/16 JFT-300M 7/14 4 104 linear 0.1 0.0 Vi T-B/{16,32} Image Net-21k 103 linear 0.03 0.1 Vi",
      "start_pos": 41716,
      "end_pos": 42499,
      "size": 783
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_74",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "inear\n0.1\n0.0\nR50+Vi T-B/{16,32}\nJFT-300M\n8  104\nlinear\n0.1\n0.0\nR50+Vi T-L/32\nJFT-300M\n2  104\nlinear\n0.1\n0.0\nR50+Vi T-L/16\nJFT-300M\n7/14\n4  104\nlinear\n0.1\n0.0\nVi T-B/{16,32}\nImage Net-21k\n103\nlinear\n0.03\n0.1\nVi T-L/{16,32}\nImage Net-21k\n30/90\nlinear\n0.03\n0.1\nVi T-\nImage Net\n3  103\ncosine\n0.3\n0.1\nTable 3: Hyperparameters for training. All models are trained with a batch size of 4096 and learn-\ning rate warmup of 10k steps. For Image Net we found it benecial to additionally apply gradient\nclipping at global norm 1. Training resolution is 224.\nMULTIHEAD SELF-ATTENTION\nStandard qkv self-attention (SA, Vaswani et al. (2017)) is a popular building block for neural archi-\ntectures. For each element in an input sequence z RND, we compute a weighted sum over all\nvalues v in the sequence.",
      "start_pos": 42299,
      "end_pos": 43089,
      "size": 789
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_75",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "attention (SA, Vaswani et al. (2017)) is a popular building block for neural archi-\ntectures. For each element in an input sequence z RND, we compute a weighted sum over all\nvalues v in the sequence. The attention weights Aij are based on the pairwise similarity between\ntwo elements of the sequence and their respective query qi and key kj representations.\n[q, k, v] = z Uqkv\nUqkv RD3Dh,\n(5)\nA = softmax\n\u0010\nqk/\np\nDh\n\u0011\nA RNN,\n(6)\nSA(z) = Av .\n(7)\nMultihead self-attention (MSA) is an extension of SA in which we run k self-attention operations,\ncalled heads, in parallel, and project their concatenated outputs. To keep compute and number of\nparameters constant when changing k, Dh (Eq. 5) is typically set to D/k.",
      "start_pos": 42889,
      "end_pos": 43603,
      "size": 713
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_76",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "k self-attention operations,\ncalled heads, in parallel, and project their concatenated outputs. To keep compute and number of\nparameters constant when changing k, Dh (Eq. 5) is typically set to D/k.\nMSA(z) = [SA1(z); SA2(z);    ; SAk(z)] Umsa\nUmsa Rk Dh D\n(8)\nB.1\nTRAINING\nTable 3 summarizes our training setups for our different models. We found strong regularization\nto be key when training models from scratch on Image Net. Dropout, when used, is applied after\nevery dense layer except for the the qkv-projections and directly after adding positional- to patch\nembeddings. Hybrid models are trained with the exact setup as their Vi T counterparts. Finally, all\ntraining is done on resolution 224.\nB.1.1\nFINE-TUNING\nWe ne-tune all Vi T models using SGD with a momentum of 0.9.",
      "start_pos": 43403,
      "end_pos": 44183,
      "size": 778
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_77",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "rid models are trained with the exact setup as their Vi T counterparts. Finally, all\ntraining is done on resolution 224.\nB.1.1\nFINE-TUNING\nWe ne-tune all Vi T models using SGD with a momentum of 0.9. We run a small grid search over\nlearning rates, see learning rate ranges in Table 4. To do so, we use small sub-splits from the training\nset (10% for Pets and Flowers, 2% for CIFAR, 1% Image Net) as development set and train on the\nremaining data. For nal results we train on the entire training set and evaluate on the respective\ntest data. For ne-tuning Res Nets and hybrid models we use the exact same setup, with the only\nexception of Image Net where we add another value 0.06 to the learning rate sweep.",
      "start_pos": 43983,
      "end_pos": 44692,
      "size": 708
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_78",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ate on the respective\ntest data. For ne-tuning Res Nets and hybrid models we use the exact same setup, with the only\nexception of Image Net where we add another value 0.06 to the learning rate sweep. Additionally,\n\nPublished as a conference paper at ICLR 2021\nDataset\nSteps\nBase LR\nImage Net\n20 000\n{0.003, 0.01, 0.03, 0.06}\nCIFAR100\n10 000\n{0.001, 0.003, 0.01, 0.03}\nCIFAR10\n10 000\n{0.001, 0.003, 0.01, 0.03}\nOxford-IIIT Pets\n{0.001, 0.003, 0.01, 0.03}\nOxford Flowers-102\n{0.001, 0.003, 0.01, 0.03}\nVTAB (19 tasks)\n2 500\n0.01\nTable 4: Hyperparameters for ne-tuning. All models are ne-tuned with cosine learning rate decay,\na batch size of 512, no weight decay, and grad clipping at global norm 1. If not mentioned otherwise,\nne-tuning resolution is 384.",
      "start_pos": 44492,
      "end_pos": 45247,
      "size": 754
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_79",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ne-tuning. All models are ne-tuned with cosine learning rate decay,\na batch size of 512, no weight decay, and grad clipping at global norm 1. If not mentioned otherwise,\nne-tuning resolution is 384.\nfor Res Nets we also run the setup of Kolesnikov et al. (2020) and select the best results across\nthis run and our sweep. Finally, if not mentioned otherwise, all ne-tuning experiments run at 384\nresolution (running ne-tuning at different resolution than training is common practice (Kolesnikov\net al., 2020)).\nWhen transferring Vi T models to another dataset, we remove the whole head (two linear layers) and\nreplace it by a single, zero-initialized linear layer outputting the number of classes required by the\ntarget dataset.",
      "start_pos": 45047,
      "end_pos": 45776,
      "size": 727
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_80",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Vi T models to another dataset, we remove the whole head (two linear layers) and\nreplace it by a single, zero-initialized linear layer outputting the number of classes required by the\ntarget dataset. We found this to be a little more robust than simply re-initializing the very last layer.\nFor VTAB we follow the protocol in Kolesnikov et al. (2020), and use the same hyperparameter\nsetting for all tasks. We use a learning rate of 0.01 and train for 2500 steps (Tab. 4). We chose this\nsetting by running a small sweep over two learning rates and two schedules, and selecting the setting\nwith the highest VTAB score on the 200-example validation sets. We follow the pre-processing used\nin Kolesnikov et al. (2020), except that we do not use task-specic input resolutions.",
      "start_pos": 45576,
      "end_pos": 46348,
      "size": 771
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_81",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ing the setting with the highest VTAB score on the 200-example validation sets. We follow the pre-processing used in Kolesnikov et al. (2020), except that we do not use task-specic input resolutions. Instead we nd that Vision Transformer benets most from a high resolution (384 384) for all tasks. B.1.2 SELF-SUPERVISION We employ the masked patch prediction objective for preliminary self-supervision experiments. To do so we corrupt 50% of patch embeddings by either replacing their embeddings with a learnable [mask] embedding (80%), a random other patch embedding (10%) or just keeping them as is (10%). This setup is very similar to the one used for language by Devlin et al. (2019). Finally, we predict the 3-bit, mean color (i.e., 512 colors in total) of every corrupted patch using their",
      "start_pos": 46148,
      "end_pos": 46943,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_82",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "as is\n(10%). This setup is very similar to the one used for language by Devlin et al. (2019). Finally, we\npredict the 3-bit, mean color (i.e., 512 colors in total) of every corrupted patch using their respective\npatch representations.\nWe trained our self-supervised model for 1M steps (ca. 14 epochs) with batch size 4096 on JFT. We\nuse Adam, with a base learning rate of 2104, warmup of 10k steps and cosine learning rate decay.\nAs prediction targets for pretraining we tried the following settings: 1) predicting only the mean,\n3bit color (i.e., 1 prediction of 512 colors), 2) predicting a 4  4 downsized version of the 16  16\npatch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch\nusing L2 (i.e., 256 regressions on the 3 RGB channels).",
      "start_pos": 46743,
      "end_pos": 47535,
      "size": 790
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_83",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "a 4  4 downsized version of the 16  16\npatch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch\nusing L2 (i.e., 256 regressions on the 3 RGB channels). Surprisingly, we found that all worked quite\nwell, though L2 was slightly worse. We report nal results only for option 1) because it has shown\nbest few-shot performance. We also experimented with 15% corruption rate as used by Devlin et al.\n(2019) but results were also slightly worse on our few-shot metrics.\nLastly, we would like to remark that our instantiation of masked patch prediction doesnt require\nsuch an enormous amount of pretraining nor a large dataset such as JFT in order to lead to sim-\nilar performance gains on Image Net classication.",
      "start_pos": 47335,
      "end_pos": 48088,
      "size": 752
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_84",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "stantiation of masked patch prediction doesnt require such an enormous amount of pretraining nor a large dataset such as JFT in order to lead to sim- ilar performance gains on Image Net classication. That is, we observed diminishing returns on downstream performance after 100k pretraining steps, and see similar gains when pretraining on Image Net. We report detailed results corresponding to the gures presented in the paper. Table 5 corresponds to Figure 3 from the paper and shows transfer performance of different Vi T models pre-trained on datasets of increasing size: Image Net, Image Net-21k, and JFT-300M. Table 6 corresponds to Published as a conference paper at ICLR 2021 Vi T-B/16 Vi T-B/32 Vi T-L/16 Vi T-L/32 Vi T-H/14 Image Net CIFAR-10 98.13 97.77 97.86 97.94 - CIFAR-100 87.13",
      "start_pos": 47888,
      "end_pos": 48681,
      "size": 793
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_85",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "et-21k, and JFT-300M. Table 6 corresponds to Published as a conference paper at ICLR 2021 Vi T-B/16 Vi T-B/32 Vi T-L/16 Vi T-L/32 Vi T-H/14 Image Net CIFAR-10 98.13 97.77 97.86 97.94 - CIFAR-100 87.13 86.31 86.35 87.07 - Image Net 77.91 73.38 76.53 71.16 - Image Net Rea L 83.57 79.56 82.19 77.83 - Oxford Flowers-102 89.49 85.43 89.66 86.36 - Oxford-IIIT-Pets 93.81 92.04 93.64 91.35 - Image Net-21k CIFAR-10 98.95 98.79 99.16 99.13 99.27 CIFAR-100 91.67 91.97 93.44 93.04 93.82 Image Net 83.97 81.28 85.15 80.99 85.13 Image Net Rea L 88.35 86.63 88.40 85.65 88.70 Oxford Flowers-102 99.38 99.11 99.61 99.19 99.51 Oxford-IIIT-Pets 94.43 93.02 94.73 93.09 94.82 JFT-300M CIFAR-10 99.00 98.61 99.38 99.19 99.50 CIFAR-100 91.87 90.49 94.04 92.52 94.55 Image Net 84.15 80.73 87.12 84.37 88.04 Image",
      "start_pos": 48481,
      "end_pos": 49276,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_86",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "11\n99.61\n99.19\n99.51\nOxford-IIIT-Pets\n94.43\n93.02\n94.73\n93.09\n94.82\nJFT-300M\nCIFAR-10\n99.00\n98.61\n99.38\n99.19\n99.50\nCIFAR-100\n91.87\n90.49\n94.04\n92.52\n94.55\nImage Net\n84.15\n80.73\n87.12\n84.37\n88.04\nImage Net Rea L\n88.85\n86.27\n89.99\n88.28\n90.33\nOxford Flowers-102\n99.56\n99.27\n99.56\n99.45\n99.68\nOxford-IIIT-Pets\n95.80\n93.40\n97.11\n95.83\n97.56\nTable 5: Top1 accuracy (in %) of Vision Transformer on various datasets when pre-trained on Im-\nage Net, Image Net-21k or JFT300M. These values correspond to Figure 3 in the main text. Models\nare ne-tuned at 384 resolution. Note that the Image Net results are computed without additional\ntechniques (Polyak averaging and 512 resolution images) used to achieve results in Table 2.",
      "start_pos": 49076,
      "end_pos": 49794,
      "size": 717
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_87",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ext. Models are ne-tuned at 384 resolution. Note that the Image Net results are computed without additional techniques (Polyak averaging and 512 resolution images) used to achieve results in Table 2. Model Epochs Image Net Image Net Rea L CIFAR-10 CIFAR-100 Pets Flowers exa FLOPs Vi T-B/32 80.73 86.27 98.61 90.49 93.40 99.27 Vi T-B/16 84.15 88.85 99.00 91.87 95.80 99.56 Vi T-L/32 84.37 88.28 99.19 92.52 95.83 99.45 Vi T-L/16 86.30 89.43 99.38 93.46 96.81 99.66 Vi T-L/16 87.12 89.99 99.38 94.04 97.11 99.56 Vi T-H/14 88.08 90.36 99.50 94.71 97.11 99.71 Res Net50x1 77.54 84.56 97.67 86.07 91.11 94.26 Res Net50x2 82.12 87.94 98.29 89.20 93.43 97.02 Res Net101x1 80.67 87.07 98.48 89.17 94.08 95.95 Res Net152x1 81.88 87.96 98.82 90.22 94.17 96.94 Res Net152x2 84.97 89.69 99.06 92.05 95.37",
      "start_pos": 49594,
      "end_pos": 50387,
      "size": 793
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_88",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "91.11 94.26 Res Net50x2 82.12 87.94 98.29 89.20 93.43 97.02 Res Net101x1 80.67 87.07 98.48 89.17 94.08 95.95 Res Net152x1 81.88 87.96 98.82 90.22 94.17 96.94 Res Net152x2 84.97 89.69 99.06 92.05 95.37 98.62 Res Net152x2 85.56 89.89 99.24 91.92 95.75 98.75 Res Net200x3 87.22 90.15 99.34 93.53 96.32 99.04 R50x1+Vi T-B/32 84.90 89.15 99.01 92.24 95.75 99.46 R50x1+Vi T-B/16 85.58 89.65 99.14 92.63 96.65 99.40 R50x1+Vi T-L/32 85.68 89.04 99.24 92.93 96.97 99.43 R50x1+Vi T-L/16 86.60 89.72 99.18 93.64 97.03 99.40 R50x1+Vi T-L/16 87.12 89.76 99.31 93.89 97.36 99.11 Table 6: Detailed results of model scaling experiments. These correspond to Figure 5 in the main paper. Figure 5 from the paper and shows the transfer performance of Vi T, Res Net, and hybrid models of varying size, as well as the",
      "start_pos": 50187,
      "end_pos": 50982,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_89",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "odel scaling experiments. These correspond to Figure 5 in the main paper. Figure 5 from the paper and shows the transfer performance of Vi T, Res Net, and hybrid models of varying size, as well as the estimated computational cost of their pre-training. D.1 SGD VS. ADAM FOR RESNETS Res Nets are typically trained with SGD and our use of Adam as optimizer is quite unconventional. Here we show the experiments that motivated this choice. Namely, we compare the ne-tuning performance of two Res Nets 50x1 and 152x2 pre-trained on JFT with SGD and Adam. For SGD, we use the hyperparameters recommended by Kolesnikov et al. (2020). Results are presented Published as a conference paper at ICLR 2021 Res Net50 Res Net152x2 Dataset Adam SGD Adam SGD Image Net 77.54 78.24 84.97 84.37 CIFAR10 97.67",
      "start_pos": 50782,
      "end_pos": 51573,
      "size": 791
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_90",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "commended by Kolesnikov et al. (2020). Results are presented\n\nPublished as a conference paper at ICLR 2021\nRes Net50\nRes Net152x2\nDataset\nAdam\nSGD\nAdam\nSGD\nImage Net\n77.54\n78.24\n84.97\n84.37\nCIFAR10\n97.67\n97.46\n99.06\n99.07\nCIFAR100\n86.07\n85.17\n92.05\n91.06\nOxford-IIIT Pets\n91.11\n91.00\n95.37\n94.79\nOxford Flowers-102\n94.26\n92.06\n98.62\n99.32\nAverage\n89.33\n88.79\n94.01\n93.72\nTable 7: Fine-tuning Res Net models pre-trained with Adam and SGD.\n101\nRelative Compute\n0.2\n0.3\n0.4\n0.5\n0.6\nImage Net 5shot\nModels\nAll\nDepth\nPatch size\nWidth MLP\nWidth\n101\nRelative Compute\n0.4\n0.5\n0.6\n0.7\n0.8\nAverage 5shot\nModels\nAll\nDepth\nPatch size\nWidth MLP\nWidth\nFigure 8: Scaling different model dimensions of the Vision Transformer.\nin Table 7.",
      "start_pos": 51373,
      "end_pos": 52095,
      "size": 721
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_91",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "Width MLP\nWidth\n101\nRelative Compute\n0.4\n0.5\n0.6\n0.7\n0.8\nAverage 5shot\nModels\nAll\nDepth\nPatch size\nWidth MLP\nWidth\nFigure 8: Scaling different model dimensions of the Vision Transformer.\nin Table 7. Adam pre-training outperforms SGD pre-training on most datasets and on average.\nThis justies the choice of Adam as the optimizer used to pre-train Res Nets on JFT. Note that the\nabsolute numbers are lower than those reported by Kolesnikov et al. (2020), since we pre-train only\nfor 7 epochs, not 30.\nD.2\nWe ran ablations on scaling different dimensions of the Transformer architecture to nd out which\nare best suited for scaling to very large models. Figure 8 shows 5-shot performance on Image Net\nfor different congurations.",
      "start_pos": 51895,
      "end_pos": 52621,
      "size": 724
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_92",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "aling different dimensions of the Transformer architecture to nd out which\nare best suited for scaling to very large models. Figure 8 shows 5-shot performance on Image Net\nfor different congurations. All congurations are based on a Vi T model with 8 layers, D = 1024,\nDMLP = 2048 and a patch size of 32, the intersection of all lines. We can see that scaling the\ndepth results in the biggest improvements which are clearly visible up until 64 layers. However,\ndiminishing returns are already visible after 16 layers. Interestingly, scaling the width of the net-\nwork seems to result in the smallest changes. Decreasing the patch size and thus increasing the\neffective sequence length shows surprisingly robust improvements without introducing parameters.",
      "start_pos": 52421,
      "end_pos": 53176,
      "size": 754
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_93",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "e net- work seems to result in the smallest changes. Decreasing the patch size and thus increasing the effective sequence length shows surprisingly robust improvements without introducing parameters. These ndings suggest that compute might be a better predictor of performance than the number of parameters, and that scaling should emphasize depth over width if any. Overall, we nd that scaling all dimensions proportionally results in robust improvements. D.3 We ran ablations on different ways of encoding spatial information using positional embedding. We tried the following cases: Providing no positional information: Considering the inputs as a bag of patches. 1-dimensional positional embedding: Considering the inputs as a sequence of patches in the raster order (default across all other",
      "start_pos": 52976,
      "end_pos": 53772,
      "size": 796
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_94",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "no positional information: Considering the inputs as a bag of patches.\n 1-dimensional positional embedding: Considering the inputs as a sequence of patches in\nthe raster order (default across all other experiments in this paper).\n 2-dimensional positional embedding: Considering the inputs as a grid of patches in two\ndimensions. In this case, two sets of embeddings are learned, each for one of the axes,\nX-embedding, and Y -embedding, each with size D/2. Then, based on the coordinate on\n\nPublished as a conference paper at ICLR 2021\nPos. Emb.\nDefault/Stem\nEvery Layer\nEvery Layer-Shared\nNo Pos. Emb.\n0.61382\nN/A\nN/A\n1-D Pos. Emb.\n0.64206\n0.63964\n0.64292\n2-D Pos. Emb.\n0.64001\n0.64046\n0.64022\nRel. Pos. Emb.",
      "start_pos": 53572,
      "end_pos": 54283,
      "size": 709
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_95",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "erence paper at ICLR 2021\nPos. Emb.\nDefault/Stem\nEvery Layer\nEvery Layer-Shared\nNo Pos. Emb.\n0.61382\nN/A\nN/A\n1-D Pos. Emb.\n0.64206\n0.63964\n0.64292\n2-D Pos. Emb.\n0.64001\n0.64046\n0.64022\nRel. Pos. Emb.\n0.64032\nN/A\nN/A\nTable 8: Results of the ablation study on positional embeddings with Vi T-B/16 model evaluated on\nImage Net 5-shot linear.\n2\n4\n6\n8\n10 11 12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n7 epochs, LR=0.0002, WD=0.01\n2\n4\n6\n8\n10 11 12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n7 epochs, LR=0.0004, WD=0.1\n2\n4\n6\n8\n10 11 12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n14 epochs, LR=0.0004, WD=0.1\n1\nCosine similarity\nFigure 9: Position embeddings of models trained with different hyperparameters.",
      "start_pos": 54083,
      "end_pos": 54860,
      "size": 776
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_96",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "12 13 14\nInput patch column\n2\n4\n6\n8\n10\n12\n14\nInput patch row\nVi T-L16\n14 epochs, LR=0.0004, WD=0.1\n1\nCosine similarity\nFigure 9: Position embeddings of models trained with different hyperparameters.\nthe path in the input, we concatenate the X and Y embedding to get the nal positional\nembedding for that patch.\n Relative positional embeddings: Considering the relative distance between patches to en-\ncode the spatial information as instead of their absolute position. To do so, we use 1-\ndimensional Relative Attention, in which we dene the relative distance all possible pairs\nof patches. Thus, for every given pair (one as query, and the other as key/value in the at-\ntention mechanism), we have an offset pq pk, where each offset is associated with an\nembedding.",
      "start_pos": 54660,
      "end_pos": 55428,
      "size": 766
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_97",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "sible pairs of patches. Thus, for every given pair (one as query, and the other as key/value in the at- tention mechanism), we have an offset pq pk, where each offset is associated with an embedding. Then, we simply run extra attention, where we use the original query (the content of query), but use relative positional embeddings as keys. We then use the log- its from the relative attention as a bias term and add it to the logits of the main attention (content-based attention) before applying the softmax. In addition to different ways of encoding spatial information, we also tried different ways of in- corporating this information in our model. For the 1-dimensional and 2-dimensional positional embeddings, we tried three different cases: (1) add positional embeddings to the inputs right",
      "start_pos": 55228,
      "end_pos": 56025,
      "size": 797
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_98",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ways of in- corporating this information in our model. For the 1-dimensional and 2-dimensional positional embeddings, we tried three different cases: (1) add positional embeddings to the inputs right after the stem of them model and before feeding the inputs to the Transformer encoder (default across all other experiments in this paper); (2) learn and add positional embeddings to the inputs at the beginning of each layer; (3) add a learned positional embeddings to the inputs at the beginning of each layer (shared between layers). Table 8 summarizes the results from this ablation study on a Vi T-B/16 model. As we can see, while there is a large gap between the performances of the model with no positional embedding and mod- els with positional embedding, there is little to no difference",
      "start_pos": 55825,
      "end_pos": 56620,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_99",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "a Vi T-B/16 model. As we can see, while\nthere is a large gap between the performances of the model with no positional embedding and mod-\nels with positional embedding, there is little to no difference between different ways of encoding\npositional information. We speculate that since our Transformer encoder operates on patch-level\ninputs, as opposed to pixel-level, the differences in how to encode spatial information is less impor-\ntant. More precisely, in patch-level inputs, the spatial dimensions are much smaller than the original\npixel-level inputs, e.g., 14  14 as opposed to 224  224, and learning to represent the spatial re-\nlations in this resolution is equally easy for these different positional encoding strategies.",
      "start_pos": 56420,
      "end_pos": 57153,
      "size": 731
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_100",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ginal\npixel-level inputs, e.g., 14  14 as opposed to 224  224, and learning to represent the spatial re-\nlations in this resolution is equally easy for these different positional encoding strategies. Even so,\nthe specic pattern of position embedding similarity learned by the network depends on the training\nhyperparameters (Figure 9).\n\nPublished as a conference paper at ICLR 2021\n5\n15\nNetwork depth (layer)\n20\n60\n100\nMean attention distance (pixels)\nVi T-L/16\nHead 1\nHead 2\nHead 3\n...\n5\n15\nNetwork depth (layer)\n20\n60\n100\nR50x1 + Vi T-L/16\nHead 1\nHead 2\nHead 3\n...\nFigure 10: Size of attended area by head and network depth. Attention distance was computed for\n128 example images by averaging the distance between the query pixel and all other pixels, weighted\nby the attention weight.",
      "start_pos": 56953,
      "end_pos": 57741,
      "size": 787
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_101",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "tended area by head and network depth. Attention distance was computed for\n128 example images by averaging the distance between the query pixel and all other pixels, weighted\nby the attention weight. Each dot shows the mean attention distance across images for one of 16\nheads at one layer. Image width is 224 pixels.\nD.4\nWe are also interested in real-world speed of the architectures on our hardware, which is not always\nwell predicted by theoretical FLOPs due to details like lane widths and cache sizes. For this purpose,\nwe perform timing of inference speed for the main models of interest, on a TPUv3 accelerator; the\ndifference between inference and backprop speed is a constant model-independent factor.",
      "start_pos": 57541,
      "end_pos": 58253,
      "size": 711
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_102",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "this purpose,\nwe perform timing of inference speed for the main models of interest, on a TPUv3 accelerator; the\ndifference between inference and backprop speed is a constant model-independent factor.\nFigure 11 (left) shows how many images one core can handle per second, across various input sizes.\nEvery single point refers to the peak performance measured across a wide range of batch-sizes. As\ncan be seen, the theoretical bi-quadratic scaling of Vi T with image size only barely starts happening\nfor the largest models at the largest resolutions.\nAnother quantity of interest is the largest batch-size each model can t onto a core, larger being\nbetter for scaling to large datasets. Figure 11 (right) shows this quantity for the same set of models.",
      "start_pos": 58053,
      "end_pos": 58806,
      "size": 752
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_103",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "other quantity of interest is the largest batch-size each model can t onto a core, larger being better for scaling to large datasets. Figure 11 (right) shows this quantity for the same set of models. This shows that large Vi T models have a clear advantage in terms of memory-efciency over Res Net models. D.5 Axial Attention (Huang et al., 2020; Ho et al., 2019) is a simple, yet effective technique to run self- attention on large inputs that are organized as multidimensional tensors. The general idea of axial attention is to perform multiple attention operations, each along a single axis of the input tensor, instead of applying 1-dimensional attention to the attened version of the input. In axial attention, each attention mixes information along a particular axis, while keeping",
      "start_pos": 58606,
      "end_pos": 59393,
      "size": 787
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_104",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "e axis of the input tensor, instead of applying 1-dimensional attention to the attened version of the input. In axial attention, each attention mixes information along a particular axis, while keeping information along the other axes independent. Along this line, Wang et al. (2020b) proposed the Axial Res Net model in which all the convolutions with kernel size 3 3 in a Res Net50 are replaced by axial self-attention, i.e. a row and column attention, augmented by relative positional encoding. We have implemented Axial Res Net as a baseline model.3. Moreover, we have modied Vi T to process inputs in the 2-dimensional shape, instead of a 1- dimensional sequence of patches, and incorporate Axial Transformer blocks, in which instead of 3Our implementation is based on the open-sourced Py",
      "start_pos": 59193,
      "end_pos": 59985,
      "size": 792
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_105",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "ess inputs in the 2-dimensional shape, instead of a 1- dimensional sequence of patches, and incorporate Axial Transformer blocks, in which instead of 3Our implementation is based on the open-sourced Py Torch implementation in https://github.com/ csrhddlam/axial-deeplab. In our experiments, we reproduced the scores reported in (Wang et al., 2020b) in terms of accuracy, however, our implementation, similar to the open-source implementation, is very slow on TPUs. Therefore, we were not able to use it for extensive large-scale experiments. These may be unlocked by a carefully optimized implementation. Published as a conference paper at ICLR 2021 128 384 Input size [px] 103 Peak inference speed [img/sec/core] 128 384 Input size [px] 103 Largest per-core batch-size R50x1 R50x2 Vi T-B/32 Vi",
      "start_pos": 59785,
      "end_pos": 60579,
      "size": 794
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_106",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "mentation. Published as a conference paper at ICLR 2021 128 384 Input size [px] 103 Peak inference speed [img/sec/core] 128 384 Input size [px] 103 Largest per-core batch-size R50x1 R50x2 Vi T-B/32 Vi T-L/32 Vi T-B/16 Vi T-L/16 Vi T-H/14 R152x4 Figure 11: Left: Real wall-clock timings of various architectures across input sizes. Vi T models have speed comparable to similar Res Nets. Right: Largest per-core batch-size tting on device with various architectures across input sizes. Vi T models are clearly more memory-efcient. a self-attention followed by an MLP, we have a a row-self-attention plus an MLP followed by a column-self-attention plus an MLP. Total compute [exa FLOPs] 0.500 0.525 0.550 0.575 0.600 0.625 0.650 Image Net 5-shot linear top-1 accuracy Axial Vi T-B/16 Axial Vi T-B/32",
      "start_pos": 60379,
      "end_pos": 61175,
      "size": 796
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_107",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "n plus an MLP followed by a column-self-attention plus an MLP. Total compute [exa FLOPs] 0.500 0.525 0.550 0.575 0.600 0.625 0.650 Image Net 5-shot linear top-1 accuracy Axial Vi T-B/16 Axial Vi T-B/32 Vi T-B/16 Vi T-B/32 Res Net50 Axial Res Net50 103 Peak inference speed [img/sec/core] 0.500 0.525 0.550 0.575 0.600 0.625 0.650 Image Net 5-shot linear top-1 accuracy Axial Vi T-B/16 Axial Vi T-B/32 Vi T-B/16 Vi T-B/32 Res Net50 Axial Res Net50 Figure 12: Performance of Axial-Attention based models, in terms of top-1 accuracy on Image Net 5-shot linear, versus their speed in terms of number of FLOPs (left) and inference time (left). Figure 12, present the performance of Axial Res Net, Axial-Vi T-B/32 and Axial-Vi T-B/16 on Ima- ge Net 5shot linear, when pretrained on JFT dataset, verses",
      "start_pos": 60975,
      "end_pos": 61770,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_108",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "of FLOPs (left) and inference time (left).\nFigure 12, present the performance of Axial Res Net, Axial-Vi T-B/32 and Axial-Vi T-B/16 on Ima-\nge Net 5shot linear, when pretrained on JFT dataset, verses the pretraining compute, both in terms of\nnumber of FLOPs and inference time (example per seconds). As we can see, both Axial-Vi T-B/32\nand Axial-Vi T-B/16 do better than their Vi T-B counterpart in terms of performance, but it comes at\nthe cost of more compute. This is because in Axial-Vi T models, each Transformer block with global\nself-attention is replaced by two Axial Transformer blocks, one with row and one with column self-\nattention and although the sequence length that self-attention operates on is smaller in axial case,\nthere is a extra MLP per Axial-Vi T block.",
      "start_pos": 61570,
      "end_pos": 62350,
      "size": 778
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_109",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "nsformer blocks, one with row and one with column self- attention and although the sequence length that self-attention operates on is smaller in axial case, there is a extra MLP per Axial-Vi T block. For the Axial Res Net, although it looks reasonable in terms of accuracy/compute trade-off (Figure 12, left), the naive implementation is extremely slow on TPUs (Figure 12, right). D.6 To understand how Vi T uses self-attention to integrate information across the image, we analyzed the average distance spanned by attention weights at different layers (Figure 10). This attention distance is analogous to receptive eld size in CNNs. Average attention distance is highly variable Published as a conference paper at ICLR 2021 across heads in lower layers, with some heads attending to much of the",
      "start_pos": 62150,
      "end_pos": 62945,
      "size": 795
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_110",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "alogous to receptive eld size in CNNs. Average attention distance is highly variable\n\nPublished as a conference paper at ICLR 2021\nacross heads in lower layers, with some heads attending to much of the image, while others attend\nto small regions at or near the query location. As depth increases, attention distance increases for all\nheads. In the second half of the network, most heads attend widely across tokens.\nD.7\nTo compute maps of the attention from the output token to the input space (Figures 6 and 13), we\nused Attention Rollout (Abnar & Zuidema, 2020). Briey, we averaged attention weights of Vi T-\nL/16 across all heads and then recursively multiplied the weight matrices of all layers. This accounts\nfor the mixing of attention across tokens through all layers.",
      "start_pos": 62745,
      "end_pos": 63521,
      "size": 775
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_111",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": "veraged attention weights of Vi T- L/16 across all heads and then recursively multiplied the weight matrices of all layers. This accounts for the mixing of attention across tokens through all layers. D.8 Table 9 shows the scores attained on each of the VTAB-1k tasks. Table 9: Breakdown of VTAB-1k performance across tasks. Caltech101 CIFAR-100 DTD Flowers102 Pets Sun397 SVHN Camelyon Euro SAT Resisc45 Retinopathy Clevr-Count Clevr-Dist DMLab d Spr-Loc d Spr-Ori KITTI-Dist s NORB-Azim s NORB-Elev Mean Vi T-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6 Vi T-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3 Vi T-L/16 (I21k) 90.8 84.1 74.1 99.3 92.7 61.0 80.9 82.5 95.6",
      "start_pos": 63321,
      "end_pos": 64119,
      "size": 798
    },
    {
      "chunk_id": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl_chunk_112",
      "document": "an-image-is-worth-16x16-words-transformers-for-image-4jabumurhl",
      "text": ".3 84.5 33.2 51.2 77.6\nVi T-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3\nVi T-L/16 (I21k) 90.8 84.1 74.1 99.3 92.7 61.0 80.9 82.5 95.6 85.2 75.3 70.3 56.1 41.9 74.7 64.9 79.9 30.5 41.7 72.7\n\nPublished as a conference paper at ICLR 2021\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100\n102\n104\n106\n108\n110\n112\n114\n116\n118\n120\n122\n124\n126\n128\nFigure 13: Further example attention maps as in Figure 6 (random selection).",
      "start_pos": 63919,
      "end_pos": 64500,
      "size": 581
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_0",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "Attention Is All You Need Ashish Vaswani Google Brain avaswani@google.com Noam Shazeer Google Brain noam@google.com Niki Parmar Google Research nikip@google.com Jakob Uszkoreit Google Research usz@google.com Llion Jones Google Research llion@google.com Aidan N. Gomez University of Toronto aidan@cs.toronto.edu ukasz Kaiser Google Brain lukaszkaiser@google.com Illia Polosukhin illia.polosukhin@gmail.com Abstract The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and",
      "start_pos": 0,
      "end_pos": 786,
      "size": 786
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_1",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring signicantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English- to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.0 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the",
      "start_pos": 586,
      "end_pos": 1376,
      "size": 790
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_2",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "slation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\nIntroduction\nRecurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networks\nin particular, have been rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [29, 2, 5]. Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\nEqual contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.",
      "start_pos": 1176,
      "end_pos": 1958,
      "size": 781
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_3",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "age models and encoder-decoder\narchitectures [31, 21, 13].\nEqual contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the rst Transformer models and\nhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and\nefcient inference and visualizations.",
      "start_pos": 1758,
      "end_pos": 2517,
      "size": 758
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_4",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "tless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efcient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research. Work performed while at Google Brain. Work performed while at Google Research. 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA. Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states ht, as a function of",
      "start_pos": 2317,
      "end_pos": 3111,
      "size": 794
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_5",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ally factor computation along the symbol positions of the input and output\nsequences. Aligning the positions to steps in computation time, they generate a sequence of hidden\nstates ht, as a function of the previous hidden state ht1 and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignicant improvements in computational efciency through factorization tricks [18] and conditional\ncomputation [26], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.",
      "start_pos": 2911,
      "end_pos": 3640,
      "size": 728
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_6",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "rough factorization tricks [18] and conditional\ncomputation [26], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\nAttention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [2, 16]. In all but a few cases [22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.",
      "start_pos": 3440,
      "end_pos": 4181,
      "size": 740
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_7",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "etwork. In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for signicantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs. Background The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [20], Byte Net [15] and Conv S2S [8], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output",
      "start_pos": 3981,
      "end_pos": 4773,
      "size": 792
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_8",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for Conv S2S and logarithmically for Byte Net. This makes it more difcult to learn dependencies between distant positions [11]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2. Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation",
      "start_pos": 4573,
      "end_pos": 5371,
      "size": 798
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_9",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "Attention as described in section 3.2. Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4, 22, 23, 19]. End-to-end memory networks are based on a recurrent attention mechanism instead of sequence- aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [28]. To the best of our knowledge, however, the Transformer is the rst transduction model relying entirely on self-attention to compute",
      "start_pos": 5171,
      "end_pos": 5954,
      "size": 783
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_10",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "simple-language question answering and\nlanguage modeling tasks [28].\nTo the best of our knowledge, however, the Transformer is the rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\nModel Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 29].\nHere, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence\nof continuous representations z = (z1, ..., zn).",
      "start_pos": 5754,
      "end_pos": 6460,
      "size": 704
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_11",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "on models have an encoder-decoder structure [5, 2, 29].\nHere, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence\nof continuous representations z = (z1, ..., zn). Given z, the decoder then generates an output\nsequence (y1, ..., ym) of symbols one element at a time. At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1\nEncoder and Decoder Stacks\nEncoder:\nThe encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers.",
      "start_pos": 6260,
      "end_pos": 7046,
      "size": 785
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_12",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "der, shown in the left and right halves of Figure 1,\nrespectively.\n3.1\nEncoder and Decoder Stacks\nEncoder:\nThe encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The rst is a multi-head self-attention mechanism, and the second is a simple, position-\n\nFigure 1: The Transformer - model architecture.\nwise fully connected feed-forward network. We employ a residual connection [10] around each of\nthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is\nLayer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.",
      "start_pos": 6846,
      "end_pos": 7623,
      "size": 776
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_13",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension dmodel = 512. Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the",
      "start_pos": 7423,
      "end_pos": 8218,
      "size": 795
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_14",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ion\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.\n3.2\nAttention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n3.2.1\nScaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).",
      "start_pos": 8018,
      "end_pos": 8771,
      "size": 752
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_15",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "h value is computed by a compatibility function of the\nquery with the corresponding key.\n3.2.1\nScaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\n\nScaled Dot-Product Attention\nMulti-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several\nattention layers running in parallel.\nquery with all keys, divide each by dk, and apply a softmax function to obtain the weights on the\nvalues.\nIn practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices K and V .",
      "start_pos": 8571,
      "end_pos": 9366,
      "size": 794
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_16",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "on the values. In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V . We compute the matrix of outputs as: Attention(Q, K, V ) = softmax(QKT dk )V (1) The two most commonly used attention functions are additive attention [2], and dot-product (multi- plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of dk . Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efcient in practice, since it can be implemented using highly optimized matrix",
      "start_pos": 9166,
      "end_pos": 9954,
      "size": 788
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_17",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "le hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efcient in practice, since it can be implemented using highly optimized matrix multiplication code. While for small values of dk the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of dk [3]. We suspect that for large values of dk, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients 4. To counteract this effect, we scale the dot products by dk . 3.2.2 Multi-Head Attention Instead of performing a single attention function with dmodel-dimensional keys, values and queries, we found it benecial to linearly project the queries,",
      "start_pos": 9754,
      "end_pos": 10548,
      "size": 794
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_18",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ot products by\ndk .\n3.2.2\nMulti-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it benecial to linearly project the queries, keys and values h times with different, learned\nlinear projections to dk, dk and dv dimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. These are concatenated and once again projected, resulting in the nal values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.",
      "start_pos": 10348,
      "end_pos": 11107,
      "size": 758
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_19",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\n4To illustrate why the dot products get large, assume that the components of q and k are independent random\nvariables with mean 0 and variance 1. Then their dot product, q  k = Pdk\ni=1 qiki, has mean 0 and variance dk.\n\nMulti Head(Q, K, V ) = Concat(head1, ..., headh)W O\nwhere headi = Attention(QW Q\ni , KW K\ni , V W V\ni )\nWhere the projections are parameter matrices W Q\ni\nRdmodeldk, W K\ni\nRdmodeldk, W V\ni\nRdmodeldv\nand W O Rhdvdmodel.\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64.",
      "start_pos": 10907,
      "end_pos": 11662,
      "size": 754
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_20",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "eter matrices W Q\ni\nRdmodeldk, W K\ni\nRdmodeldk, W V\ni\nRdmodeldv\nand W O Rhdvdmodel.\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3\nApplications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence.",
      "start_pos": 11462,
      "end_pos": 12168,
      "size": 705
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_21",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.",
      "start_pos": 11968,
      "end_pos": 12732,
      "size": 763
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_22",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "in the previous layer of the\nencoder.\n Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation ow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to ) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3\nPosition-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a Re LU activation in between.",
      "start_pos": 12532,
      "end_pos": 13326,
      "size": 792
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_23",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a Re LU activation in between.\nFFN(x) = max(0, x W1 + b1)W2 + b2\n(2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.\n3.4\nEmbeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.",
      "start_pos": 13126,
      "end_pos": 13850,
      "size": 722
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_24",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "onality\ndff = 2048.\n3.4\nEmbeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [24]. In the embedding layers, we multiply those weights by dmodel.\n3.5\nPositional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.",
      "start_pos": 13650,
      "end_pos": 14446,
      "size": 795
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_25",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention. Layer Type Complexity per Layer Sequential Maximum Path Length Operations Self-Attention O(n2 d) O(1) O(1) Recurrent O(n d2) O(n) O(n) Convolutional O(k n d2) O(1) O(logk(n)) Self-Attention (restricted) O(r n d) O(1) O(n/r) bottoms",
      "start_pos": 14246,
      "end_pos": 15036,
      "size": 790
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_26",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "er\nSequential\nMaximum Path Length\nOperations\nSelf-Attention\nO(n2  d)\nO(1)\nO(1)\nRecurrent\nO(n  d2)\nO(n)\nO(n)\nConvolutional\nO(k  n  d2)\nO(1)\nO(logk(n))\nSelf-Attention (restricted)\nO(r  n  d)\nO(1)\nO(n/r)\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and xed [8].\nIn this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i) = sin(pos/100002i/dmodel)\nPE(pos,2i+1) = cos(pos/100002i/dmodel)\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2 to 10000  2.",
      "start_pos": 14836,
      "end_pos": 15597,
      "size": 760
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_27",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "model)\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2 to 10000  2. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any xed offset k, PEpos+k can be represented as a linear function of\nPEpos.\nWe also experimented with using learned positional embeddings [8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.",
      "start_pos": 15397,
      "end_pos": 16116,
      "size": 718
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_28",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training. Why Self-Attention In this section we compare various aspects of self-attention layers to the recurrent and convolu- tional layers commonly used for mapping one variable-length sequence of symbol representations (x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi Rd, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of",
      "start_pos": 15916,
      "end_pos": 16706,
      "size": 790
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_29",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "of self-attention we\nconsider three desiderata.\nOne is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\nThe third is the path length between long-range dependencies in the network. Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [11].",
      "start_pos": 16506,
      "end_pos": 17210,
      "size": 703
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_30",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ckward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [11]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types. As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence length n is smaller than the representation dimensionality d, which is most often the case with sentence representations used by state-of-the-art models in",
      "start_pos": 17010,
      "end_pos": 17806,
      "size": 796
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_31",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ster than recurrent layers when the sequence\nlength n is smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [25] representations. To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size r in\n\nthe input sequence centered around the respective output position. This would increase the maximum\npath length to O(n/r). We plan to investigate this approach further in future work.\nA single convolutional layer with kernel width k < n does not connect all pairs of input and output\npositions.",
      "start_pos": 17606,
      "end_pos": 18345,
      "size": 738
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_32",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "imum path length to O(n/r). We plan to investigate this approach further in future work. A single convolutional layer with kernel width k < n does not connect all pairs of input and output positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(logk(n)) in the case of dilated convolutions [15], increasing the length of the longest paths between any two positions in the network. Convolutional layers are generally more expensive than recurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexity considerably, to O(k n d + n d2). Even with k = n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we",
      "start_pos": 18145,
      "end_pos": 18938,
      "size": 793
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_33",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ably, to O(k  n  d + n  d2). Even with k = n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\nAs side benet, self-attention could yield more interpretable models. We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\nTraining\nThis section describes the training regime for our models.\n5.1\nTraining Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.",
      "start_pos": 18738,
      "end_pos": 19516,
      "size": 777
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_34",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ng\nThis section describes the training regime for our models.\n5.1\nTraining Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-\ntarget vocabulary of about 37000 tokens. For English-French, we used the signicantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [31]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n5.2\nHardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.",
      "start_pos": 19316,
      "end_pos": 20087,
      "size": 770
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_35",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "g batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens. 5.2 Hardware and Schedule We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days). 5.3 Optimizer We used the Adam optimizer [17] with 1 = 0.9, 2 = 0.98 and = 109. We varied the learning rate over the course of training, according to the formula: lrate = d0.5 model min(step_num0.5, step_num warmup_steps1.5) (3) This corresponds to",
      "start_pos": 19887,
      "end_pos": 20672,
      "size": 785
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_36",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "th 1 = 0.9, 2 = 0.98 and  = 109. We varied the learning\nrate over the course of training, according to the formula:\nlrate = d0.5\nmodel  min(step_num0.5, step_num  warmup_steps1.5)\n(3)\nThis corresponds to increasing the learning rate linearly for the rst warmup_steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup_steps = 4000.\n5.4\nRegularization\nWe employ three types of regularization during training:\nResidual Dropout\nWe apply dropout [27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.",
      "start_pos": 20472,
      "end_pos": 21261,
      "size": 787
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_37",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "put and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of Pdrop = 0.1. Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost. Model BLEU Training Cost (FLOPs) EN-DE EN-FR EN-DE EN-FR Byte Net [15] 23.75 Deep-Att + Pos Unk [32] 39.2 1.0 1020 GNMT + RL [31] 24.6 39.92 2.3 1019 1.4 1020 Conv S2S [8] 25.16 40.46 9.6 1018 1.5 1020 Mo E [26] 26.03 40.56 2.0 1019 1.2 1020 Deep-Att + Pos Unk Ensemble [32] 40.4 8.0 1020 GNMT + RL Ensemble [31] 26.30 41.16 1.8 1020 1.1 1021 Conv S2S Ensemble [8] 26.36 41.29 7.7 1019 1.2",
      "start_pos": 21061,
      "end_pos": 21842,
      "size": 781
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_38",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": ".6  1018\n1.5  1020\nMo E [26]\n26.03\n40.56\n2.0  1019\n1.2  1020\nDeep-Att + Pos Unk Ensemble [32]\n40.4\n8.0  1020\nGNMT + RL Ensemble [31]\n26.30\n41.16\n1.8  1020\n1.1  1021\nConv S2S Ensemble [8]\n26.36\n41.29\n7.7  1019\n1.2  1021\nTransformer (base model)\n27.3\n38.1\n3.3  1018\nTransformer (big)\n28.4\n41.0\n2.3  1019\nLabel Smoothing\nDuring training, we employed label smoothing of value ls = 0.1 [30]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\nResults\n6.1\nMachine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.",
      "start_pos": 21642,
      "end_pos": 22419,
      "size": 776
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_39",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "g transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The conguration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.",
      "start_pos": 22219,
      "end_pos": 23013,
      "size": 793
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_40",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "shed single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty  = 0.6 [31]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.",
      "start_pos": 22813,
      "end_pos": 23606,
      "size": 792
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_41",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "to input length + 50, but terminate early when possible [31].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision oating-point capacity of each GPU 5.\n6.2\nModel Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.",
      "start_pos": 23406,
      "end_pos": 24191,
      "size": 783
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_42",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n\nTable 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base\nmodel. All metrics are on the English-to-German translation development set, newstest2013.",
      "start_pos": 23991,
      "end_pos": 24768,
      "size": 776
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_43",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ly. Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities. N dmodel dff h dk dv Pdrop ls train PPL BLEU params steps (dev) (dev) base 512 8 64 0.1 0.1 100K 4.92 25.8 (A) 512 5.29 24.9 128 5.00 25.5 32 4.91 25.8 16 5.01 25.4 (B) 5.16 25.1 32 5.01 25.4 (C) 6.11 23.7 4 5.19 25.3 8 4.88 25.5 256 32 5.75 24.5 1024 128 4.66 26.0 1024 5.12 25.4 4096 4.75 26.2 (D) 0.0 5.77 24.6 0.2 4.95 25.5 0.0 4.67 25.3 0.2 5.47 25.7 (E) positional embedding instead of sinusoids 4.92 25.7 big 1024 16 0.3 300K 4.33 26.4 In Table 3 rows (B), we",
      "start_pos": 24568,
      "end_pos": 25362,
      "size": 794
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_44",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "1024\n5.12\n25.4\n4096\n4.75\n26.2\n(D)\n0.0\n5.77\n24.6\n0.2\n4.95\n25.5\n0.0\n4.67\n25.3\n0.2\n5.47\n25.7\n(E)\npositional embedding instead of sinusoids\n4.92\n25.7\nbig\n1024\n16\n0.3\n300K\n4.33\n26.4\nIn Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be benecial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-tting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [8], and observe nearly identical\nresults to the base model.",
      "start_pos": 25162,
      "end_pos": 25866,
      "size": 702
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_45",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ropout is very helpful in avoiding over-tting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [8], and observe nearly identical\nresults to the base model.\nConclusion\nIn this work, we presented the Transformer, the rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained signicantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.",
      "start_pos": 25666,
      "end_pos": 26445,
      "size": 778
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_46",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "h WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efciently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.",
      "start_pos": 26245,
      "end_pos": 26959,
      "size": 713
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_47",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": ", audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements\nWe are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n\nReferences\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. ar Xiv preprint\nar Xiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. Co RR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural\nmachine translation architectures. Co RR, abs/1703.03906, 2017.",
      "start_pos": 26759,
      "end_pos": 27534,
      "size": 774
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_48",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "nd translate. Co RR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural\nmachine translation architectures. Co RR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. ar Xiv preprint ar Xiv:1601.06733, 2016.\n[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. Co RR, abs/1406.1078, 2014.\n[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. ar Xiv\npreprint ar Xiv:1610.02357, 2016.\n[7] Junyoung Chung, aglar Glehre, Kyunghyun Cho, and Yoshua Bengio.",
      "start_pos": 27334,
      "end_pos": 28103,
      "size": 768
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_49",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "2014.\n[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. ar Xiv\npreprint ar Xiv:1610.02357, 2016.\n[7] Junyoung Chung, aglar Glehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluation\nof gated recurrent neural networks on sequence modeling. Co RR, abs/1412.3555, 2014.\n[8] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-\ntional sequence to sequence learning. ar Xiv preprint ar Xiv:1705.03122v2, 2017.\n[9] Alex Graves.\nGenerating sequences with recurrent neural networks.\nar Xiv preprint\nar Xiv:1308.0850, 2013.\n[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-\nage recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition, pages 770778, 2016.",
      "start_pos": 27903,
      "end_pos": 28703,
      "size": 799
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_50",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ng He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-\nage recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition, pages 770778, 2016.\n[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jrgen Schmidhuber. Gradient ow in\nrecurrent nets: the difculty of learning long-term dependencies, 2001.\n[12] Sepp Hochreiter and Jrgen Schmidhuber. Long short-term memory. Neural computation,\n9(8):17351780, 1997.\n[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring\nthe limits of language modeling. ar Xiv preprint ar Xiv:1602.02410, 2016.\n[14] ukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference\non Learning Representations (ICLR), 2016.",
      "start_pos": 28503,
      "end_pos": 29279,
      "size": 775
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_51",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "f language modeling. ar Xiv preprint ar Xiv:1602.02410, 2016.\n[14] ukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference\non Learning Representations (ICLR), 2016.\n[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. Neural machine translation in linear time. ar Xiv preprint ar Xiv:1610.10099v2,\n2017.\n[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.\nIn International Conference on Learning Representations, 2017.\n[17] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. ar Xiv preprint\nar Xiv:1703.10722, 2017.",
      "start_pos": 29079,
      "end_pos": 29853,
      "size": 773
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_52",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "gma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. ar Xiv preprint\nar Xiv:1703.10722, 2017.\n[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. ar Xiv preprint\nar Xiv:1703.03130, 2017.\n[20] Samy Bengio ukasz Kaiser. Can active memory replace attention? In Advances in Neural\nInformation Processing Systems, (NIPS), 2016.\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-\nbased neural machine translation. ar Xiv preprint ar Xiv:1508.04025, 2015.\n[22] Ankur Parikh, Oscar Tckstrm, Dipanjan Das, and Jakob Uszkoreit.",
      "start_pos": 29653,
      "end_pos": 30428,
      "size": 774
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_53",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ristopher D Manning. Effective approaches to attention-\nbased neural machine translation. ar Xiv preprint ar Xiv:1508.04025, 2015.\n[22] Ankur Parikh, Oscar Tckstrm, Dipanjan Das, and Jakob Uszkoreit. A decomposable attention\nmodel. In Empirical Methods in Natural Language Processing, 2016.\n[23] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive\nsummarization. ar Xiv preprint ar Xiv:1705.04304, 2017.\n[24] Or Press and Lior Wolf. Using the output embedding to improve language models. ar Xiv\npreprint ar Xiv:1608.05859, 2016.\n[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words\nwith subword units. ar Xiv preprint ar Xiv:1508.07909, 2015.",
      "start_pos": 30228,
      "end_pos": 30952,
      "size": 723
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_54",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": ". ar Xiv\npreprint ar Xiv:1608.05859, 2016.\n[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words\nwith subword units. ar Xiv preprint ar Xiv:1508.07909, 2015.\n[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ar Xiv preprint ar Xiv:1701.06538, 2017.\n[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. Dropout: a simple way to prevent neural networks from overtting. Journal of Machine\nLearning Research, 15(1):19291958, 2014.\n[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D.",
      "start_pos": 30752,
      "end_pos": 31548,
      "size": 795
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_55",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "ing. Journal of Machine\nLearning Research, 15(1):19291958, 2014.\n[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28, pages 24402448. Curran Associates,\nInc., 2015.\n[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neural\nnetworks. In Advances in Neural Information Processing Systems, pages 31043112, 2014.\n[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. Co RR, abs/1512.00567, 2015.",
      "start_pos": 31348,
      "end_pos": 32054,
      "size": 705
    },
    {
      "chunk_id": "attention-is-all-you-need-1hodz0wcqb_chunk_56",
      "document": "attention-is-all-you-need-1hodz0wcqb",
      "text": "s 31043112, 2014.\n[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. Co RR, abs/1512.00567, 2015.\n[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Googles neural machine\ntranslation system: Bridging the gap between human and machine translation. ar Xiv preprint\nar Xiv:1609.08144, 2016.\n[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with\nfast-forward connections for neural machine translation. Co RR, abs/1606.04199, 2016.",
      "start_pos": 31854,
      "end_pos": 32516,
      "size": 662
    },
    {
      "chunk_id": "N19-1423_chunk_0",
      "document": "N19-1423",
      "text": "Proceedings of NAACL-HLT 2019, pages 41714186\nMinneapolis, Minnesota, June 2 - June 7, 2019. c2019 Association for Computational Linguistics\nBERT: Pre-training of Deep Bidirectional Transformers for\nLanguage Understanding\nJacob Devlin\nMing-Wei Chang\nKenton Lee\nKristina Toutanova\nGoogle AI Language\n{jacobdevlin,mingweichang,kentonl,kristout}@google.com\nAbstract\nWe introduce a new language representa-\ntion model called BERT, which stands for\nBidirectional Encoder Representations from\nTransformers. Unlike recent language repre-\nsentation models (Peters et al., 2018a; Rad-\nford et al., 2018), BERT is designed to pre-\ntrain deep bidirectional representations from\nunlabeled text by jointly conditioning on both\nleft and right context in all layers.",
      "start_pos": 0,
      "end_pos": 752,
      "size": 751
    },
    {
      "chunk_id": "N19-1423_chunk_1",
      "document": "N19-1423",
      "text": "ers et al., 2018a; Rad- ford et al., 2018), BERT is designed to pre- train deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers. As a re- sult, the pre-trained BERT model can be ne- tuned with just one additional output layer to create state-of-the-art models for a wide range of tasks, such as question answering and language inference, without substantial task- specic architecture modications. BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art re- sults on eleven natural language processing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), Multi NLI accuracy to 86.7% (4.6% absolute improvement), SQu AD v1.1 question answer- ing Test F1 to 93.2 (1.5",
      "start_pos": 552,
      "end_pos": 1348,
      "size": 796
    },
    {
      "chunk_id": "N19-1423_chunk_2",
      "document": "N19-1423",
      "text": "ssing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), Multi NLI accuracy to 86.7% (4.6% absolute improvement), SQu AD v1.1 question answer- ing Test F1 to 93.2 (1.5 point absolute im- provement) and SQu AD v2.0 Test F1 to 83.1 (5.1 point absolute improvement). Introduction Language model pre-training has been shown to be effective for improving many natural language processing tasks (Dai and Le, 2015; Peters et al., 2018a; Radford et al., 2018; Howard and Ruder, 2018). These include sentence-level tasks such as natural language inference (Bowman et al., 2015; Williams et al., 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the re- lationships between sentences by analyzing them holistically, as well as token-level tasks such as",
      "start_pos": 1148,
      "end_pos": 1945,
      "size": 797
    },
    {
      "chunk_id": "N19-1423_chunk_3",
      "document": "N19-1423",
      "text": "015; Williams et al., 2018) and paraphrasing (Dolan and Brockett, 2005), which aim to predict the re- lationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce ne-grained output at the token level (Tjong Kim Sang and De Meulder, 2003; Rajpurkar et al., 2016). There are two existing strategies for apply- ing pre-trained language representations to down- stream tasks: feature-based and ne-tuning. The feature-based approach, such as ELMo (Peters et al., 2018a), uses task-specic architectures that include the pre-trained representations as addi- tional features. The ne-tuning approach, such as the Generative Pre-trained Transformer (Open AI GPT) (Radford et al.,",
      "start_pos": 1745,
      "end_pos": 2538,
      "size": 793
    },
    {
      "chunk_id": "N19-1423_chunk_4",
      "document": "N19-1423",
      "text": "s task-specic architectures that\ninclude the pre-trained representations as addi-\ntional features. The ne-tuning approach, such as\nthe Generative Pre-trained Transformer (Open AI\nGPT) (Radford et al., 2018), introduces minimal\ntask-specic parameters, and is trained on the\ndownstream tasks by simply ne-tuning all pre-\ntrained parameters. The two approaches share the\nsame objective function during pre-training, where\nthey use unidirectional language models to learn\ngeneral language representations.\nWe argue that current techniques restrict the\npower of the pre-trained representations, espe-\ncially for the ne-tuning approaches.\nThe ma-\njor limitation is that standard language models are\nunidirectional, and this limits the choice of archi-\ntectures that can be used during pre-training.",
      "start_pos": 2338,
      "end_pos": 3131,
      "size": 792
    },
    {
      "chunk_id": "N19-1423_chunk_5",
      "document": "N19-1423",
      "text": "e-\ncially for the ne-tuning approaches.\nThe ma-\njor limitation is that standard language models are\nunidirectional, and this limits the choice of archi-\ntectures that can be used during pre-training. For\nexample, in Open AI GPT, the authors use a left-to-\nright architecture, where every token can only at-\ntend to previous tokens in the self-attention layers\nof the Transformer (Vaswani et al., 2017). Such re-\nstrictions are sub-optimal for sentence-level tasks,\nand could be very harmful when applying ne-\ntuning based approaches to token-level tasks such\nas question answering, where it is crucial to incor-\nporate context from both directions.\nIn this paper, we improve the ne-tuning based\napproaches by proposing BERT: Bidirectional\nEncoder\nRepresentations\nfrom\nTransformers.",
      "start_pos": 2931,
      "end_pos": 3713,
      "size": 781
    },
    {
      "chunk_id": "N19-1423_chunk_6",
      "document": "N19-1423",
      "text": "where it is crucial to incor-\nporate context from both directions.\nIn this paper, we improve the ne-tuning based\napproaches by proposing BERT: Bidirectional\nEncoder\nRepresentations\nfrom\nTransformers.\nBERT alleviates the previously mentioned unidi-\nrectionality constraint by using a masked lan-\nguage model (MLM) pre-training objective, in-\nspired by the Cloze task (Taylor, 1953).\nThe\nmasked language model randomly masks some of\nthe tokens from the input, and the objective is to\npredict the original vocabulary id of the masked\n\nword based only on its context.\nUnlike left-to-\nright language model pre-training, the MLM ob-\njective enables the representation to fuse the left\nand the right context, which allows us to pre-\ntrain a deep bidirectional Transformer.",
      "start_pos": 3513,
      "end_pos": 4279,
      "size": 765
    },
    {
      "chunk_id": "N19-1423_chunk_7",
      "document": "N19-1423",
      "text": "like left-to-\nright language model pre-training, the MLM ob-\njective enables the representation to fuse the left\nand the right context, which allows us to pre-\ntrain a deep bidirectional Transformer. In addi-\ntion to the masked language model, we also use\na next sentence prediction task that jointly pre-\ntrains text-pair representations. The contributions\nof our paper are as follows:\n We demonstrate the importance of bidirectional\npre-training for language representations. Un-\nlike Radford et al. (2018), which uses unidirec-\ntional language models for pre-training, BERT\nuses masked language models to enable pre-\ntrained deep bidirectional representations. This\nis also in contrast to Peters et al.",
      "start_pos": 4079,
      "end_pos": 4785,
      "size": 705
    },
    {
      "chunk_id": "N19-1423_chunk_8",
      "document": "N19-1423",
      "text": "8), which uses unidirec-\ntional language models for pre-training, BERT\nuses masked language models to enable pre-\ntrained deep bidirectional representations. This\nis also in contrast to Peters et al. (2018a), which\nuses a shallow concatenation of independently\ntrained left-to-right and right-to-left LMs.\n We show that pre-trained representations reduce\nthe need for many heavily-engineered task-\nspecic architectures. BERT is the rst ne-\ntuning based representation model that achieves\nstate-of-the-art performance on a large suite\nof sentence-level and token-level tasks, outper-\nforming many task-specic architectures.\n BERT advances the state of the art for eleven\nNLP tasks.\nThe code and pre-trained mod-\nels are available at https://github.com/\ngoogle-research/bert.",
      "start_pos": 4585,
      "end_pos": 5359,
      "size": 773
    },
    {
      "chunk_id": "N19-1423_chunk_9",
      "document": "N19-1423",
      "text": "outper- forming many task-specic architectures. BERT advances the state of the art for eleven NLP tasks. The code and pre-trained mod- els are available at https://github.com/ google-research/bert. Related Work There is a long history of pre-training general lan- guage representations, and we briey review the most widely-used approaches in this section. 2.1 Unsupervised Feature-based Approaches Learning widely applicable representations of words has been an active area of research for decades, including non-neural (Brown et al., 1992; Ando and Zhang, 2005; Blitzer et al., 2006) and neural (Mikolov et al., 2013; Pennington et al., 2014) methods. Pre-trained word embeddings are an integral part of modern NLP systems, of- fering signicant improvements over embeddings learned from scratch",
      "start_pos": 5159,
      "end_pos": 5954,
      "size": 795
    },
    {
      "chunk_id": "N19-1423_chunk_10",
      "document": "N19-1423",
      "text": "al (Mikolov et al., 2013; Pennington et al., 2014) methods. Pre-trained word embeddings are an integral part of modern NLP systems, of- fering signicant improvements over embeddings learned from scratch (Turian et al., 2010). To pre- train word embedding vectors, left-to-right lan- guage modeling objectives have been used (Mnih and Hinton, 2009), as well as objectives to dis- criminate correct from incorrect words in left and right context (Mikolov et al., 2013). These approaches have been generalized to coarser granularities, such as sentence embed- dings (Kiros et al., 2015; Logeswaran and Lee, 2018) or paragraph embeddings (Le and Mikolov, 2014). To train sentence representations, prior work has used objectives to rank candidate next sentences (Jernite et al., 2017; Logeswaran and",
      "start_pos": 5754,
      "end_pos": 6548,
      "size": 794
    },
    {
      "chunk_id": "N19-1423_chunk_11",
      "document": "N19-1423",
      "text": "and Lee,\n2018) or paragraph embeddings (Le and Mikolov,\n2014).\nTo train sentence representations, prior\nwork has used objectives to rank candidate next\nsentences (Jernite et al., 2017; Logeswaran and\nLee, 2018), left-to-right generation of next sen-\ntence words given a representation of the previous\nsentence (Kiros et al., 2015), or denoising auto-\nencoder derived objectives (Hill et al., 2016).\nELMo and its predecessor (Peters et al., 2017,\n2018a) generalize traditional word embedding re-\nsearch along a different dimension. They extract\ncontext-sensitive features from a left-to-right and a\nright-to-left language model. The contextual rep-\nresentation of each token is the concatenation of\nthe left-to-right and right-to-left representations.",
      "start_pos": 6348,
      "end_pos": 7100,
      "size": 750
    },
    {
      "chunk_id": "N19-1423_chunk_12",
      "document": "N19-1423",
      "text": "-sensitive features from a left-to-right and a\nright-to-left language model. The contextual rep-\nresentation of each token is the concatenation of\nthe left-to-right and right-to-left representations.\nWhen integrating contextual word embeddings\nwith existing task-specic architectures, ELMo\nadvances the state of the art for several major NLP\nbenchmarks (Peters et al., 2018a) including ques-\ntion answering (Rajpurkar et al., 2016), sentiment\nanalysis (Socher et al., 2013), and named entity\nrecognition (Tjong Kim Sang and De Meulder,\n2003). Melamud et al. (2016) proposed learning\ncontextual representations through a task to pre-\ndict a single word from both left and right context\nusing LSTMs. Similar to ELMo, their model is\nfeature-based and not deeply bidirectional. Fedus\net al.",
      "start_pos": 6900,
      "end_pos": 7687,
      "size": 786
    },
    {
      "chunk_id": "N19-1423_chunk_13",
      "document": "N19-1423",
      "text": "extual representations through a task to pre-\ndict a single word from both left and right context\nusing LSTMs. Similar to ELMo, their model is\nfeature-based and not deeply bidirectional. Fedus\net al. (2018) shows that the cloze task can be used\nto improve the robustness of text generation mod-\nels.\n2.2\nUnsupervised Fine-tuning Approaches\nAs with the feature-based approaches, the rst\nworks in this direction only pre-trained word em-\nbedding parameters from unlabeled text\n(Col-\nlobert and Weston, 2008).\nMore recently, sentence or document encoders\nwhich produce contextual token representations\nhave been pre-trained from unlabeled text and\nne-tuned for a supervised downstream task (Dai\nand Le, 2015; Howard and Ruder, 2018; Radford\net al., 2018).",
      "start_pos": 7487,
      "end_pos": 8240,
      "size": 752
    },
    {
      "chunk_id": "N19-1423_chunk_14",
      "document": "N19-1423",
      "text": "hich produce contextual token representations\nhave been pre-trained from unlabeled text and\nne-tuned for a supervised downstream task (Dai\nand Le, 2015; Howard and Ruder, 2018; Radford\net al., 2018). The advantage of these approaches\nis that few parameters need to be learned from\nscratch.\nAt least partly due to this advantage,\nOpen AI GPT (Radford et al., 2018) achieved pre-\nviously state-of-the-art results on many sentence-\nlevel tasks from the GLUE benchmark (Wang\net al., 2018a).\nLeft-to-right language model-\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...\nTok M\nQuestion\nParagraph\nStart/End Span\nBERT\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...",
      "start_pos": 8040,
      "end_pos": 8808,
      "size": 767
    },
    {
      "chunk_id": "N19-1423_chunk_15",
      "document": "N19-1423",
      "text": "TN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...\nTok M\nQuestion\nParagraph\nStart/End Span\nBERT\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok 1\n [SEP]\n...\nTok N\nTok 1\n...\nTok M\nMasked Sentence A\nMasked Sentence B\nPre-training\nFine-Tuning\nNSP\nMask LM\nMask LM\nUnlabeled Sentence A and B Pair \nSQu AD\nQuestion Answer Pair\nNER\nMNLI\nFigure 1: Overall pre-training and ne-tuning procedures for BERT. Apart from output layers, the same architec-\ntures are used in both pre-training and ne-tuning. The same pre-trained model parameters are used to initialize\nmodels for different down-stream tasks. During ne-tuning, all parameters are ne-tuned. [CLS] is a special\nsymbol added in front of every input example, and [SEP] is a special separator token (e.g.",
      "start_pos": 8608,
      "end_pos": 9385,
      "size": 776
    },
    {
      "chunk_id": "N19-1423_chunk_16",
      "document": "N19-1423",
      "text": "ze models for different down-stream tasks. During ne-tuning, all parameters are ne-tuned. [CLS] is a special symbol added in front of every input example, and [SEP] is a special separator token (e.g. separating ques- tions/answers). ing and auto-encoder objectives have been used for pre-training such models (Howard and Ruder, 2018; Radford et al., 2018; Dai and Le, 2015). 2.3 Transfer Learning from Supervised Data There has also been work showing effective trans- fer from supervised tasks with large datasets, such as natural language inference (Conneau et al., 2017) and machine translation (Mc Cann et al., 2017). Computer vision research has also demon- strated the importance of transfer learning from large pre-trained models, where an effective recipe is to ne-tune models pre-trained",
      "start_pos": 9185,
      "end_pos": 9980,
      "size": 795
    },
    {
      "chunk_id": "N19-1423_chunk_17",
      "document": "N19-1423",
      "text": "n (Mc Cann et al.,\n2017). Computer vision research has also demon-\nstrated the importance of transfer learning from\nlarge pre-trained models, where an effective recipe\nis to ne-tune models pre-trained with Ima-\nge Net (Deng et al., 2009; Yosinski et al., 2014).\nBERT\nWe introduce BERT and its detailed implementa-\ntion in this section. There are two steps in our\nframework: pre-training and ne-tuning.\nDur-\ning pre-training, the model is trained on unlabeled\ndata over different pre-training tasks.\nFor ne-\ntuning, the BERT model is rst initialized with\nthe pre-trained parameters, and all of the param-\neters are ne-tuned using labeled data from the\ndownstream tasks. Each downstream task has sep-\narate ne-tuned models, even though they are ini-\ntialized with the same pre-trained parameters.",
      "start_pos": 9780,
      "end_pos": 10575,
      "size": 794
    },
    {
      "chunk_id": "N19-1423_chunk_18",
      "document": "N19-1423",
      "text": "e param- eters are ne-tuned using labeled data from the downstream tasks. Each downstream task has sep- arate ne-tuned models, even though they are ini- tialized with the same pre-trained parameters. The question-answering example in Figure 1 will serve as a running example for this section. A distinctive feature of BERT is its unied ar- chitecture across different tasks. There is mini- mal difference between the pre-trained architec- ture and the nal downstream architecture. Model Architecture BERTs model architec- ture is a multi-layer bidirectional Transformer en- coder based on the original implementation de- scribed in Vaswani et al. (2017) and released in the tensor2tensor library.1 Because the use of Transformers has become common and our im- plementation is almost identical to",
      "start_pos": 10375,
      "end_pos": 11170,
      "size": 795
    },
    {
      "chunk_id": "N19-1423_chunk_19",
      "document": "N19-1423",
      "text": "iginal implementation de-\nscribed in Vaswani et al. (2017) and released in\nthe tensor2tensor library.1 Because the use\nof Transformers has become common and our im-\nplementation is almost identical to the original,\nwe will omit an exhaustive background descrip-\ntion of the model architecture and refer readers to\nVaswani et al. (2017) as well as excellent guides\nsuch as The Annotated Transformer.2\nIn this work, we denote the number of layers\n(i.e., Transformer blocks) as L, the hidden size as\nH, and the number of self-attention heads as A.3\nWe primarily report results on two model sizes:\nBERTBASE (L=12, H=768, A=12, Total Param-\neters=110M) and BERTLARGE (L=24, H=1024,\nA=16, Total Parameters=340M).\nBERTBASE was chosen to have the same model\nsize as Open AI GPT for comparison purposes.",
      "start_pos": 10970,
      "end_pos": 11765,
      "size": 794
    },
    {
      "chunk_id": "N19-1423_chunk_20",
      "document": "N19-1423",
      "text": "ERTBASE (L=12, H=768, A=12, Total Param- eters=110M) and BERTLARGE (L=24, H=1024, A=16, Total Parameters=340M). BERTBASE was chosen to have the same model size as Open AI GPT for comparison purposes. Critically, however, the BERT Transformer uses bidirectional self-attention, while the GPT Trans- former uses constrained self-attention where every token can only attend to context to its left.4 1https://github.com/tensorow/tensor2tensor 2http://nlp.seas.harvard.edu/2018/04/03/attention.html 3In all cases we set the feed-forward/lter size to be 4H, i.e., 3072 for the H = 768 and 4096 for the H = 1024. 4We note that in the literature the bidirectional Trans- Input/Output Representations To make BERT handle a variety of down-stream tasks, our input representation is able to unambiguously",
      "start_pos": 11565,
      "end_pos": 12358,
      "size": 793
    },
    {
      "chunk_id": "N19-1423_chunk_21",
      "document": "N19-1423",
      "text": "he H = 1024.\n4We note that in the literature the bidirectional Trans-\n\nInput/Output Representations\nTo make BERT\nhandle a variety of down-stream tasks, our input\nrepresentation is able to unambiguously represent\nboth a single sentence and a pair of sentences\n(e.g., Question, Answer ) in one token sequence.\nThroughout this work, a sentence can be an arbi-\ntrary span of contiguous text, rather than an actual\nlinguistic sentence. A sequence refers to the in-\nput token sequence to BERT, which may be a sin-\ngle sentence or two sentences packed together.\nWe use Word Piece embeddings (Wu et al.,\n2016) with a 30,000 token vocabulary. The rst\ntoken of every sequence is always a special clas-\nsication token ([CLS]).",
      "start_pos": 12158,
      "end_pos": 12874,
      "size": 715
    },
    {
      "chunk_id": "N19-1423_chunk_22",
      "document": "N19-1423",
      "text": "ence or two sentences packed together.\nWe use Word Piece embeddings (Wu et al.,\n2016) with a 30,000 token vocabulary. The rst\ntoken of every sequence is always a special clas-\nsication token ([CLS]). The nal hidden state\ncorresponding to this token is used as the ag-\ngregate sequence representation for classication\ntasks. Sentence pairs are packed together into a\nsingle sequence. We differentiate the sentences in\ntwo ways. First, we separate them with a special\ntoken ([SEP]). Second, we add a learned embed-\nding to every token indicating whether it belongs\nto sentence A or sentence B. As shown in Figure 1,\nwe denote input embedding as E, the nal hidden\nvector of the special [CLS] token as C RH,\nand the nal hidden vector for the ith input token\nas Ti RH.",
      "start_pos": 12674,
      "end_pos": 13438,
      "size": 763
    },
    {
      "chunk_id": "N19-1423_chunk_23",
      "document": "N19-1423",
      "text": "o sentence A or sentence B. As shown in Figure 1,\nwe denote input embedding as E, the nal hidden\nvector of the special [CLS] token as C RH,\nand the nal hidden vector for the ith input token\nas Ti RH.\nFor a given token, its input representation is\nconstructed by summing the corresponding token,\nsegment, and position embeddings. A visualiza-\ntion of this construction can be seen in Figure 2.\n3.1\nPre-training BERT\nUnlike Peters et al. (2018a) and Radford et al.\n(2018), we do not use traditional left-to-right or\nright-to-left language models to pre-train BERT.\nInstead, we pre-train BERT using two unsuper-\nvised tasks, described in this section. This step\nis presented in the left part of Figure 1.",
      "start_pos": 13238,
      "end_pos": 13940,
      "size": 701
    },
    {
      "chunk_id": "N19-1423_chunk_24",
      "document": "N19-1423",
      "text": "to-right or right-to-left language models to pre-train BERT. Instead, we pre-train BERT using two unsuper- vised tasks, described in this section. This step is presented in the left part of Figure 1. Task #1: Masked LM Intuitively, it is reason- able to believe that a deep bidirectional model is strictly more powerful than either a left-to-right model or the shallow concatenation of a left-to- right and a right-to-left model. Unfortunately, standard conditional language models can only be trained left-to-right or right-to-left, since bidirec- tional conditioning would allow each word to in- directly see itself, and the model could trivially predict the target word in a multi-layered context. former is often referred to as a Transformer encoder while the left-context-only version is",
      "start_pos": 13740,
      "end_pos": 14532,
      "size": 792
    },
    {
      "chunk_id": "N19-1423_chunk_25",
      "document": "N19-1423",
      "text": "o in-\ndirectly see itself, and the model could trivially\npredict the target word in a multi-layered context.\nformer is often referred to as a Transformer encoder while\nthe left-context-only version is referred to as a Transformer\ndecoder since it can be used for text generation.\nIn order to train a deep bidirectional representa-\ntion, we simply mask some percentage of the input\ntokens at random, and then predict those masked\ntokens. We refer to this procedure as a masked\nLM (MLM), although it is often referred to as a\nCloze task in the literature (Taylor, 1953). In this\ncase, the nal hidden vectors corresponding to the\nmask tokens are fed into an output softmax over\nthe vocabulary, as in a standard LM.",
      "start_pos": 14332,
      "end_pos": 15044,
      "size": 711
    },
    {
      "chunk_id": "N19-1423_chunk_26",
      "document": "N19-1423",
      "text": "red to as a\nCloze task in the literature (Taylor, 1953). In this\ncase, the nal hidden vectors corresponding to the\nmask tokens are fed into an output softmax over\nthe vocabulary, as in a standard LM. In all of our\nexperiments, we mask 15% of all Word Piece to-\nkens in each sequence at random. In contrast to\ndenoising auto-encoders (Vincent et al., 2008), we\nonly predict the masked words rather than recon-\nstructing the entire input.\nAlthough this allows us to obtain a bidirec-\ntional pre-trained model, a downside is that we\nare creating a mismatch between pre-training and\nne-tuning, since the [MASK] token does not ap-\npear during ne-tuning. To mitigate this, we do\nnot always replace masked words with the ac-\ntual [MASK] token.",
      "start_pos": 14844,
      "end_pos": 15581,
      "size": 736
    },
    {
      "chunk_id": "N19-1423_chunk_27",
      "document": "N19-1423",
      "text": "ating a mismatch between pre-training and ne-tuning, since the [MASK] token does not ap- pear during ne-tuning. To mitigate this, we do not always replace masked words with the ac- tual [MASK] token. The training data generator chooses 15% of the token positions at random for prediction. If the i-th token is chosen, we replace the i-th token with (1) the [MASK] token 80% of the time (2) a random token 10% of the time (3) the unchanged i-th token 10% of the time. Then, Ti will be used to predict the original token with cross entropy loss. We compare variations of this procedure in Appendix C.2. Task #2: Next Sentence Prediction (NSP) Many important downstream tasks such as Ques- tion Answering (QA) and Natural Language Infer- ence (NLI) are based on understanding the rela- tionship",
      "start_pos": 15381,
      "end_pos": 16172,
      "size": 791
    },
    {
      "chunk_id": "N19-1423_chunk_28",
      "document": "N19-1423",
      "text": "ndix C.2.\nTask #2:\nNext Sentence Prediction (NSP)\nMany important downstream tasks such as Ques-\ntion Answering (QA) and Natural Language Infer-\nence (NLI) are based on understanding the rela-\ntionship between two sentences, which is not di-\nrectly captured by language modeling. In order\nto train a model that understands sentence rela-\ntionships, we pre-train for a binarized next sen-\ntence prediction task that can be trivially gener-\nated from any monolingual corpus. Specically,\nwhen choosing the sentences A and B for each pre-\ntraining example, 50% of the time B is the actual\nnext sentence that follows A (labeled as Is Next),\nand 50% of the time it is a random sentence from\nthe corpus (labeled as Not Next).",
      "start_pos": 15972,
      "end_pos": 16690,
      "size": 717
    },
    {
      "chunk_id": "N19-1423_chunk_29",
      "document": "N19-1423",
      "text": "B for each pre- training example, 50% of the time B is the actual next sentence that follows A (labeled as Is Next), and 50% of the time it is a random sentence from the corpus (labeled as Not Next). As we show in Figure 1, C is used for next sentence predic- tion (NSP).5 Despite its simplicity, we demon- strate in Section 5.1 that pre-training towards this task is very benecial to both QA and NLI. 6 5The nal model achieves 97%-98% accuracy on NSP. 6The vector C is not a meaningful sentence representation without ne-tuning, since it was trained with NSP. [CLS] he likes play ##ing [SEP] my dog is cute [SEP] Input E[CLS] Ehe Elikes Eplay E##ing E[SEP] Emy Edog Eis Ecute E[SEP] Token Embeddings Segment Embeddings E0 E6 E7 E8 E9 E10 E1 E2 E3 E4 E5 Position Embeddings Figure 2: BERT input",
      "start_pos": 16490,
      "end_pos": 17284,
      "size": 794
    },
    {
      "chunk_id": "N19-1423_chunk_30",
      "document": "N19-1423",
      "text": "my\ndog\nis\ncute\n[SEP]\nInput\nE[CLS]\nEhe\nElikes\nEplay\nE##ing\nE[SEP]\nEmy\nEdog\nEis\nEcute\nE[SEP]\nToken\nEmbeddings\nSegment\nEmbeddings\nE0\nE6\nE7\nE8\nE9\nE10\nE1\nE2\nE3\nE4\nE5\nPosition\nEmbeddings\nFigure 2: BERT input representation. The input embeddings are the sum of the token embeddings, the segmenta-\ntion embeddings and the position embeddings.\nThe NSP task is closely related to representation-\nlearning objectives used in Jernite et al. (2017) and\nLogeswaran and Lee (2018). However, in prior\nwork, only sentence embeddings are transferred to\ndown-stream tasks, where BERT transfers all pa-\nrameters to initialize end-task model parameters.\nPre-training data The pre-training procedure\nlargely follows the existing literature on language\nmodel pre-training.",
      "start_pos": 17084,
      "end_pos": 17834,
      "size": 749
    },
    {
      "chunk_id": "N19-1423_chunk_31",
      "document": "N19-1423",
      "text": "ks, where BERT transfers all pa- rameters to initialize end-task model parameters. Pre-training data The pre-training procedure largely follows the existing literature on language model pre-training. For the pre-training corpus we use the Books Corpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words). For Wikipedia we extract only the text passages and ignore lists, tables, and headers. It is criti- cal to use a document-level corpus rather than a shufed sentence-level corpus such as the Billion Word Benchmark (Chelba et al., 2013) in order to extract long contiguous sequences. 3.2 Fine-tuning BERT Fine-tuning is straightforward since the self- attention mechanism in the Transformer al- lows BERT to model many downstream tasks whether they involve single text or text",
      "start_pos": 17634,
      "end_pos": 18430,
      "size": 796
    },
    {
      "chunk_id": "N19-1423_chunk_32",
      "document": "N19-1423",
      "text": "uences.\n3.2\nFine-tuning BERT\nFine-tuning is straightforward since the self-\nattention mechanism in the Transformer al-\nlows BERT to model many downstream tasks\nwhether they involve single text or text pairsby\nswapping out the appropriate inputs and outputs.\nFor applications involving text pairs, a common\npattern is to independently encode text pairs be-\nfore applying bidirectional cross attention, such\nas Parikh et al. (2016); Seo et al. (2017). BERT\ninstead uses the self-attention mechanism to unify\nthese two stages, as encoding a concatenated text\npair with self-attention effectively includes bidi-\nrectional cross attention between two sentences.\nFor each task, we simply plug in the task-\nspecic inputs and outputs into BERT and ne-\ntune all the parameters end-to-end.",
      "start_pos": 18230,
      "end_pos": 19010,
      "size": 779
    },
    {
      "chunk_id": "N19-1423_chunk_33",
      "document": "N19-1423",
      "text": "effectively includes bidi-\nrectional cross attention between two sentences.\nFor each task, we simply plug in the task-\nspecic inputs and outputs into BERT and ne-\ntune all the parameters end-to-end.\nAt the in-\nput, sentence A and sentence B from pre-training\nare analogous to (1) sentence pairs in paraphras-\ning, (2) hypothesis-premise pairs in entailment, (3)\nquestion-passage pairs in question answering, and\n(4) a degenerate text-pair in text classication\nor sequence tagging. At the output, the token rep-\nresentations are fed into an output layer for token-\nlevel tasks, such as sequence tagging or question\nanswering, and the [CLS] representation is fed\ninto an output layer for classication, such as en-\ntailment or sentiment analysis.",
      "start_pos": 18810,
      "end_pos": 19555,
      "size": 743
    },
    {
      "chunk_id": "N19-1423_chunk_34",
      "document": "N19-1423",
      "text": "ut layer for token- level tasks, such as sequence tagging or question answering, and the [CLS] representation is fed into an output layer for classication, such as en- tailment or sentiment analysis. Compared to pre-training, ne-tuning is rela- tively inexpensive. All of the results in the pa- per can be replicated in at most 1 hour on a sin- gle Cloud TPU, or a few hours on a GPU, starting from the exact same pre-trained model.7 We de- scribe the task-specic details in the correspond- ing subsections of Section 4. More details can be found in Appendix A.5. Experiments In this section, we present BERT ne-tuning re- sults on 11 NLP tasks. 4.1 GLUE The General Language Understanding Evaluation (GLUE) benchmark (Wang et al., 2018a) is a col- lection of diverse natural language understanding",
      "start_pos": 19355,
      "end_pos": 20153,
      "size": 798
    },
    {
      "chunk_id": "N19-1423_chunk_35",
      "document": "N19-1423",
      "text": "esent BERT ne-tuning re-\nsults on 11 NLP tasks.\n4.1\nGLUE\nThe General Language Understanding Evaluation\n(GLUE) benchmark (Wang et al., 2018a) is a col-\nlection of diverse natural language understanding\ntasks. Detailed descriptions of GLUE datasets are\nincluded in Appendix B.1.\nTo ne-tune on GLUE, we represent the input\nsequence (for single sentence or sentence pairs)\nas described in Section 3, and use the nal hid-\nden vector C RH corresponding to the rst\ninput token ([CLS]) as the aggregate representa-\ntion. The only new parameters introduced during\nne-tuning are classication layer weights W \nRKH, where K is the number of labels. We com-\npute a standard classication loss with C and W,\ni.e., log(softmax(CW T )).",
      "start_pos": 19953,
      "end_pos": 20673,
      "size": 719
    },
    {
      "chunk_id": "N19-1423_chunk_36",
      "document": "N19-1423",
      "text": "y new parameters introduced during ne-tuning are classication layer weights W RKH, where K is the number of labels. We com- pute a standard classication loss with C and W, i.e., log(softmax(CW T )). 7For example, the BERT SQu AD model can be trained in around 30 minutes on a single Cloud TPU to achieve a Dev F1 score of 91.0%. 8See (10) in https://gluebenchmark.com/faq. System MNLI-(m/mm) QQP QNLI SST-2 Co LA STS-B MRPC RTE Average 392k 363k 108k 67k 8.5k 5.7k 3.5k 2.5k - Pre-Open AI SOTA 80.6/80.1 66.1 82.3 93.2 35.0 81.0 86.0 61.7 74.0 Bi LSTM+ELMo+Attn 76.4/76.1 64.8 79.8 90.4 36.0 73.3 84.9 56.8 71.0 Open AI GPT 82.1/81.4 70.3 87.4 91.3 45.4 80.0 82.3 56.0 75.1 BERTBASE 84.6/83.4 71.2 90.5 93.5 52.1 85.8 88.9 66.4 79.6 BERTLARGE 86.7/85.9 72.1 92.7 94.9 60.5 86.5 89.3 70.1 82.1",
      "start_pos": 20473,
      "end_pos": 21265,
      "size": 792
    },
    {
      "chunk_id": "N19-1423_chunk_37",
      "document": "N19-1423",
      "text": "0\n73.3\n84.9\n56.8\n71.0\nOpen AI GPT\n82.1/81.4\n70.3\n87.4\n91.3\n45.4\n80.0\n82.3\n56.0\n75.1\nBERTBASE\n84.6/83.4\n71.2\n90.5\n93.5\n52.1\n85.8\n88.9\n66.4\n79.6\nBERTLARGE\n86.7/85.9\n72.1\n92.7\n94.9\n60.5\n86.5\n89.3\n70.1\n82.1\nTable 1: GLUE Test results, scored by the evaluation server (https://gluebenchmark.com/leaderboard).\nThe number below each task denotes the number of training examples. The Average column is slightly different\nthan the ofcial GLUE score, since we exclude the problematic WNLI set.8 BERT and Open AI GPT are single-\nmodel, single task. F1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.",
      "start_pos": 21065,
      "end_pos": 21805,
      "size": 739
    },
    {
      "chunk_id": "N19-1423_chunk_38",
      "document": "N19-1423",
      "text": "scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.\nWe use a batch size of 32 and ne-tune for 3\nepochs over the data for all GLUE tasks. For each\ntask, we selected the best ne-tuning learning rate\n(among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set.\nAdditionally, for BERTLARGE we found that ne-\ntuning was sometimes unstable on small datasets,\nso we ran several random restarts and selected the\nbest model on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ne-tuning data shufing and clas-\nsier layer initialization.9\nResults are presented in Table 1.",
      "start_pos": 21605,
      "end_pos": 22354,
      "size": 747
    },
    {
      "chunk_id": "N19-1423_chunk_39",
      "document": "N19-1423",
      "text": "del on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ne-tuning data shufing and clas-\nsier layer initialization.9\nResults are presented in Table 1.\nBoth\nBERTBASE and BERTLARGE outperform all sys-\ntems on all tasks by a substantial margin, obtaining\n4.5% and 7.0% respective average accuracy im-\nprovement over the prior state of the art. Note that\nBERTBASE and Open AI GPT are nearly identical\nin terms of model architecture apart from the at-\ntention masking. For the largest and most widely\nreported GLUE task, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofcial\nGLUE leaderboard10, BERTLARGE obtains a score\nof 80.5, compared to Open AI GPT, which obtains\n72.8 as of the date of writing.",
      "start_pos": 22154,
      "end_pos": 22916,
      "size": 761
    },
    {
      "chunk_id": "N19-1423_chunk_40",
      "document": "N19-1423",
      "text": "k, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofcial\nGLUE leaderboard10, BERTLARGE obtains a score\nof 80.5, compared to Open AI GPT, which obtains\n72.8 as of the date of writing.\nWe nd that BERTLARGE signicantly outper-\nforms BERTBASE across all tasks, especially those\nwith very little training data. The effect of model\nsize is explored more thoroughly in Section 5.2.\n4.2\nSQu AD v1.1\nThe\nStanford\nQuestion\nAnswering\nDataset\n(SQu AD v1.1) is a collection of 100k crowd-\nsourced question/answer pairs (Rajpurkar et al.,\n2016).\nGiven a question and a passage from\n9The GLUE data set distribution does not include the Test\nlabels, and we only made a single GLUE evaluation server\nsubmission for each of BERTBASE and BERTLARGE.",
      "start_pos": 22716,
      "end_pos": 23463,
      "size": 746
    },
    {
      "chunk_id": "N19-1423_chunk_41",
      "document": "N19-1423",
      "text": ". Given a question and a passage from 9The GLUE data set distribution does not include the Test labels, and we only made a single GLUE evaluation server submission for each of BERTBASE and BERTLARGE. 10https://gluebenchmark.com/leaderboard Wikipedia containing the answer, the task is to predict the answer text span in the passage. As shown in Figure 1, in the question answer- ing task, we represent the input question and pas- sage as a single packed sequence, with the ques- tion using the A embedding and the passage using the B embedding. We only introduce a start vec- tor S RH and an end vector E RH during ne-tuning. The probability of word i being the start of the answer span is computed as a dot prod- uct between Ti and S followed by a softmax over all of the words in the paragraph:",
      "start_pos": 23263,
      "end_pos": 24059,
      "size": 796
    },
    {
      "chunk_id": "N19-1423_chunk_42",
      "document": "N19-1423",
      "text": "vector E RH during\nne-tuning. The probability of word i being the\nstart of the answer span is computed as a dot prod-\nuct between Ti and S followed by a softmax over\nall of the words in the paragraph: Pi =\ne STi\nP\nj e STj .\nThe analogous formula is used for the end of the\nanswer span. The score of a candidate span from\nposition i to position j is dened as STi + ETj,\nand the maximum scoring span where j i is\nused as a prediction. The training objective is the\nsum of the log-likelihoods of the correct start and\nend positions. We ne-tune for 3 epochs with a\nlearning rate of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well\nas results from top published systems (Seo et al.,\n2017; Clark and Gardner, 2018; Peters et al.,\n2018a; Hu et al., 2018).",
      "start_pos": 23859,
      "end_pos": 24634,
      "size": 774
    },
    {
      "chunk_id": "N19-1423_chunk_43",
      "document": "N19-1423",
      "text": "of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well\nas results from top published systems (Seo et al.,\n2017; Clark and Gardner, 2018; Peters et al.,\n2018a; Hu et al., 2018). The top results from the\nSQu AD leaderboard do not have up-to-date public\nsystem descriptions available,11 and are allowed to\nuse any public data when training their systems.\nWe therefore use modest data augmentation in\nour system by rst ne-tuning on Trivia QA (Joshi\net al., 2017) befor ne-tuning on SQu AD.\nOur best performing system outperforms the top\nleaderboard system by +1.5 F1 in ensembling and\n+1.3 F1 as a single system. In fact, our single\nBERT model outperforms the top ensemble sys-\ntem in terms of F1 score. Without Trivia QA ne-\n11QANet is described in Yu et al.",
      "start_pos": 24434,
      "end_pos": 25213,
      "size": 778
    },
    {
      "chunk_id": "N19-1423_chunk_44",
      "document": "N19-1423",
      "text": "1.5 F1 in ensembling and\n+1.3 F1 as a single system. In fact, our single\nBERT model outperforms the top ensemble sys-\ntem in terms of F1 score. Without Trivia QA ne-\n11QANet is described in Yu et al. (2018), but the system\nhas improved substantially after publication.\n\nSystem\nDev\nTest\nEM\nF1\nEM\nF1\nTop Leaderboard Systems (Dec 10th, 2018)\nHuman\n-\n-\n82.3 91.2\n#1 Ensemble - nlnet\n-\n-\n86.0 91.7\n#2 Ensemble - QANet\n-\n-\n84.5 90.5\nPublished\nBi DAF+ELMo (Single)\n-\n85.6\n-\n85.8\nR. M. Reader (Ensemble)\n81.2 87.9 82.3 88.5\nOurs\nBERTBASE (Single)\n80.8 88.5\n-\n-\nBERTLARGE (Single)\n84.1 90.9\n-\n-\nBERTLARGE (Ensemble)\n85.8 91.8\n-\n-\nBERTLARGE (Sgl.+Trivia QA)\n84.2 91.1 85.1 91.8\nBERTLARGE (Ens.+Trivia QA) 86.2 92.2 87.4 93.2\nTable 2:\nSQu AD 1.1 results.",
      "start_pos": 25013,
      "end_pos": 25757,
      "size": 743
    },
    {
      "chunk_id": "N19-1423_chunk_45",
      "document": "N19-1423",
      "text": "88.5 - - BERTLARGE (Single) 84.1 90.9 - - BERTLARGE (Ensemble) 85.8 91.8 - - BERTLARGE (Sgl.+Trivia QA) 84.2 91.1 85.1 91.8 BERTLARGE (Ens.+Trivia QA) 86.2 92.2 87.4 93.2 Table 2: SQu AD 1.1 results. The BERT ensemble is 7x systems which use different pre-training check- points and ne-tuning seeds. System Dev Test EM F1 EM F1 Top Leaderboard Systems (Dec 10th, 2018) Human 86.3 89.0 86.9 89.5 #1 Single - MIR-MRC (F-Net) - - 74.8 78.0 #2 Single - nlnet - - 74.2 77.1 Published unet (Ensemble) - - 71.4 74.9 SLQA+ (Single) - 71.4 74.4 Ours BERTLARGE (Single) 78.7 81.9 80.0 83.1 Table 3: SQu AD 2.0 results. We exclude entries that use BERT as one of their components. tuning data, we only lose 0.1-0.4 F1, still outper- forming all existing systems by a wide margin.12 4.3 SQu AD v2.0 The SQu AD",
      "start_pos": 25557,
      "end_pos": 26354,
      "size": 797
    },
    {
      "chunk_id": "N19-1423_chunk_46",
      "document": "N19-1423",
      "text": ".0 results. We exclude entries that use BERT as one of their components. tuning data, we only lose 0.1-0.4 F1, still outper- forming all existing systems by a wide margin.12 4.3 SQu AD v2.0 The SQu AD 2.0 task extends the SQu AD 1.1 problem denition by allowing for the possibility that no short answer exists in the provided para- graph, making the problem more realistic. We use a simple approach to extend the SQu AD v1.1 BERT model for this task. We treat ques- tions that do not have an answer as having an an- swer span with start and end at the [CLS] to- ken. The probability space for the start and end answer span positions is extended to include the position of the [CLS] token. For prediction, we compare the score of the no-answer span: snull = SC + EC to the score of the best non-null",
      "start_pos": 26154,
      "end_pos": 26952,
      "size": 798
    },
    {
      "chunk_id": "N19-1423_chunk_47",
      "document": "N19-1423",
      "text": "tart and end answer span positions is extended to include the position of the [CLS] token. For prediction, we compare the score of the no-answer span: snull = SC + EC to the score of the best non-null span 12The Trivia QA data we used consists of paragraphs from Trivia QA-Wiki formed of the rst 400 tokens in documents, that contain at least one of the provided possible answers. System Dev Test ESIM+Glo Ve 51.9 52.7 ESIM+ELMo 59.1 59.2 Open AI GPT - 78.0 BERTBASE 81.6 - BERTLARGE 86.6 86.3 Human (expert) - 85.0 Human (5 annotations) - 88.0 Table 4: SWAG Dev and Test accuracies. Human per- formance is measured with 100 samples, as reported in the SWAG paper. si,j = maxji STi + ETj. We predict a non-null answer when si,j > snull + , where the thresh- old is selected on the dev set to",
      "start_pos": 26752,
      "end_pos": 27543,
      "size": 791
    },
    {
      "chunk_id": "N19-1423_chunk_48",
      "document": "N19-1423",
      "text": "er-\nformance is measured with 100 samples, as reported in\nthe SWAG paper.\n\nsi,j = maxji STi + ETj. We predict a non-null\nanswer when \nsi,j > snull + , where the thresh-\nold  is selected on the dev set to maximize F1.\nWe did not use Trivia QA data for this model. We\nne-tuned for 2 epochs with a learning rate of 5e-5\nand a batch size of 48.\nThe results compared to prior leaderboard en-\ntries and top published work (Sun et al., 2018;\nWang et al., 2018b) are shown in Table 3, exclud-\ning systems that use BERT as one of their com-\nponents. We observe a +5.1 F1 improvement over\nthe previous best system.\n4.4\nSWAG\nThe Situations With Adversarial Generations\n(SWAG) dataset contains 113k sentence-pair com-\npletion examples that evaluate grounded common-\nsense inference (Zellers et al., 2018).",
      "start_pos": 27343,
      "end_pos": 28137,
      "size": 793
    },
    {
      "chunk_id": "N19-1423_chunk_49",
      "document": "N19-1423",
      "text": "st system.\n4.4\nSWAG\nThe Situations With Adversarial Generations\n(SWAG) dataset contains 113k sentence-pair com-\npletion examples that evaluate grounded common-\nsense inference (Zellers et al., 2018). Given a sen-\ntence, the task is to choose the most plausible con-\ntinuation among four choices.\nWhen ne-tuning on the SWAG dataset, we\nconstruct four input sequences, each containing\nthe concatenation of the given sentence (sentence\nA) and a possible continuation (sentence B). The\nonly task-specic parameters introduced is a vec-\ntor whose dot product with the [CLS] token rep-\nresentation C denotes a score for each choice\nwhich is normalized with a softmax layer.\nWe ne-tune the model for 3 epochs with a\nlearning rate of 2e-5 and a batch size of 16. Re-\nsults are presented in Table 4.",
      "start_pos": 27937,
      "end_pos": 28727,
      "size": 789
    },
    {
      "chunk_id": "N19-1423_chunk_50",
      "document": "N19-1423",
      "text": "C denotes a score for each choice\nwhich is normalized with a softmax layer.\nWe ne-tune the model for 3 epochs with a\nlearning rate of 2e-5 and a batch size of 16. Re-\nsults are presented in Table 4. BERTLARGE out-\nperforms the authors baseline ESIM+ELMo sys-\ntem by +27.1% and Open AI GPT by 8.3%.\nAblation Studies\nIn this section, we perform ablation experiments\nover a number of facets of BERT in order to better\nunderstand their relative importance. Additional\n\nDev Set\nTasks\nMNLI-m QNLI MRPC SST-2 SQu AD\n(Acc)\n(Acc)\n(Acc)\n(Acc)\n(F1)\nBERTBASE\n84.4\n88.4\n86.7\n92.7\n88.5\nNo NSP\n83.9\n84.9\n86.5\n92.6\n87.9\nLTR & No NSP\n82.1\n84.3\n77.5\n92.1\n77.8\n+ Bi LSTM\n82.1\n84.1\n75.7\n91.6\n84.9\nTable 5: Ablation over the pre-training tasks using the\nBERTBASE architecture.",
      "start_pos": 28527,
      "end_pos": 29284,
      "size": 755
    },
    {
      "chunk_id": "N19-1423_chunk_51",
      "document": "N19-1423",
      "text": "86.7 92.7 88.5 No NSP 83.9 84.9 86.5 92.6 87.9 LTR & No NSP 82.1 84.3 77.5 92.1 77.8 + Bi LSTM 82.1 84.1 75.7 91.6 84.9 Table 5: Ablation over the pre-training tasks using the BERTBASE architecture. No NSP is trained without the next sentence prediction task. LTR & No NSP is trained as a left-to-right LM without the next sentence prediction, like Open AI GPT. + Bi LSTM adds a ran- domly initialized Bi LSTM on top of the LTR + No NSP model during ne-tuning. ablation studies can be found in Appendix C. 5.1 Effect of Pre-training Tasks We demonstrate the importance of the deep bidi- rectionality of BERT by evaluating two pre- training objectives using exactly the same pre- training data, ne-tuning scheme, and hyperpa- rameters as BERTBASE: No NSP: A bidirectional model which is trained",
      "start_pos": 29084,
      "end_pos": 29877,
      "size": 793
    },
    {
      "chunk_id": "N19-1423_chunk_52",
      "document": "N19-1423",
      "text": "onality of BERT by evaluating two pre-\ntraining objectives using exactly the same pre-\ntraining data, ne-tuning scheme, and hyperpa-\nrameters as BERTBASE:\nNo NSP: A bidirectional model which is trained\nusing the masked LM (MLM) but without the\nnext sentence prediction (NSP) task.\nLTR & No NSP: A left-context-only model which\nis trained using a standard Left-to-Right (LTR)\nLM, rather than an MLM. The left-only constraint\nwas also applied at ne-tuning, because removing\nit introduced a pre-train/ne-tune mismatch that\ndegraded downstream performance. Additionally,\nthis model was pre-trained without the NSP task.\nThis is directly comparable to Open AI GPT, but\nusing our larger training dataset, our input repre-\nsentation, and our ne-tuning scheme.",
      "start_pos": 29677,
      "end_pos": 30430,
      "size": 752
    },
    {
      "chunk_id": "N19-1423_chunk_53",
      "document": "N19-1423",
      "text": "Additionally,\nthis model was pre-trained without the NSP task.\nThis is directly comparable to Open AI GPT, but\nusing our larger training dataset, our input repre-\nsentation, and our ne-tuning scheme.\nWe rst examine the impact brought by the NSP\ntask.\nIn Table 5, we show that removing NSP\nhurts performance signicantly on QNLI, MNLI,\nand SQu AD 1.1. Next, we evaluate the impact\nof training bidirectional representations by com-\nparing No NSP to LTR & No NSP. The LTR\nmodel performs worse than the MLM model on all\ntasks, with large drops on MRPC and SQu AD.\nFor SQu AD it is intuitively clear that a LTR\nmodel will perform poorly at token predictions,\nsince the token-level hidden states have no right-\nside context.",
      "start_pos": 30230,
      "end_pos": 30948,
      "size": 717
    },
    {
      "chunk_id": "N19-1423_chunk_54",
      "document": "N19-1423",
      "text": "ks, with large drops on MRPC and SQu AD. For SQu AD it is intuitively clear that a LTR model will perform poorly at token predictions, since the token-level hidden states have no right- side context. In order to make a good faith at- tempt at strengthening the LTR system, we added a randomly initialized Bi LSTM on top. This does signicantly improve results on SQu AD, but the results are still far worse than those of the pre- trained bidirectional models. The Bi LSTM hurts performance on the GLUE tasks. We recognize that it would also be possible to train separate LTR and RTL models and represent each token as the concatenation of the two mod- els, as ELMo does. However: (a) this is twice as expensive as a single bidirectional model; (b) this is non-intuitive for tasks like QA, since the",
      "start_pos": 30748,
      "end_pos": 31545,
      "size": 797
    },
    {
      "chunk_id": "N19-1423_chunk_55",
      "document": "N19-1423",
      "text": "esent\neach token as the concatenation of the two mod-\nels, as ELMo does. However: (a) this is twice as\nexpensive as a single bidirectional model; (b) this\nis non-intuitive for tasks like QA, since the RTL\nmodel would not be able to condition the answer\non the question; (c) this it is strictly less powerful\nthan a deep bidirectional model, since it can use\nboth left and right context at every layer.\n5.2\nEffect of Model Size\nIn this section, we explore the effect of model size\non ne-tuning task accuracy. We trained a number\nof BERT models with a differing number of layers,\nhidden units, and attention heads, while otherwise\nusing the same hyperparameters and training pro-\ncedure as described previously.\nResults on selected GLUE tasks are shown in\nTable 6.",
      "start_pos": 31345,
      "end_pos": 32108,
      "size": 762
    },
    {
      "chunk_id": "N19-1423_chunk_56",
      "document": "N19-1423",
      "text": "ber of layers,\nhidden units, and attention heads, while otherwise\nusing the same hyperparameters and training pro-\ncedure as described previously.\nResults on selected GLUE tasks are shown in\nTable 6. In this table, we report the average Dev\nSet accuracy from 5 random restarts of ne-tuning.\nWe can see that larger models lead to a strict ac-\ncuracy improvement across all four datasets, even\nfor MRPC which only has 3,600 labeled train-\ning examples, and is substantially different from\nthe pre-training tasks. It is also perhaps surpris-\ning that we are able to achieve such signicant\nimprovements on top of models which are al-\nready quite large relative to the existing literature.\nFor example, the largest Transformer explored in\nVaswani et al.",
      "start_pos": 31908,
      "end_pos": 32657,
      "size": 748
    },
    {
      "chunk_id": "N19-1423_chunk_57",
      "document": "N19-1423",
      "text": "e are able to achieve such signicant\nimprovements on top of models which are al-\nready quite large relative to the existing literature.\nFor example, the largest Transformer explored in\nVaswani et al. (2017) is (L=6, H=1024, A=16)\nwith 100M parameters for the encoder, and the\nlargest Transformer we have found in the literature\nis (L=64, H=512, A=2) with 235M parameters\n(Al-Rfou et al., 2018). By contrast, BERTBASE\ncontains 110M parameters and BERTLARGE con-\ntains 340M parameters.\nIt has long been known that increasing the\nmodel size will lead to continual improvements\non large-scale tasks such as machine translation\nand language modeling, which is demonstrated\nby the LM perplexity of held-out training data\nshown in Table 6.",
      "start_pos": 32457,
      "end_pos": 33190,
      "size": 732
    },
    {
      "chunk_id": "N19-1423_chunk_58",
      "document": "N19-1423",
      "text": "size will lead to continual improvements\non large-scale tasks such as machine translation\nand language modeling, which is demonstrated\nby the LM perplexity of held-out training data\nshown in Table 6.\nHowever, we believe that\nthis is the rst work to demonstrate convinc-\ningly that scaling to extreme model sizes also\nleads to large improvements on very small scale\ntasks, provided that the model has been suf-\nciently pre-trained. Peters et al. (2018b) presented\n\nmixed results on the downstream task impact of\nincreasing the pre-trained bi-LM size from two\nto four layers and Melamud et al. (2016) men-\ntioned in passing that increasing hidden dimen-\nsion size from 200 to 600 helped, but increasing\nfurther to 1,000 did not bring further improve-\nments.",
      "start_pos": 32990,
      "end_pos": 33746,
      "size": 755
    },
    {
      "chunk_id": "N19-1423_chunk_59",
      "document": "N19-1423",
      "text": "o to four layers and Melamud et al. (2016) men- tioned in passing that increasing hidden dimen- sion size from 200 to 600 helped, but increasing further to 1,000 did not bring further improve- ments. Both of these prior works used a feature- based approach we hypothesize that when the model is ne-tuned directly on the downstream tasks and uses only a very small number of ran- domly initialized additional parameters, the task- specic models can benet from the larger, more expressive pre-trained representations even when downstream task data is very small. 5.3 Feature-based Approach with BERT All of the BERT results presented so far have used the ne-tuning approach, where a simple classi- cation layer is added to the pre-trained model, and all parameters are jointly ne-tuned on a down-",
      "start_pos": 33546,
      "end_pos": 34340,
      "size": 794
    },
    {
      "chunk_id": "N19-1423_chunk_60",
      "document": "N19-1423",
      "text": "BERT All of the BERT results presented so far have used the ne-tuning approach, where a simple classi- cation layer is added to the pre-trained model, and all parameters are jointly ne-tuned on a down- stream task. However, the feature-based approach, where xed features are extracted from the pre- trained model, has certain advantages. First, not all tasks can be easily represented by a Trans- former encoder architecture, and therefore require a task-specic model architecture to be added. Second, there are major computational benets to pre-compute an expensive representation of the training data once and then run many experiments with cheaper models on top of this representation. In this section, we compare the two approaches by applying BERT to the Co NLL-2003 Named Entity Recognition",
      "start_pos": 34140,
      "end_pos": 34936,
      "size": 796
    },
    {
      "chunk_id": "N19-1423_chunk_61",
      "document": "N19-1423",
      "text": "g data once and then run many experiments\nwith cheaper models on top of this representation.\nIn this section, we compare the two approaches\nby applying BERT to the Co NLL-2003 Named\nEntity Recognition (NER) task (Tjong Kim Sang\nand De Meulder, 2003). In the input to BERT, we\nuse a case-preserving Word Piece model, and we\ninclude the maximal document context provided\nby the data. Following standard practice, we for-\nmulate this as a tagging task but do not use a CRF\nHyperparams\nDev Set Accuracy\n#L\n#H #A LM (ppl) MNLI-m MRPC SST-2\n768\n5.84\n77.9\n79.8\n88.4\n768\n5.24\n80.6\n82.2\n90.7\n768\n4.68\n81.9\n84.8\n91.3\n768\n3.99\n84.4\n86.7\n92.9\n12 1024\n3.54\n85.7\n86.9\n93.3\n24 1024\n3.23\n86.6\n87.8\n93.7\nTable 6:\nAblation over BERT model size.",
      "start_pos": 34736,
      "end_pos": 35463,
      "size": 726
    },
    {
      "chunk_id": "N19-1423_chunk_62",
      "document": "N19-1423",
      "text": "C SST-2\n768\n5.84\n77.9\n79.8\n88.4\n768\n5.24\n80.6\n82.2\n90.7\n768\n4.68\n81.9\n84.8\n91.3\n768\n3.99\n84.4\n86.7\n92.9\n12 1024\n3.54\n85.7\n86.9\n93.3\n24 1024\n3.23\n86.6\n87.8\n93.7\nTable 6:\nAblation over BERT model size. #L = the\nnumber of layers; #H = hidden size; #A = number of at-\ntention heads. LM (ppl) is the masked LM perplexity\nof held-out training data.\nSystem\nDev F1 Test F1\nELMo (Peters et al., 2018a)\n95.7\n92.2\nCVT (Clark et al., 2018)\n-\n92.6\nCSE (Akbik et al., 2018)\n-\n93.1\nFine-tuning approach\nBERTLARGE\n96.6\n92.8\nBERTBASE\n96.4\n92.4\nFeature-based approach (BERTBASE)\nEmbeddings\n91.0\n-\nSecond-to-Last Hidden\n95.6\n-\nLast Hidden\n94.9\n-\nWeighted Sum Last Four Hidden\n95.9\n-\nConcat Last Four Hidden\n96.1\n-\nWeighted Sum All 12 Layers\n95.5\n-\nTable 7: Co NLL-2003 Named Entity Recognition re-\nsults.",
      "start_pos": 35263,
      "end_pos": 36049,
      "size": 785
    },
    {
      "chunk_id": "N19-1423_chunk_63",
      "document": "N19-1423",
      "text": "to-Last Hidden\n95.6\n-\nLast Hidden\n94.9\n-\nWeighted Sum Last Four Hidden\n95.9\n-\nConcat Last Four Hidden\n96.1\n-\nWeighted Sum All 12 Layers\n95.5\n-\nTable 7: Co NLL-2003 Named Entity Recognition re-\nsults. Hyperparameters were selected using the Dev\nset. The reported Dev and Test scores are averaged over\n5 random restarts using those hyperparameters.\nlayer in the output. We use the representation of\nthe rst sub-token as the input to the token-level\nclassier over the NER label set.\nTo ablate the ne-tuning approach, we apply the\nfeature-based approach by extracting the activa-\ntions from one or more layers without ne-tuning\nany parameters of BERT. These contextual em-\nbeddings are used as input to a randomly initial-\nized two-layer 768-dimensional Bi LSTM before\nthe classication layer.",
      "start_pos": 35849,
      "end_pos": 36638,
      "size": 788
    },
    {
      "chunk_id": "N19-1423_chunk_64",
      "document": "N19-1423",
      "text": "e or more layers without ne-tuning\nany parameters of BERT. These contextual em-\nbeddings are used as input to a randomly initial-\nized two-layer 768-dimensional Bi LSTM before\nthe classication layer.\nResults are presented in Table 7. BERTLARGE\nperforms competitively with state-of-the-art meth-\nods. The best performing method concatenates the\ntoken representations from the top four hidden lay-\ners of the pre-trained Transformer, which is only\n0.3 F1 behind ne-tuning the entire model. This\ndemonstrates that BERT is effective for both ne-\ntuning and feature-based approaches.\nConclusion\nRecent empirical improvements due to transfer\nlearning with language models have demonstrated\nthat rich, unsupervised pre-training is an integral\npart of many language understanding systems.",
      "start_pos": 36438,
      "end_pos": 37219,
      "size": 780
    },
    {
      "chunk_id": "N19-1423_chunk_65",
      "document": "N19-1423",
      "text": "nclusion\nRecent empirical improvements due to transfer\nlearning with language models have demonstrated\nthat rich, unsupervised pre-training is an integral\npart of many language understanding systems. In\nparticular, these results enable even low-resource\ntasks to benet from deep unidirectional architec-\ntures. Our major contribution is further general-\nizing these ndings to deep bidirectional architec-\ntures, allowing the same pre-trained model to suc-\ncessfully tackle a broad set of NLP tasks.\n\nReferences\nAlan Akbik, Duncan Blythe, and Roland Vollgraf.\n2018. Contextual string embeddings for sequence\nlabeling. In Proceedings of the 27th International\nConference on Computational Linguistics, pages\n16381649.\nRami Al-Rfou, Dokook Choe, Noah Constant, Mandy\nGuo, and Llion Jones. 2018.",
      "start_pos": 37019,
      "end_pos": 37810,
      "size": 790
    },
    {
      "chunk_id": "N19-1423_chunk_66",
      "document": "N19-1423",
      "text": "gs for sequence\nlabeling. In Proceedings of the 27th International\nConference on Computational Linguistics, pages\n16381649.\nRami Al-Rfou, Dokook Choe, Noah Constant, Mandy\nGuo, and Llion Jones. 2018.\nCharacter-level lan-\nguage modeling with deeper self-attention.\nar Xiv\npreprint ar Xiv:1808.04444.\nRie Kubota Ando and Tong Zhang. 2005. A framework\nfor learning predictive structures from multiple tasks\nand unlabeled data. Journal of Machine Learning\nResearch, 6(Nov):18171853.\nLuisa Bentivogli,\nBernardo Magnini,\nIdo Dagan,\nHoa Trang Dang, and Danilo Giampiccolo. 2009.\nThe fth PASCAL recognizing textual entailment\nchallenge. In TAC. NIST.\nJohn Blitzer, Ryan Mc Donald, and Fernando Pereira.\n2006. Domain adaptation with structural correspon-\ndence learning.",
      "start_pos": 37610,
      "end_pos": 38372,
      "size": 761
    },
    {
      "chunk_id": "N19-1423_chunk_67",
      "document": "N19-1423",
      "text": "lo. 2009.\nThe fth PASCAL recognizing textual entailment\nchallenge. In TAC. NIST.\nJohn Blitzer, Ryan Mc Donald, and Fernando Pereira.\n2006. Domain adaptation with structural correspon-\ndence learning. In Proceedings of the 2006 confer-\nence on empirical methods in natural language pro-\ncessing, pages 120128. Association for Computa-\ntional Linguistics.\nSamuel R. Bowman, Gabor Angeli, Christopher Potts,\nand Christopher D. Manning. 2015. A large anno-\ntated corpus for learning natural language inference.\nIn EMNLP. Association for Computational Linguis-\ntics.\nPeter F Brown, Peter V Desouza, Robert L Mercer,\nVincent J Della Pietra, and Jenifer C Lai. 1992.\nClass-based n-gram models of natural language.\nComputational linguistics, 18(4):467479.",
      "start_pos": 38172,
      "end_pos": 38920,
      "size": 747
    },
    {
      "chunk_id": "N19-1423_chunk_68",
      "document": "N19-1423",
      "text": "inguis-\ntics.\nPeter F Brown, Peter V Desouza, Robert L Mercer,\nVincent J Della Pietra, and Jenifer C Lai. 1992.\nClass-based n-gram models of natural language.\nComputational linguistics, 18(4):467479.\nDaniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-\nGazpio, and Lucia Specia. 2017.\nSemeval-2017\ntask 1: Semantic textual similarity multilingual and\ncrosslingual focused evaluation.\nIn Proceedings\nof the 11th International Workshop on Semantic\nEvaluation (Sem Eval-2017), pages 114, Vancou-\nver, Canada. Association for Computational Lin-\nguistics.\nCiprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge,\nThorsten Brants, Phillipp Koehn, and Tony Robin-\nson. 2013. One billion word benchmark for measur-\ning progress in statistical language modeling. ar Xiv\npreprint ar Xiv:1312.3005.\nZ. Chen, H.",
      "start_pos": 38720,
      "end_pos": 39513,
      "size": 792
    },
    {
      "chunk_id": "N19-1423_chunk_69",
      "document": "N19-1423",
      "text": "Qi Ge,\nThorsten Brants, Phillipp Koehn, and Tony Robin-\nson. 2013. One billion word benchmark for measur-\ning progress in statistical language modeling. ar Xiv\npreprint ar Xiv:1312.3005.\nZ. Chen, H. Zhang, X. Zhang, and L. Zhao. 2018.\nQuora question pairs.\nChristopher Clark and Matt Gardner. 2018.\nSimple\nand effective multi-paragraph reading comprehen-\nsion. In ACL.\nKevin Clark, Minh-Thang Luong, Christopher D Man-\nning, and Quoc Le. 2018.\nSemi-supervised se-\nquence modeling with cross-view training. In Pro-\nceedings of the 2018 Conference on Empirical Meth-\nods in Natural Language Processing, pages 1914\n1925.\nRonan Collobert and Jason Weston. 2008. A unied\narchitecture for natural language processing: Deep\nneural networks with multitask learning.",
      "start_pos": 39313,
      "end_pos": 40072,
      "size": 757
    },
    {
      "chunk_id": "N19-1423_chunk_70",
      "document": "N19-1423",
      "text": "Meth-\nods in Natural Language Processing, pages 1914\n1925.\nRonan Collobert and Jason Weston. 2008. A unied\narchitecture for natural language processing: Deep\nneural networks with multitask learning.\nIn Pro-\nceedings of the 25th international conference on\nMachine learning, pages 160167. ACM.\nAlexis Conneau, Douwe Kiela, Holger Schwenk, Loc\nBarrault, and Antoine Bordes. 2017.\nSupervised\nlearning of universal sentence representations from\nnatural language inference data. In Proceedings of\nthe 2017 Conference on Empirical Methods in Nat-\nural Language Processing, pages 670680, Copen-\nhagen, Denmark. Association for Computational\nLinguistics.\nAndrew M Dai and Quoc V Le. 2015. Semi-supervised\nsequence learning. In Advances in neural informa-\ntion processing systems, pages 30793087.\nJ.",
      "start_pos": 39872,
      "end_pos": 40664,
      "size": 790
    },
    {
      "chunk_id": "N19-1423_chunk_71",
      "document": "N19-1423",
      "text": "en, Denmark. Association for Computational\nLinguistics.\nAndrew M Dai and Quoc V Le. 2015. Semi-supervised\nsequence learning. In Advances in neural informa-\ntion processing systems, pages 30793087.\nJ. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-\nFei. 2009. Image Net: A Large-Scale Hierarchical\nImage Database. In CVPR09.\nWilliam B Dolan and Chris Brockett. 2005. Automati-\ncally constructing a corpus of sentential paraphrases.\nIn Proceedings of the Third International Workshop\non Paraphrasing (IWP2005).\nWilliam Fedus, Ian Goodfellow, and Andrew M Dai.\n2018. Maskgan: Better text generation via lling in\nthe . ar Xiv preprint ar Xiv:1801.07736.\nDan Hendrycks and Kevin Gimpel. 2016.\nBridging\nnonlinearities and stochastic regularizers with gaus-\nsian error linear units.",
      "start_pos": 40464,
      "end_pos": 41247,
      "size": 782
    },
    {
      "chunk_id": "N19-1423_chunk_72",
      "document": "N19-1423",
      "text": "ter text generation via lling in\nthe . ar Xiv preprint ar Xiv:1801.07736.\nDan Hendrycks and Kevin Gimpel. 2016.\nBridging\nnonlinearities and stochastic regularizers with gaus-\nsian error linear units. Co RR, abs/1606.08415.\nFelix Hill, Kyunghyun Cho, and Anna Korhonen. 2016.\nLearning distributed representations of sentences\nfrom unlabelled data. In Proceedings of the 2016\nConference of the North American Chapter of the\nAssociation for Computational Linguistics: Human\nLanguage Technologies. Association for Computa-\ntional Linguistics.\nJeremy Howard and Sebastian Ruder. 2018. Universal\nlanguage model ne-tuning for text classication. In\nACL. Association for Computational Linguistics.\nMinghao Hu, Yuxing Peng, Zhen Huang, Xipeng Qiu,\nFuru Wei, and Ming Zhou. 2018.",
      "start_pos": 41047,
      "end_pos": 41816,
      "size": 768
    },
    {
      "chunk_id": "N19-1423_chunk_73",
      "document": "N19-1423",
      "text": "der. 2018. Universal\nlanguage model ne-tuning for text classication. In\nACL. Association for Computational Linguistics.\nMinghao Hu, Yuxing Peng, Zhen Huang, Xipeng Qiu,\nFuru Wei, and Ming Zhou. 2018.\nReinforced\nmnemonic reader for machine reading comprehen-\nsion. In IJCAI.\nYacine Jernite, Samuel R. Bowman, and David Son-\ntag. 2017. Discourse-based objectives for fast un-\nsupervised sentence representation learning. Co RR,\nabs/1705.00557.\n\nMandar Joshi, Eunsol Choi, Daniel S Weld, and Luke\nZettlemoyer. 2017. Triviaqa: A large scale distantly\nsupervised challenge dataset for reading comprehen-\nsion. In ACL.\nRyan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,\nRichard Zemel, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Skip-thought vectors.",
      "start_pos": 41616,
      "end_pos": 42371,
      "size": 754
    },
    {
      "chunk_id": "N19-1423_chunk_74",
      "document": "N19-1423",
      "text": "ed challenge dataset for reading comprehen-\nsion. In ACL.\nRyan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,\nRichard Zemel, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Skip-thought vectors. In\nAdvances in neural information processing systems,\npages 32943302.\nQuoc Le and Tomas Mikolov. 2014. Distributed rep-\nresentations of sentences and documents. In Inter-\nnational Conference on Machine Learning, pages\n11881196.\nHector J Levesque, Ernest Davis, and Leora Morgen-\nstern. 2011. The winograd schema challenge. In\nAaai spring symposium: Logical formalizations of\ncommonsense reasoning, volume 46, page 47.\nLajanugen Logeswaran and Honglak Lee. 2018. An\nefcient framework for learning sentence represen-\ntations.\nIn International Conference on Learning\nRepresentations.",
      "start_pos": 42171,
      "end_pos": 42952,
      "size": 780
    },
    {
      "chunk_id": "N19-1423_chunk_75",
      "document": "N19-1423",
      "text": "sense reasoning, volume 46, page 47.\nLajanugen Logeswaran and Honglak Lee. 2018. An\nefcient framework for learning sentence represen-\ntations.\nIn International Conference on Learning\nRepresentations.\nBryan Mc Cann, James Bradbury, Caiming Xiong, and\nRichard Socher. 2017. Learned in translation: Con-\ntextualized word vectors. In NIPS.\nOren Melamud, Jacob Goldberger, and Ido Dagan.\n2016. context2vec: Learning generic context em-\nbedding with bidirectional LSTM. In Co NLL.\nTomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-\nrado, and Jeff Dean. 2013. Distributed representa-\ntions of words and phrases and their compositional-\nity. In Advances in Neural Information Processing\nSystems 26, pages 31113119. Curran Associates,\nInc.\nAndriy Mnih and Geoffrey E Hinton. 2009.",
      "start_pos": 42752,
      "end_pos": 43526,
      "size": 773
    },
    {
      "chunk_id": "N19-1423_chunk_76",
      "document": "N19-1423",
      "text": "nta-\ntions of words and phrases and their compositional-\nity. In Advances in Neural Information Processing\nSystems 26, pages 31113119. Curran Associates,\nInc.\nAndriy Mnih and Geoffrey E Hinton. 2009. A scal-\nable hierarchical distributed language model.\nIn\nD. Koller, D. Schuurmans, Y. Bengio, and L. Bot-\ntou, editors, Advances in Neural Information Pro-\ncessing Systems 21, pages 10811088. Curran As-\nsociates, Inc.\nAnkur P Parikh, Oscar Tackstrom, Dipanjan Das, and\nJakob Uszkoreit. 2016. A decomposable attention\nmodel for natural language inference. In EMNLP.\nJeffrey Pennington, Richard Socher, and Christo-\npher D. Manning. 2014. Glove: Global vectors for\nword representation. In Empirical Methods in Nat-\nural Language Processing (EMNLP), pages 1532\n1543.",
      "start_pos": 43326,
      "end_pos": 44090,
      "size": 763
    },
    {
      "chunk_id": "N19-1423_chunk_77",
      "document": "N19-1423",
      "text": "Jeffrey Pennington, Richard Socher, and Christo-\npher D. Manning. 2014. Glove: Global vectors for\nword representation. In Empirical Methods in Nat-\nural Language Processing (EMNLP), pages 1532\n1543.\nMatthew Peters, Waleed Ammar, Chandra Bhagavat-\nula, and Russell Power. 2017. Semi-supervised se-\nquence tagging with bidirectional language models.\nIn ACL.\nMatthew Peters, Mark Neumann, Mohit Iyyer, Matt\nGardner, Christopher Clark, Kenton Lee, and Luke\nZettlemoyer. 2018a. Deep contextualized word rep-\nresentations. In NAACL.\nMatthew Peters, Mark Neumann, Luke Zettlemoyer,\nand Wen-tau Yih. 2018b.\nDissecting contextual\nword embeddings: Architecture and representation.\nIn Proceedings of the 2018 Conference on Empiri-\ncal Methods in Natural Language Processing, pages\n14991509.",
      "start_pos": 43890,
      "end_pos": 44671,
      "size": 779
    },
    {
      "chunk_id": "N19-1423_chunk_78",
      "document": "N19-1423",
      "text": "en-tau Yih. 2018b.\nDissecting contextual\nword embeddings: Architecture and representation.\nIn Proceedings of the 2018 Conference on Empiri-\ncal Methods in Natural Language Processing, pages\n14991509.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and\nIlya Sutskever. 2018.\nImproving language under-\nstanding with unsupervised learning. Technical re-\nport, Open AI.\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and\nPercy Liang. 2016. Squad: 100,000+ questions for\nmachine comprehension of text. In Proceedings of\nthe 2016 Conference on Empirical Methods in Nat-\nural Language Processing, pages 23832392.\nMinjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and\nHannaneh Hajishirzi. 2017. Bidirectional attention\now for machine comprehension. In ICLR.",
      "start_pos": 44471,
      "end_pos": 45220,
      "size": 748
    },
    {
      "chunk_id": "N19-1423_chunk_79",
      "document": "N19-1423",
      "text": "l Methods in Nat-\nural Language Processing, pages 23832392.\nMinjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and\nHannaneh Hajishirzi. 2017. Bidirectional attention\now for machine comprehension. In ICLR.\nRichard Socher, Alex Perelygin, Jean Wu, Jason\nChuang, Christopher D Manning, Andrew Ng, and\nChristopher Potts. 2013.\nRecursive deep models\nfor semantic compositionality over a sentiment tree-\nbank.\nIn Proceedings of the 2013 conference on\nempirical methods in natural language processing,\npages 16311642.\nFu Sun, Linyang Li, Xipeng Qiu, and Yang Liu.\n2018.\nU-net:\nMachine reading comprehension\nwith unanswerable questions.\nar Xiv preprint\nar Xiv:1810.06638.\nWilson L Taylor. 1953.\nCloze procedure:\nA new\ntool for measuring readability. Journalism Bulletin,\n30(4):415433.",
      "start_pos": 45020,
      "end_pos": 45792,
      "size": 771
    },
    {
      "chunk_id": "N19-1423_chunk_80",
      "document": "N19-1423",
      "text": "reading comprehension\nwith unanswerable questions.\nar Xiv preprint\nar Xiv:1810.06638.\nWilson L Taylor. 1953.\nCloze procedure:\nA new\ntool for measuring readability. Journalism Bulletin,\n30(4):415433.\nErik F Tjong Kim Sang and Fien De Meulder.\n2003.\nIntroduction to the conll-2003 shared task:\nLanguage-independent named entity recognition. In\nCo NLL.\nJoseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.\nWord representations: A simple and general method\nfor semi-supervised learning. In Proceedings of the\n48th Annual Meeting of the Association for Compu-\ntational Linguistics, ACL 10, pages 384394.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob\nUszkoreit, Llion Jones, Aidan N Gomez, Lukasz\nKaiser, and Illia Polosukhin. 2017. Attention is all\nyou need.",
      "start_pos": 45592,
      "end_pos": 46350,
      "size": 756
    },
    {
      "chunk_id": "N19-1423_chunk_81",
      "document": "N19-1423",
      "text": "tional Linguistics, ACL 10, pages 384394.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob\nUszkoreit, Llion Jones, Aidan N Gomez, Lukasz\nKaiser, and Illia Polosukhin. 2017. Attention is all\nyou need. In Advances in Neural Information Pro-\ncessing Systems, pages 60006010.\nPascal Vincent, Hugo Larochelle, Yoshua Bengio, and\nPierre-Antoine Manzagol. 2008.\nExtracting and\ncomposing robust features with denoising autoen-\ncoders.\nIn Proceedings of the 25th international\nconference on Machine learning, pages 10961103.\nACM.\nAlex Wang, Amanpreet Singh, Julian Michael, Fe-\nlix Hill, Omer Levy, and Samuel Bowman. 2018a.\nGlue: A multi-task benchmark and analysis platform\n\nfor natural language understanding.",
      "start_pos": 46150,
      "end_pos": 46854,
      "size": 703
    },
    {
      "chunk_id": "N19-1423_chunk_82",
      "document": "N19-1423",
      "text": "s 10961103.\nACM.\nAlex Wang, Amanpreet Singh, Julian Michael, Fe-\nlix Hill, Omer Levy, and Samuel Bowman. 2018a.\nGlue: A multi-task benchmark and analysis platform\n\nfor natural language understanding. In Proceedings\nof the 2018 EMNLP Workshop Blackbox NLP: An-\nalyzing and Interpreting Neural Networks for NLP,\npages 353355.\nWei Wang, Ming Yan, and Chen Wu. 2018b. Multi-\ngranularity hierarchical attention fusion networks\nfor reading comprehension and question answering.\nIn Proceedings of the 56th Annual Meeting of the As-\nsociation for Computational Linguistics (Volume 1:\nLong Papers). Association for Computational Lin-\nguistics.\nAlex Warstadt, Amanpreet Singh, and Samuel R Bow-\nman. 2018.\nNeural network acceptability judg-\nments. ar Xiv preprint ar Xiv:1805.12471.",
      "start_pos": 46654,
      "end_pos": 47427,
      "size": 772
    },
    {
      "chunk_id": "N19-1423_chunk_83",
      "document": "N19-1423",
      "text": "1:\nLong Papers). Association for Computational Lin-\nguistics.\nAlex Warstadt, Amanpreet Singh, and Samuel R Bow-\nman. 2018.\nNeural network acceptability judg-\nments. ar Xiv preprint ar Xiv:1805.12471.\nAdina Williams, Nikita Nangia, and Samuel R Bow-\nman. 2018.\nA broad-coverage challenge corpus\nfor sentence understanding through inference.\nIn\nNAACL.\nYonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V\nLe,\nMohammad Norouzi,\nWolfgang Macherey,\nMaxim Krikun,\nYuan Cao,\nQin Gao,\nKlaus\nMacherey, et al. 2016.\nGoogles neural ma-\nchine translation system: Bridging the gap between\nhuman and machine translation.\nar Xiv preprint\nar Xiv:1609.08144.\nJason Yosinski, Jeff Clune, Yoshua Bengio, and Hod\nLipson. 2014. How transferable are features in deep\nneural networks?",
      "start_pos": 47227,
      "end_pos": 47984,
      "size": 756
    },
    {
      "chunk_id": "N19-1423_chunk_84",
      "document": "N19-1423",
      "text": "e gap between\nhuman and machine translation.\nar Xiv preprint\nar Xiv:1609.08144.\nJason Yosinski, Jeff Clune, Yoshua Bengio, and Hod\nLipson. 2014. How transferable are features in deep\nneural networks? In Advances in neural information\nprocessing systems, pages 33203328.\nAdams Wei Yu, David Dohan, Minh-Thang Luong, Rui\nZhao, Kai Chen, Mohammad Norouzi, and Quoc V\nLe. 2018.\nQANet: Combining local convolution\nwith global self-attention for reading comprehen-\nsion. In ICLR.\nRowan Zellers, Yonatan Bisk, Roy Schwartz, and Yejin\nChoi. 2018. Swag: A large-scale adversarial dataset\nfor grounded commonsense inference. In Proceed-\nings of the 2018 Conference on Empirical Methods\nin Natural Language Processing (EMNLP).",
      "start_pos": 47784,
      "end_pos": 48500,
      "size": 715
    },
    {
      "chunk_id": "N19-1423_chunk_85",
      "document": "N19-1423",
      "text": "and Yejin Choi. 2018. Swag: A large-scale adversarial dataset for grounded commonsense inference. In Proceed- ings of the 2018 Conference on Empirical Methods in Natural Language Processing (EMNLP). Yukun Zhu, Ryan Kiros, Rich Zemel, Ruslan Salakhut- dinov, Raquel Urtasun, Antonio Torralba, and Sanja Fidler. 2015. Aligning books and movies: Towards story-like visual explanations by watching movies and reading books. In Proceedings of the IEEE international conference on computer vision, pages 1927. Appendix for BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding We organize the appendix into three sections: Additional implementation details for BERT are presented in Appendix A; Additional details for our experiments are presented in Appendix B; and",
      "start_pos": 48300,
      "end_pos": 49087,
      "size": 787
    },
    {
      "chunk_id": "N19-1423_chunk_86",
      "document": "N19-1423",
      "text": "derstanding We organize the appendix into three sections: Additional implementation details for BERT are presented in Appendix A; Additional details for our experiments are presented in Appendix B; and Additional ablation studies are presented in Appendix C. We present additional ablation studies for BERT including: Effect of Number of Training Steps; and Ablation for Different Masking Proce- dures. A Additional Details for BERT A.1 Illustration of the Pre-training Tasks We provide examples of the pre-training tasks in the following. Masked LM and the Masking Procedure As- suming the unlabeled sentence is my dog is hairy, and during the random masking procedure we chose the 4-th token (which corresponding to hairy), our masking procedure can be further il- lustrated by 80% of the",
      "start_pos": 48887,
      "end_pos": 49677,
      "size": 790
    },
    {
      "chunk_id": "N19-1423_chunk_87",
      "document": "N19-1423",
      "text": "g the unlabeled sentence is my dog is hairy, and during the random masking procedure we chose the 4-th token (which corresponding to hairy), our masking procedure can be further il- lustrated by 80% of the time: Replace the word with the [MASK] token, e.g., my dog is hairy my dog is [MASK] 10% of the time: Replace the word with a random word, e.g., my dog is hairy my dog is apple 10% of the time: Keep the word un- changed, e.g., my dog is hairy my dog is hairy. The purpose of this is to bias the representation towards the actual observed word. The advantage of this procedure is that the Transformer encoder does not know which words it will be asked to predict or which have been re- placed by random words, so it is forced to keep a distributional contextual representation of ev- ery",
      "start_pos": 49477,
      "end_pos": 50269,
      "size": 792
    },
    {
      "chunk_id": "N19-1423_chunk_88",
      "document": "N19-1423",
      "text": "t the\nTransformer encoder does not know which words\nit will be asked to predict or which have been re-\nplaced by random words, so it is forced to keep\na distributional contextual representation of ev-\nery input token.\nAdditionally, because random\nreplacement only occurs for 1.5% of all tokens\n(i.e., 10% of 15%), this does not seem to harm\nthe models language understanding capability. In\nSection C.2, we evaluate the impact this proce-\ndure.\nCompared to standard langauge model training,\nthe masked LM only make predictions on 15% of\ntokens in each batch, which suggests that more\npre-training steps may be required for the model\n\nBERT (Ours)\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...",
      "start_pos": 50069,
      "end_pos": 50778,
      "size": 708
    },
    {
      "chunk_id": "N19-1423_chunk_89",
      "document": "N19-1423",
      "text": "make predictions on 15% of\ntokens in each batch, which suggests that more\npre-training steps may be required for the model\n\nBERT (Ours)\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...\nTrm\nTrm\nTrm\nTrm\nTrm\nTrm\n...\n...\nOpen AI GPT\nLstm\nELMo\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\nLstm\n T1\nT2\n TN\n...\n...\n...\n...\n...\n E1\nE2\n EN\n...\n T1\nT2\nTN\n...\n E1\nE2\n EN\n...\n T1\nT2\n TN\n...\n E1\nE2\n EN\n...\nFigure 3: Differences in pre-training model architectures. BERT uses a bidirectional Transformer. Open AI GPT\nuses a left-to-right Transformer. ELMo uses the concatenation of independently trained left-to-right and right-to-\nleft LSTMs to generate features for downstream tasks. Among the three, only BERT representations are jointly\nconditioned on both left and right context in all layers.",
      "start_pos": 50578,
      "end_pos": 51352,
      "size": 773
    },
    {
      "chunk_id": "N19-1423_chunk_90",
      "document": "N19-1423",
      "text": "ined left-to-right and right-to- left LSTMs to generate features for downstream tasks. Among the three, only BERT representations are jointly conditioned on both left and right context in all layers. In addition to the architecture differences, BERT and Open AI GPT are ne-tuning approaches, while ELMo is a feature-based approach. to converge. In Section C.1 we demonstrate that MLM does converge marginally slower than a left- to-right model (which predicts every token), but the empirical improvements of the MLM model far outweigh the increased training cost. Next Sentence Prediction The next sentence prediction task can be illustrated in the following examples. Input = [CLS] the man went to [MASK] store [SEP] he bought a gallon [MASK] milk [SEP] Label = Is Next Input = [CLS] the man",
      "start_pos": 51152,
      "end_pos": 51944,
      "size": 792
    },
    {
      "chunk_id": "N19-1423_chunk_91",
      "document": "N19-1423",
      "text": "next sentence\nprediction task can be illustrated in the following\nexamples.\nInput = [CLS] the man went to [MASK] store [SEP]\nhe bought a gallon [MASK] milk [SEP]\nLabel = Is Next\nInput = [CLS] the man [MASK] to the store [SEP]\npenguin [MASK] are flight ##less birds [SEP]\nLabel = Not Next\nA.2\nPre-training Procedure\nTo generate each training input sequence, we sam-\nple two spans of text from the corpus, which we\nrefer to as sentences even though they are typ-\nically much longer than single sentences (but can\nbe shorter also). The rst sentence receives the A\nembedding and the second receives the B embed-\nding. 50% of the time B is the actual next sentence\nthat follows A and 50% of the time it is a random\nsentence, which is done for the next sentence pre-\ndiction task.",
      "start_pos": 51744,
      "end_pos": 52520,
      "size": 774
    },
    {
      "chunk_id": "N19-1423_chunk_92",
      "document": "N19-1423",
      "text": "the second receives the B embed-\nding. 50% of the time B is the actual next sentence\nthat follows A and 50% of the time it is a random\nsentence, which is done for the next sentence pre-\ndiction task. They are sampled such that the com-\nbined length is 512 tokens. The LM masking is\napplied after Word Piece tokenization with a uni-\nform masking rate of 15%, and no special consid-\neration given to partial word pieces.\nWe train with batch size of 256 sequences (256\nsequences * 512 tokens = 128,000 tokens/batch)\nfor 1,000,000 steps, which is approximately 40\nepochs over the 3.3 billion word corpus.\nWe\nuse Adam with learning rate of 1e-4, 1 = 0.9,\n2 = 0.999, L2 weight decay of 0.01, learning\nrate warmup over the rst 10,000 steps, and linear\ndecay of the learning rate.",
      "start_pos": 52320,
      "end_pos": 53093,
      "size": 772
    },
    {
      "chunk_id": "N19-1423_chunk_93",
      "document": "N19-1423",
      "text": "he 3.3 billion word corpus.\nWe\nuse Adam with learning rate of 1e-4, 1 = 0.9,\n2 = 0.999, L2 weight decay of 0.01, learning\nrate warmup over the rst 10,000 steps, and linear\ndecay of the learning rate. We use a dropout prob-\nability of 0.1 on all layers. We use a gelu acti-\nvation (Hendrycks and Gimpel, 2016) rather than\nthe standard relu, following Open AI GPT. The\ntraining loss is the sum of the mean masked LM\nlikelihood and the mean next sentence prediction\nlikelihood.\nTraining of BERTBASE was performed on 4\nCloud TPUs in Pod conguration (16 TPU chips\ntotal).13 Training of BERTLARGE was performed\non 16 Cloud TPUs (64 TPU chips total). Each pre-\ntraining took 4 days to complete.\nLonger sequences are disproportionately expen-\nsive because attention is quadratic to the sequence\nlength.",
      "start_pos": 52893,
      "end_pos": 53688,
      "size": 794
    },
    {
      "chunk_id": "N19-1423_chunk_94",
      "document": "N19-1423",
      "text": "performed on 16 Cloud TPUs (64 TPU chips total). Each pre- training took 4 days to complete. Longer sequences are disproportionately expen- sive because attention is quadratic to the sequence length. To speed up pretraing in our experiments, we pre-train the model with sequence length of 128 for 90% of the steps. Then, we train the rest 10% of the steps of sequence of 512 to learn the positional embeddings. A.3 Fine-tuning Procedure For ne-tuning, most model hyperparameters are the same as in pre-training, with the exception of the batch size, learning rate, and number of train- ing epochs. The dropout probability was always kept at 0.1. The optimal hyperparameter values are task-specic, but we found the following range of possible values to work well across all tasks: Batch size: 16,",
      "start_pos": 53488,
      "end_pos": 54283,
      "size": 795
    },
    {
      "chunk_id": "N19-1423_chunk_95",
      "document": "N19-1423",
      "text": "s. The dropout probability was always\nkept at 0.1. The optimal hyperparameter values\nare task-specic, but we found the following range\nof possible values to work well across all tasks:\n Batch size: 16, 32\n13https://cloudplatform.googleblog.com/2018/06/Cloud-\nTPU-now-offers-preemptible-pricing-and-global-\navailability.html\n\n Learning rate (Adam): 5e-5, 3e-5, 2e-5\n Number of epochs: 2, 3, 4\nWe also observed that large data sets (e.g.,\n100k+ labeled training examples) were far less\nsensitive to hyperparameter choice than small data\nsets. Fine-tuning is typically very fast, so it is rea-\nsonable to simply run an exhaustive search over\nthe above parameters and choose the model that\nperforms best on the development set.",
      "start_pos": 54083,
      "end_pos": 54807,
      "size": 723
    },
    {
      "chunk_id": "N19-1423_chunk_96",
      "document": "N19-1423",
      "text": "small data\nsets. Fine-tuning is typically very fast, so it is rea-\nsonable to simply run an exhaustive search over\nthe above parameters and choose the model that\nperforms best on the development set.\nA.4\nComparison of BERT, ELMo ,and\nOpen AI GPT\nHere we studies the differences in recent popular\nrepresentation learning models including ELMo,\nOpen AI GPT and BERT. The comparisons be-\ntween the model architectures are shown visually\nin Figure 3. Note that in addition to the architec-\nture differences, BERT and Open AI GPT are ne-\ntuning approaches, while ELMo is a feature-based\napproach.\nThe most comparable existing pre-training\nmethod to BERT is Open AI GPT, which trains a\nleft-to-right Transformer LM on a large text cor-\npus.",
      "start_pos": 54607,
      "end_pos": 55342,
      "size": 734
    },
    {
      "chunk_id": "N19-1423_chunk_97",
      "document": "N19-1423",
      "text": "ning approaches, while ELMo is a feature-based\napproach.\nThe most comparable existing pre-training\nmethod to BERT is Open AI GPT, which trains a\nleft-to-right Transformer LM on a large text cor-\npus. In fact, many of the design decisions in BERT\nwere intentionally made to make it as close to\nGPT as possible so that the two methods could be\nminimally compared. The core argument of this\nwork is that the bi-directionality and the two pre-\ntraining tasks presented in Section 3.1 account for\nthe majority of the empirical improvements, but\nwe do note that there are several other differences\nbetween how BERT and GPT were trained:\n GPT is trained on the Books Corpus (800M\nwords); BERT is trained on the Books Cor-\npus (800M words) and Wikipedia (2,500M\nwords).",
      "start_pos": 55142,
      "end_pos": 55905,
      "size": 761
    },
    {
      "chunk_id": "N19-1423_chunk_98",
      "document": "N19-1423",
      "text": "re several other differences between how BERT and GPT were trained: GPT is trained on the Books Corpus (800M words); BERT is trained on the Books Cor- pus (800M words) and Wikipedia (2,500M words). GPT uses a sentence separator ([SEP]) and classier token ([CLS]) which are only in- troduced at ne-tuning time; BERT learns [SEP], [CLS] and sentence A/B embed- dings during pre-training. GPT was trained for 1M steps with a batch size of 32,000 words; BERT was trained for 1M steps with a batch size of 128,000 words. GPT used the same learning rate of 5e-5 for all ne-tuning experiments; BERT chooses a task-specic ne-tuning learning rate which performs the best on the development set. To isolate the effect of these differences, we per- form ablation experiments in Section 5.1 which",
      "start_pos": 55705,
      "end_pos": 56489,
      "size": 784
    },
    {
      "chunk_id": "N19-1423_chunk_99",
      "document": "N19-1423",
      "text": "ments; BERT chooses a\ntask-specic ne-tuning learning rate which\nperforms the best on the development set.\nTo isolate the effect of these differences, we per-\nform ablation experiments in Section 5.1 which\ndemonstrate that the majority of the improvements\nare in fact coming from the two pre-training tasks\nand the bidirectionality they enable.\nA.5\nIllustrations of Fine-tuning on Different\nTasks\nThe illustration of ne-tuning BERT on different\ntasks can be seen in Figure 4. Our task-specic\nmodels are formed by incorporating BERT with\none additional output layer, so a minimal num-\nber of parameters need to be learned from scratch.\nAmong the tasks, (a) and (b) are sequence-level\ntasks while (c) and (d) are token-level tasks.",
      "start_pos": 56289,
      "end_pos": 57018,
      "size": 728
    },
    {
      "chunk_id": "N19-1423_chunk_100",
      "document": "N19-1423",
      "text": "T with\none additional output layer, so a minimal num-\nber of parameters need to be learned from scratch.\nAmong the tasks, (a) and (b) are sequence-level\ntasks while (c) and (d) are token-level tasks. In\nthe gure, E represents the input embedding, Ti\nrepresents the contextual representation of token i,\n[CLS] is the special symbol for classication out-\nput, and [SEP] is the special symbol to separate\nnon-consecutive token sequences.\nB\nDetailed Experimental Setup\nB.1\nDetailed Descriptions for the GLUE\nBenchmark Experiments.\nThe GLUE benchmark includes the following\ndatasets, the descriptions of which were originally\nsummarized in Wang et al. (2018a):\nMNLI\nMulti-Genre Natural Language Inference\nis a large-scale, crowdsourced entailment classi-\ncation task (Williams et al., 2018).",
      "start_pos": 56818,
      "end_pos": 57605,
      "size": 786
    },
    {
      "chunk_id": "N19-1423_chunk_101",
      "document": "N19-1423",
      "text": "riptions of which were originally\nsummarized in Wang et al. (2018a):\nMNLI\nMulti-Genre Natural Language Inference\nis a large-scale, crowdsourced entailment classi-\ncation task (Williams et al., 2018). Given a pair of\nsentences, the goal is to predict whether the sec-\nond sentence is an entailment, contradiction, or\nneutral with respect to the rst one.\nQQP\nQuora Question Pairs is a binary classi-\ncation task where the goal is to determine if two\nquestions asked on Quora are semantically equiv-\nalent (Chen et al., 2018).\nQNLI\nQuestion Natural Language Inference is\na version of the Stanford Question Answering\nDataset (Rajpurkar et al., 2016) which has been\nconverted to a binary classication task (Wang\net al., 2018a).",
      "start_pos": 57405,
      "end_pos": 58128,
      "size": 722
    },
    {
      "chunk_id": "N19-1423_chunk_102",
      "document": "N19-1423",
      "text": "QNLI\nQuestion Natural Language Inference is\na version of the Stanford Question Answering\nDataset (Rajpurkar et al., 2016) which has been\nconverted to a binary classication task (Wang\net al., 2018a). The positive examples are (ques-\ntion, sentence) pairs which do contain the correct\nanswer, and the negative examples are (question,\nsentence) from the same paragraph which do not\ncontain the answer.\nSST-2\nThe Stanford Sentiment Treebank is a\nbinary single-sentence classication task consist-\ning of sentences extracted from movie reviews\n\nBERT\nE[CLS]\nE1\n E[SEP]\n...\nEN\nE1\n...\nEM\nC\nT1\nT[SEP]\n...\nTN\nT1\n...\nTM\n[CLS]\nTok \n [SEP]\n...\nTok \nN\nTok \n...\nTok\nM\nQuestion\nParagraph\nBERT\nE[CLS]\nE1\n E2\n EN\nC\nT1\n T2\n TN\nSingle Sentence \n...\n...\nBERT\nTok 1\n Tok 2\n Tok N\n...",
      "start_pos": 57928,
      "end_pos": 58690,
      "size": 760
    },
    {
      "chunk_id": "N19-1423_chunk_103",
      "document": "N19-1423",
      "text": "... EN E1 ... EM C T1 T[SEP] ... TN T1 ... TM [CLS] Tok [SEP] ... Tok N Tok ... Tok M Question Paragraph BERT E[CLS] E1 E2 EN C T1 T2 TN Single Sentence ... ... BERT Tok 1 Tok 2 Tok N ... [CLS] E[CLS] E1 E2 EN C T1 T2 TN Single Sentence B-PER O O ... ... E[CLS] E1 E[SEP] Class Label ... EN E1 ... EM C T1 T[SEP] ... TN T1 ... TM Start/End Span Class Label BERT Tok 1 Tok 2 Tok N ... [CLS] Tok 1 [CLS] [CLS] Tok [SEP] ... Tok N Tok ... Tok M Sentence 1 ... Sentence 2 Figure 4: Illustrations of Fine-tuning BERT on Different Tasks. with human annotations of their sentiment (Socher et al., 2013). Co LA The Corpus of Linguistic Acceptability is a binary single-sentence classication task, where the goal is to predict whether an English sentence is linguistically",
      "start_pos": 58490,
      "end_pos": 59253,
      "size": 763
    },
    {
      "chunk_id": "N19-1423_chunk_104",
      "document": "N19-1423",
      "text": "human annotations of their sentiment (Socher\net al., 2013).\nCo LA\nThe Corpus of Linguistic Acceptability is\na binary single-sentence classication task, where\nthe goal is to predict whether an English sentence\nis linguistically acceptable or not (Warstadt\net al., 2018).\nSTS-B\nThe Semantic Textual Similarity Bench-\nmark is a collection of sentence pairs drawn from\nnews headlines and other sources (Cer et al.,\n2017). They were annotated with a score from 1\nto 5 denoting how similar the two sentences are in\nterms of semantic meaning.\nMRPC\nMicrosoft Research Paraphrase Corpus\nconsists of sentence pairs automatically extracted\nfrom online news sources, with human annotations\nfor whether the sentences in the pair are semanti-\ncally equivalent (Dolan and Brockett, 2005).",
      "start_pos": 59053,
      "end_pos": 59827,
      "size": 773
    },
    {
      "chunk_id": "N19-1423_chunk_105",
      "document": "N19-1423",
      "text": "pus\nconsists of sentence pairs automatically extracted\nfrom online news sources, with human annotations\nfor whether the sentences in the pair are semanti-\ncally equivalent (Dolan and Brockett, 2005).\nRTE\nRecognizing Textual Entailment is a bi-\nnary entailment task similar to MNLI, but with\nmuch less training data (Bentivogli et al., 2009).14\nWNLI\nWinograd NLI is a small natural lan-\nguage inference dataset (Levesque et al., 2011).\nThe GLUE webpage notes that there are issues\nwith the construction of this dataset, 15 and every\ntrained system thats been submitted to GLUE has\nperformed worse than the 65.1 baseline accuracy\nof predicting the majority class. We therefore ex-\nclude this set to be fair to Open AI GPT. For our\nGLUE submission, we always predicted the ma-\njority class.",
      "start_pos": 59627,
      "end_pos": 60415,
      "size": 787
    },
    {
      "chunk_id": "N19-1423_chunk_106",
      "document": "N19-1423",
      "text": "d worse than the 65.1 baseline accuracy\nof predicting the majority class. We therefore ex-\nclude this set to be fair to Open AI GPT. For our\nGLUE submission, we always predicted the ma-\njority class.\n14Note that we only report single-task ne-tuning results\nin this paper. A multitask ne-tuning approach could poten-\ntially push the performance even further. For example, we\ndid observe substantial improvements on RTE from multi-\ntask training with MNLI.\n15https://gluebenchmark.com/faq\n\nC\nAdditional Ablation Studies\nC.1\nEffect of Number of Training Steps\nFigure 5 presents MNLI Dev accuracy after ne-\ntuning from a checkpoint that has been pre-trained\nfor k steps. This allows us to answer the following\nquestions:\n1.",
      "start_pos": 60215,
      "end_pos": 60935,
      "size": 719
    },
    {
      "chunk_id": "N19-1423_chunk_107",
      "document": "N19-1423",
      "text": "1\nEffect of Number of Training Steps\nFigure 5 presents MNLI Dev accuracy after ne-\ntuning from a checkpoint that has been pre-trained\nfor k steps. This allows us to answer the following\nquestions:\n1. Question:\nDoes BERT really need such\na large amount of pre-training (128,000\nwords/batch * 1,000,000 steps) to achieve\nhigh ne-tuning accuracy?\nAnswer: Yes, BERTBASE achieves almost\n1.0% additional accuracy on MNLI when\ntrained on 1M steps compared to 500k steps.\n2. Question: Does MLM pre-training converge\nslower than LTR pre-training, since only 15%\nof words are predicted in each batch rather\nthan every word?\nAnswer: The MLM model does converge\nslightly slower than the LTR model. How-\never, in terms of absolute accuracy the MLM\nmodel begins to outperform the LTR model\nalmost immediately.",
      "start_pos": 60735,
      "end_pos": 61531,
      "size": 795
    },
    {
      "chunk_id": "N19-1423_chunk_108",
      "document": "N19-1423",
      "text": "than every word?\nAnswer: The MLM model does converge\nslightly slower than the LTR model. How-\never, in terms of absolute accuracy the MLM\nmodel begins to outperform the LTR model\nalmost immediately.\nC.2\nAblation for Different Masking\nProcedures\nIn Section 3.1, we mention that BERT uses a\nmixed strategy for masking the target tokens when\npre-training with the masked language model\n(MLM) objective. The following is an ablation\nstudy to evaluate the effect of different masking\nstrategies.\nNote that the purpose of the masking strategies\nis to reduce the mismatch between pre-training\n400\n800\n1,000\n78\n82\nPre-training Steps (Thousands)\nMNLI Dev Accuracy\nBERTBASE (Masked LM)\nBERTBASE (Left-to-Right)\nFigure 5: Ablation over number of training steps.",
      "start_pos": 61331,
      "end_pos": 62083,
      "size": 750
    },
    {
      "chunk_id": "N19-1423_chunk_109",
      "document": "N19-1423",
      "text": "the mismatch between pre-training 400 800 1,000 78 82 Pre-training Steps (Thousands) MNLI Dev Accuracy BERTBASE (Masked LM) BERTBASE (Left-to-Right) Figure 5: Ablation over number of training steps. This shows the MNLI accuracy after ne-tuning, starting from model parameters that have been pre-trained for k steps. The x-axis is the value of k. and ne-tuning, as the [MASK] symbol never ap- pears during the ne-tuning stage. We report the Dev results for both MNLI and NER. For NER, we report both ne-tuning and feature-based ap- proaches, as we expect the mismatch will be am- plied for the feature-based approach as the model will not have the chance to adjust the representa- tions. Masking Rates Dev Set Results Fine-tune Fine-tune Feature-based 80% 10% 10% 84.2 95.4 94.9 100% 0% 0% 84.3",
      "start_pos": 61883,
      "end_pos": 62676,
      "size": 793
    },
    {
      "chunk_id": "N19-1423_chunk_110",
      "document": "N19-1423",
      "text": "feature-based approach as the model\nwill not have the chance to adjust the representa-\ntions.\nMasking Rates\nDev Set Results\nFine-tune Fine-tune Feature-based\n80%\n10%\n10%\n84.2\n95.4\n94.9\n100%\n0%\n0%\n84.3\n94.9\n94.0\n80%\n0%\n20%\n84.1\n95.2\n94.6\n80%\n20%\n0%\n84.4\n95.2\n94.7\n0%\n20%\n80%\n83.7\n94.8\n94.6\n0%\n0% 100%\n83.6\n94.9\n94.6\nTable 8: Ablation over different masking strategies.\nThe results are presented in Table 8. In the table,\nMASK means that we replace the target token with\nthe [MASK] symbol for MLM; SAME means that\nwe keep the target token as is; RND means that\nwe replace the target token with another random\ntoken.\nThe numbers in the left part of the table repre-\nsent the probabilities of the specic strategies used\nduring MLM pre-training (BERT uses 80%, 10%,\n10%).",
      "start_pos": 62476,
      "end_pos": 63244,
      "size": 766
    },
    {
      "chunk_id": "N19-1423_chunk_111",
      "document": "N19-1423",
      "text": "ce the target token with another random\ntoken.\nThe numbers in the left part of the table repre-\nsent the probabilities of the specic strategies used\nduring MLM pre-training (BERT uses 80%, 10%,\n10%). The right part of the paper represents the\nDev set results. For the feature-based approach,\nwe concatenate the last 4 layers of BERT as the\nfeatures, which was shown to be the best approach\nin Section 5.3.\nFrom the table it can be seen that ne-tuning is\nsurprisingly robust to different masking strategies.\nHowever, as expected, using only the MASK strat-\negy was problematic when applying the feature-\nbased approach to NER. Interestingly, using only\nthe RND strategy performs much worse than our\nstrategy as well.",
      "start_pos": 63044,
      "end_pos": 63759,
      "size": 715
    }
  ]
}